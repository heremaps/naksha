name: test-workflow
#run-name: [${{ github.actor }}] triggered [${{ github.event_name }}] event on ${{ github.ref_type }} [${{ github.ref_name }}]
on: [push]
jobs:
  Build-and-Release:
    runs-on: ubuntu-latest
    env:
      SERVICE_JAR_DIR: ${{ github.workspace }}/xyz-hub-service/target
      CODEDEPLOY_DIR: ${{ github.workspace }}/deployment/codedeploy
    steps:
      #- run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "[${{ github.actor }}] triggered [${{ github.event_name }}] event on ${{ github.ref_type }} [${{ github.ref_name }}]"
      - run: echo "üéâ This job is running on a ${{ runner.os }} server hosted by GitHub!"
      #- run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v3
      - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."
      #- name: Cache local Maven repository
        #uses: actions/cache@v3
        #id: maven-cache
        #with:
          #path: ~/.m2/repository
          #key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          #restore-keys: |
            #${{ runner.os }}-maven-
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: corretto
          java-version: 17
          java-package: jdk
          cache: maven
      - run: echo "üñ•Ô∏è The workflow is now ready to build your code on the runner."
      - run: mvn -B clean package
      - name: List target artifacts
        run: |
          ls -l $SERVICE_JAR_DIR
      - name: Prepare CodeDeploy application revision
        run: |
          cp -p $SERVICE_JAR_DIR/xyz-hub-service.jar $CODEDEPLOY_DIR/contents/
      - name: List CodeDeploy artifacts
        run: |
          ls -lR $CODEDEPLOY_DIR
      - name: Save CodeDeploy artifacts
        uses: actions/upload-artifact@v3
        with:
          name: codedeploy-artifact
          path: ${{ env.CODEDEPLOY_DIR }}
          if-no-files-found: error
      - run: echo "üçè This job's status is ${{ job.status }}."



  ### Job to Deploy to Dev environment
  Dev-Deploy:
    needs: Build-and-Release
    runs-on: ubuntu-latest
    env:
      CODEDEPLOY_DIR: ${{ github.workspace }}/deployment/codedeploy
    steps:
      - name: Fetch CodeDeploy artifacts
        uses: actions/download-artifact@v3
        with:
          name: codedeploy-artifact
          path: ${{ env.CODEDEPLOY_DIR }}
      - name: List CodeDeploy artifacts
        run: |
          ls -lR $CODEDEPLOY_DIR
      - run: echo "üçè This job's status is ${{ job.status }}."



  ### Job to Deploy to E2E environment
  E2E-Deploy:
    needs: [Build-and-Release, Dev-Deploy]
    runs-on: ubuntu-latest
    env:
      CODEDEPLOY_DIR: ${{ github.workspace }}/deployment/codedeploy
    steps:
      - name: Fetch CodeDeploy artifacts
        uses: actions/download-artifact@v3
        with:
          name: codedeploy-artifact
          path: ${{ env.CODEDEPLOY_DIR }}
      - name: List CodeDeploy artifacts
        run: |
          ls -lR $CODEDEPLOY_DIR
      - run: echo "üçè This job's status is ${{ job.status }}."
