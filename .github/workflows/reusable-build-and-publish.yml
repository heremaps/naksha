on:
  workflow_call:
    outputs:
      pipeline-artifact-name:
        description: 'Name of the uploaded artifact which can be downloaded using actions/download-artifact within the same pipeline (e.g. codedeploy-artifact)'
        value: ${{ jobs.main.outputs.pipeline-artifact-name }}
      app-version:
        description: 'Application version identified using maven (e.g. 1.1.1-SNAPSHOT, 1.2.0)'
        value: ${{ jobs.main.outputs.app-version }}
      codedeploy-artifact-version:
        description: 'Unique version which should be used in next step(s) for CodeDeploy artifact (e.g. 20230528-144100_d63fd762704ef242d9827662b872b305744f753e)'
        value: ${{ jobs.main.outputs.codedeploy-artifact-version }}


env:
  MIN_COVERAGE_OVERALL: 0
  MIN_COVERAGE_CHANGED_FILES: 0
  SERVICE_JAR_DIR: ${{ github.workspace }}/build/libs
  CODEDEPLOY_DIR: ${{ github.workspace }}/deployment/codedeploy
  GITHUB_CODEDEPLOY_ARTIFACT_NAME: codedeploy-artifact
  NAKSHA_LOCAL_TEST_CONTEXT: LOCAL_STANDALONE

jobs:
  main:
    runs-on: ubuntu-latest
    outputs:
      pipeline-artifact-name: ${{ steps.save-artifact-name.outputs.name }}
      app-version: ${{ steps.save-app-version.outputs.version }}
      codedeploy-artifact-version: ${{ steps.save-artifact-version.outputs.version }}
    services:
      postgres:
        image: postgis/postgis
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - run: echo "[${{ github.triggering_actor }}] triggered [${{ github.event_name }}] event on ${{ github.ref_type }}/PR# [${{ github.ref_name }}]"
      - run: echo "üéâ This job is running on a ${{ runner.os }} server hosted by GitHub!"
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          java-package: 'jdk'
          cache: 'gradle'
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: 8.2
      ### Build, Test, Coverage Verification
      - name: Build fat jar, Run Unit tests, Verify code coverage
        run: gradle shadowJar jacocoTestReport jacocoTestCoverageVerification
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v4
        if: success() || failure() # always run even if the previous step fails
        with:
          report_paths: '**/build/test-results/test/TEST-*.xml'
      - name: Publish code coverage report as PR comment
        id: jacoco
        uses: madrapps/jacoco-report@v1.6.1
        with:
          paths: '**/build/reports/jacoco/test/jacocoTestReport.xml'
          token: ${{ secrets.GITHUB_TOKEN }}
          min-coverage-overall: $MIN_COVERAGE_OVERALL
          min-coverage-changed-files: $MIN_COVERAGE_CHANGED_FILES
          title: Code Coverage
      - name: Fail when coverage of changed files is too low
        run: |
          CHANGED_FILES_FAILED=$(echo '${{ steps.jacoco.outputs.coverage-changed-files }} < ${{ env.MIN_COVERAGE_CHANGED_FILES }}' | bc)
          [[ $CHANGED_FILES_FAILED -ne 0 ]] && echo 'Changed files coverage ${{ steps.jacoco.outputs.coverage-changed-files }}% is smaller than required ${{ env.MIN_COVERAGE_CHANGED_FILES }}%'
          [[ $CHANGED_FILES_FAILED -ne 0 ]] && exit 1 || exit 0
      - name: List generated artifacts
        run: |
          ls -l $SERVICE_JAR_DIR/*
      ### TODO : Publish to central repository
      - name: Prepare CodeDeploy artifact content
        run: |
          cp -p $SERVICE_JAR_DIR/naksha-*-all.jar $CODEDEPLOY_DIR/contents/naksha-hub/
      - name: List CodeDeploy artifact content
        run: |
          ls -lR $CODEDEPLOY_DIR
      - name: Save pipeline artifact name
        id: save-artifact-name
        run: echo "name=${{ env.GITHUB_CODEDEPLOY_ARTIFACT_NAME }}" >> "$GITHUB_OUTPUT"
      - name: Save CodeDeploy artifact content
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.GITHUB_CODEDEPLOY_ARTIFACT_NAME }}
          path: ${{ env.CODEDEPLOY_DIR }}
          if-no-files-found: error
      - name: Identify and save Application version
        id: save-app-version
        run: |
          APP_VERSION=`gradle -q printAppVersion`
          echo $APP_VERSION
          echo "version=$APP_VERSION" >> "$GITHUB_OUTPUT"
      - name: Identify and save CodeDeploy artifact version
        id: save-artifact-version
        run: |
          ARTIFACT_VERSION=`date +"%Y%m%d-%H%M%S"`_${{ github.sha }}
          echo $ARTIFACT_VERSION
          echo "version=$ARTIFACT_VERSION" >> "$GITHUB_OUTPUT"
      - run: echo "üçè This job's status is ${{ job.status }}."
