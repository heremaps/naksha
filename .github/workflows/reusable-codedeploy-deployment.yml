on:
  workflow_call:
    inputs:
      aws-region:
        type: string
        description: 'AWS region the S3 bucket is associated with'
        required: true
      codedeploy-app-name:
        type: string
        description: 'CodeDeploy Application name, to be used for deployment'
        required: true
      codedeploy-group-name:
        type: string
        description: 'CodeDeploy DeploymentGroup name, to be used for deployment'
        required: true
      deployment-description:
        type: string
        description: 'CodeDeploy deployment description'
        required: true
      s3-bucket-name:
        type: string
        description: 'AWS S3 bucket name, which contains the artifact bundle to be deployed'
        required: true
      s3-artifact-path:
        type: string
        description: 'AWS S3 artifact path, which is to be used for deployment (e.g. 1.1.1/deployment.tar.gz)'
        required: true
      s3-artifact-type:
        type: string
        description: 'Type of the artifact to be deployed (e.g. tar, zip, tgz)'
        required: true
    secrets:
      aws-key:
        description: 'AWS Access key of a user, who is allowed to upload artifact to S3 bucket'
        required: true
      aws-secret:
        description: 'AWS Access secret of a user, who is allowed to upload artifact to S3 bucket'
        required: true

jobs:
  main:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Print deployment parameters
        run: |
          echo "aws-region = ${{ inputs.aws-region }}"
          echo "codedeploy-app-name = ${{ inputs.codedeploy-app-name }}"
          echo "codedeploy-group-name = ${{ inputs.codedeploy-group-name }}"
          echo "deployment-description = ${{ inputs.deployment-description }}"
          echo "s3-bucket-name = ${{ inputs.s3-bucket-name }}"
          echo "s3-artifact-path = ${{ inputs.s3-artifact-path }}"
          echo "s3-artifact-type = ${{ inputs.s3-artifact-type }}"
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.aws-key }}
          aws-secret-access-key: ${{ secrets.aws-secret }}
          aws-region: ${{ inputs.aws-region }}
      - name: Submit AWS-CodeDeploy Deployment
        id: create-deployment
        run: |
          aws deploy create-deployment \
          	--application-name ${{ inputs.codedeploy-app-name }} \
          	--deployment-group-name ${{ inputs.codedeploy-group-name }} \
          	--s3-location bucket=${{ inputs.s3-bucket-name }},key=${{ inputs.s3-artifact-path }},bundleType=${{ inputs.s3-artifact-type }} \
          	--description "${{ inputs.deployment-description }}" \
            > deployment_command.log
          cat deployment_command.log
          DEPLOYMENT_ID=`cat deployment_command.log | jq -r '.deploymentId'`
          echo "id=$DEPLOYMENT_ID" >> "$GITHUB_OUTPUT"
      - name: Print Deployment status link
        run: |
          echo "Deployment status link : https://$AWS_REGION.console.aws.amazon.com/codesuite/codedeploy/deployments/$DEPLOYMENT_ID?region=$AWS_REGION"
        env:
          DEPLOYMENT_ID: ${{ steps.create-deployment.outputs.id }}
          AWS_REGION: ${{ inputs.aws-region }}
      - name: Monitor Deployment status
        run: |
          echo "Deployment Id = $DEPLOYMENT_ID, Timeout seconds = $TIMEOUT_SEC"
          bash ./.github/workflows/supporting-scripts/MonitorDeploymentStatus.sh $DEPLOYMENT_ID $TIMEOUT_SEC
        env:
          DEPLOYMENT_ID: ${{ steps.create-deployment.outputs.id }}
          TIMEOUT_SEC: 600
      - run: echo "üçè This job's status is ${{ job.status }}."
