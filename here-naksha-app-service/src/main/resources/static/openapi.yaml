openapi: "3.0.2"

servers:
  - url: "/"
    description: "Current host"
  - url: "https://naksha.ext.mapcreator.here.com/"
    description: "PRD"
  - url: "https://naksha-e2e.ext.mapcreator.here.com/"
    description: "E2E"
  - url: "https://naksha-dev.ext.mapcreator.here.com/"
    description: "DEV"

info:
  title: "Naskha Hub-API"
  description: "Naksha Hub-API is a REST API to provide simple access to geo data."
  version: "2.0.7"

security:
  - AccessToken: [ ]
  - Bearer: [ ]
tags:
  - name: Manage Storages
    description: Storage management endpoints.
paths:
  '/hub/health-status':
    get:
      tags:
        - Other
      summary: Test if the service is healthy.
      description: >-
        Returns 200 OK, if the service is working correctly. Any other response represents an error.
      operationId: getHealthStatus
      responses:
        '200':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/ErrorResponse500'
  '/hub/storages':
    get:
      tags:
        - Manage Storages
      summary: List storages
      description: >-
        Lists the storages, which the current authenticated user has access to.
      operationId: getStorages
      responses:
        '200':
          $ref: '#/components/responses/StoragesResponse'
        '401':
          $ref: '#/components/responses/ErrorResponse401'
        '403':
          $ref: '#/components/responses/ErrorResponse403'
        '429':
          $ref: '#/components/responses/ErrorResponse429'
        '500':
          $ref: '#/components/responses/ErrorResponse500'
        '502':
          $ref: '#/components/responses/ErrorResponse502'
        '504':
          $ref: '#/components/responses/ErrorResponse504'
        '513':
          $ref: '#/components/responses/ErrorResponse513'
    post:
      tags:
        - Manage Storages
      summary: Create a Storage
      description: Creates a new storage.
      operationId: postStorage
      requestBody:
        $ref: '#/components/requestBodies/StorageRequest'
      responses:
        '200':
          $ref: '#/components/responses/StorageResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse400'
        '401':
          $ref: '#/components/responses/ErrorResponse401'
        '403':
          $ref: '#/components/responses/ErrorResponse403'
        '409':
          $ref: '#/components/responses/ErrorResponse409'
        '429':
          $ref: '#/components/responses/ErrorResponse429'
        '500':
          $ref: '#/components/responses/ErrorResponse500'
        '502':
          $ref: '#/components/responses/ErrorResponse502'
        '504':
          $ref: '#/components/responses/ErrorResponse504'
        '513':
          $ref: '#/components/responses/ErrorResponse513'
  '/hub/storages/{storageId}':
    get:
      tags:
        - Manage Storages
      summary: Get the storage with the specific ID
      description: >-
        Return the storage detail corresponding to the given ID if the current authenticated user has access to.
      operationId: getStorageById
      parameters:
        - name: storageId
          in: path
          description: ID of storage to fetch
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/StoragesResponse'
        '404':
          $ref: '#/components/responses/ErrorResponse404'
        '401':
          $ref: '#/components/responses/ErrorResponse401'
        '403':
          $ref: '#/components/responses/ErrorResponse403'
        '429':
          $ref: '#/components/responses/ErrorResponse429'
        '500':
          $ref: '#/components/responses/ErrorResponse500'
        '502':
          $ref: '#/components/responses/ErrorResponse502'
        '504':
          $ref: '#/components/responses/ErrorResponse504'
        '513':
          $ref: '#/components/responses/ErrorResponse513'
components:
  securitySchemes:
    AccessToken:
      type: apiKey
      in: query
      name: access_token
    Bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
  requestBodies:
    StorageRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Storage'
          example:
            id: "um-mod-dev"
            type: "Storage"
            title: "UniMap Moderation Dev Storage"
            description: "UniMap Moderation storage for Dev environment, holding collections managed by Naksha service"
            className: "com.here.naksha.lib.psql.PsqlStorage"
            properties:
              dbConfig:
                host: localhost
                port: 5432
                db: db_name
                user: db_user
                password: db_password
                schema: naksha_moderation_dev
                minPoolSize: 5
                maxPoolSize: 50
  responses:
    EmptyResponse:
      description: >-
        An empty response as a result of a user-request with accepted MIME type application/x-empty.
      content:
        application/x-empty:
          schema:
            type: string
    ErrorResponse400:
      description: Indicates bad request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            type: "ErrorResponse"
            error: "IllegalArgument"
            errorMessage: "Invalid request."
            streamId: "d5b2edaa-2c6b-44e1-b794-feea6fa0e15b"
    ErrorResponse401:
      description: Unauthorized to perform the request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            type: "ErrorResponse"
            error: "Unauthorized"
            errorMessage: "Request not authorized."
            streamId: "d5b2edaa-2c6b-44e1-b794-feea6fa0e15b"
    ErrorResponse403:
      description: Access forbidden for given operation.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            type: "ErrorResponse"
            error: "Forbidden"
            errorMessage: "Operation not authorized."
            streamId: "d5b2edaa-2c6b-44e1-b794-feea6fa0e15b"
    ErrorResponse404:
      description: The requested content does not exist.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            type: "ErrorResponse"
            error: "NotFound"
            errorMessage: "Does not exist."
            streamId: "d5b2edaa-2c6b-44e1-b794-feea6fa0e15b"
    ErrorResponse409:
      description: Indicates request state/version conflict.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            type: "ErrorResponse"
            error: "Conflict"
            errorMessage: "Request conflicts with present state of resource on server side."
            streamId: "d5b2edaa-2c6b-44e1-b794-feea6fa0e15b"
    ErrorResponse429:
      description: Indicates request limit breach.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            type: "ErrorResponse"
            error: "TooManyRequests"
            errorMessage: "Too many requests in progress."
            streamId: "d5b2edaa-2c6b-44e1-b794-feea6fa0e15b"
    ErrorResponse500:
      description: Indicates server side error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            type: "ErrorResponse"
            error: "Exception"
            errorMessage: "Internal server error."
            streamId: "d5b2edaa-2c6b-44e1-b794-feea6fa0e15b"
    ErrorResponse502:
      description: Indicates gateway error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            type: "ErrorResponse"
            error: "BadGateway"
            errorMessage: "Unable to reach to dependent service(s)."
            streamId: "d5b2edaa-2c6b-44e1-b794-feea6fa0e15b"
    ErrorResponse504:
      description: Indicates request timeout.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            type: "ErrorResponse"
            error: "Timeout"
            errorMessage: "Request got timed out while processing."
            streamId: "d5b2edaa-2c6b-44e1-b794-feea6fa0e15b"
    ErrorResponse513:
      description: Request/Response payload too large.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            type: "ErrorResponse"
            error: "PayloadTooLarge"
            errorMessage: "Payload too large."
            streamId: "d5b2edaa-2c6b-44e1-b794-feea6fa0e15b"
    StorageResponse:
      description: The space.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Storage'
          examples:
            response:
              value:
                id: "um-mod-dev"
                type: "Storage"
                title: "UniMap Moderation Dev Storage"
                description: "UniMap Moderation storage for Dev environment, holding collections managed by Naksha service"
                className: "com.here.naksha.lib.psql.PsqlStorage"
    StoragesResponse:
      description: The list of storages.
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/Storage'
            type: array
          examples:
            response:
              value:
                - id: "um-mod-dev"
                  type: "Storage"
                  title: "UniMap Moderation Dev Storage"
                  description: "UniMap Moderation storage for Dev environment, holding collections managed by Naksha service"
                  className: "com.here.naksha.lib.psql.PsqlStorage"
  schemas:
    Error:
      type: object
      description: >-
        The response send when the request failed. This response may be send for
        certain HTTP error codes like 403 Forbidden or 502 Bad Gateway and
        should hold more details about the error reason.
      properties:
        streamId:
          description: >-
            A unique identifier of the request. This identifier should be
            provided when reporting errors. Its used to track requests
            through the XYZ platform.
          type: string
        type:
          type: string
          description: The type of the error. Defaults to 'ErrorResponse'.
        error:
          type: string
          description: The error summary.
        errorMessage:
          type: string
          description: >-
            A human readable message in English that should provide a more
            detailed description of the error reason.
    Storage:
      type: object
      description: A physical storage to perform read/write interaction with collections.
      properties:
        id:
          description: >-
            The unique identifier of the storage which is used to associate the event handlers with.
          type: string
        type:
          description: The feature type fixed as "Storage".
          type: string
        title:
          description: The storage title.
          type: string
        description:
          description: The storage description in markdown format.
          type: string
        className:
          description: The FQCN (Fully Qualified Class Name) which implements storage interactions.
          type: string
        properties:
          $ref: '#/components/schemas/StorageProperties'
    StorageProperties:
      type: object
      description: >-
        This object represents properties, as supported by default Naksha Storage implementation, but it can be customized as per custom storage implementation.
        Either url or dbConfig parameter must exist.
      properties:
        dbConfig:
          $ref: '#/components/schemas/PsqlConfig'
        url:
          description: >-
            The URL holding connectivity details about backend physical storage instance.
          type: string
          example: 'jdbc:postgresql://localhost:5432/db_name?user=db_user&password=db_passwd&schema=naksha_moderation_dev'
    PsqlConfig:
      type: object
      description: >-
        Configuration object used to provide backend database server specific connection details.
      properties:
        host:
          description: Database hostname
          type: string
        port:
          description: Database port
          type: integer
        db:
          description: Database name (applicable for databases like PostgreSQL)
          type: string
        user:
          description: Database user id
          type: string
        password:
          description: Database user password
          type: string
        schema:
          description: Database schema name
          type: string
        minPoolSize:
          description: The minimum (initial) amount of concurrent connections this connector should use for storage operations.
          type: integer
          default: 2
        maxPoolSize:
          description: The maximum amount of concurrent connections this connector can use for storage operations.
          type: integer
          default: 20
