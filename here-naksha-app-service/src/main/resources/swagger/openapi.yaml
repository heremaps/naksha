openapi: "3.0.2"

servers:
  - url: "http://localhost:8080/"
    description: "Local"
  #- url: "https://naksha.ext.mapcreator.here.com/"
  #  description: "PRD"
  #- url: "https://naksha-e2e.ext.mapcreator.here.com/"
  #  description: "E2E"
  - url: "https://naksha-dev.ext.mapcreator.here.com/"
    description: "DEV"

info:
  title: "Naskha Hub-API"
  description: "Naksha Hub-API is a REST API to provide simple access to geo data."
  version: "2.0.9"

security:
  - AccessToken: [ ]
  - Bearer: [ ]
tags:
  - name: Manage Storages
    description: Storage management endpoints.
  - name: Manage Event Handlers
    description: Event Handler management endpoints.
  - name: Manage Spaces
    description: Space management endpoints.
  - name: Read Features
    description: Read endpoints for features.
  - name: Write Features
    description: Write endpoints for features.
paths:
  '/hub/health-status':
    get:
      tags:
        - Other
      summary: Test if the service is healthy.
      description: >-
        Returns 200 OK, if the service is working correctly. Any other response represents an error.
      operationId: getHealthStatus
      responses:
        '200':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/ErrorResponse500'
  '/hub/storages':
    get:
      tags:
        - Manage Storages
      summary: List storages
      description: >-
        Lists the storages, which the current authenticated user has access to.
      operationId: getStorages
      responses:
        '200':
          $ref: '#/components/responses/StoragesResponse'
        '401':
          $ref: '#/components/responses/ErrorResponse401'
        '403':
          $ref: '#/components/responses/ErrorResponse403'
        '429':
          $ref: '#/components/responses/ErrorResponse429'
        '500':
          $ref: '#/components/responses/ErrorResponse500'
        '502':
          $ref: '#/components/responses/ErrorResponse502'
        '504':
          $ref: '#/components/responses/ErrorResponse504'
        '513':
          $ref: '#/components/responses/ErrorResponse513'
    post:
      tags:
        - Manage Storages
      summary: Create a Storage
      description: Creates a new storage.
      operationId: postStorage
      requestBody:
        $ref: '#/components/requestBodies/StorageRequest'
      responses:
        '200':
          $ref: '#/components/responses/StorageResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse400'
        '401':
          $ref: '#/components/responses/ErrorResponse401'
        '403':
          $ref: '#/components/responses/ErrorResponse403'
        '409':
          $ref: '#/components/responses/ErrorResponse409'
        '429':
          $ref: '#/components/responses/ErrorResponse429'
        '500':
          $ref: '#/components/responses/ErrorResponse500'
        '502':
          $ref: '#/components/responses/ErrorResponse502'
        '504':
          $ref: '#/components/responses/ErrorResponse504'
        '513':
          $ref: '#/components/responses/ErrorResponse513'
  '/hub/storages/{storageId}':
    get:
      tags:
        - Manage Storages
      summary: Get the storage with the specific ID.
      description: >-
        Return the storage detail corresponding to the given ID if the current authenticated user has access to.
      operationId: getStorageById
      parameters:
        - name: storageId
          in: path
          description: ID of storage to fetch
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/StorageResponse'
        '401':
          $ref: '#/components/responses/ErrorResponse401'
        '403':
          $ref: '#/components/responses/ErrorResponse403'
        '404':
          $ref: '#/components/responses/ErrorResponse404'
        '429':
          $ref: '#/components/responses/ErrorResponse429'
        '500':
          $ref: '#/components/responses/ErrorResponse500'
        '502':
          $ref: '#/components/responses/ErrorResponse502'
        '504':
          $ref: '#/components/responses/ErrorResponse504'
        '513':
          $ref: '#/components/responses/ErrorResponse513'
    put:
      tags:
        - Manage Storages
      summary: Updates a Storage with specific id
      description: Updates already existing storage.
      operationId: putStorage
      requestBody:
        $ref: '#/components/requestBodies/StorageRequest'
      parameters:
        - name: storageId
          in: path
          description: ID of storage to update
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/StorageResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse400'
        '401':
          $ref: '#/components/responses/ErrorResponse401'
        '403':
          $ref: '#/components/responses/ErrorResponse403'
        '404':
          $ref: '#/components/responses/ErrorResponse404'
        '409':
          $ref: '#/components/responses/ErrorResponse409'
        '429':
          $ref: '#/components/responses/ErrorResponse429'
        '500':
          $ref: '#/components/responses/ErrorResponse500'
        '502':
          $ref: '#/components/responses/ErrorResponse502'
        '504':
          $ref: '#/components/responses/ErrorResponse504'
        '513':
          $ref: '#/components/responses/ErrorResponse513'
  '/hub/handlers':
    get:
      tags:
        - Manage Event Handlers
      summary: List event handlers
      description: Lists the event handlers, which the current authenticated user has access to.
      operationId: getHandlers
      responses:
        '200':
          $ref: '#/components/responses/HandlersResponse'
        '401':
          $ref: '#/components/responses/ErrorResponse401'
        '403':
          $ref: '#/components/responses/ErrorResponse403'
        '429':
          $ref: '#/components/responses/ErrorResponse429'
        '500':
          $ref: '#/components/responses/ErrorResponse500'
        '502':
          $ref: '#/components/responses/ErrorResponse502'
        '504':
          $ref: '#/components/responses/ErrorResponse504'
        '513':
          $ref: '#/components/responses/ErrorResponse513'
    post:
      tags:
        - Manage Event Handlers
      summary: Create event handler.
      description: Create a new event handler.
      operationId: postHandler
      requestBody:
        $ref: '#/components/requestBodies/HandlerRequest'
      responses:
        '200':
          $ref: '#/components/responses/HandlerResponse'
        '401':
          $ref: '#/components/responses/ErrorResponse401'
        '403':
          $ref: '#/components/responses/ErrorResponse403'
        '409':
          $ref: '#/components/responses/ErrorResponse409'
        '429':
          $ref: '#/components/responses/ErrorResponse429'
        '500':
          $ref: '#/components/responses/ErrorResponse500'
        '502':
          $ref: '#/components/responses/ErrorResponse502'
        '504':
          $ref: '#/components/responses/ErrorResponse504'
        '513':
          $ref: '#/components/responses/ErrorResponse513'
  '/hub/handlers/{handlerId}':
    get:
      tags:
        - Manage Event Handlers
      summary: Get the event handler with the specific ID.
      description: Return the handler detail corresponding to the given ID if the current authenticated user has access to.
      operationId: getHandlerById
      parameters:
        - name: handlerId
          in: path
          description: ID of event handler to fetch
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/HandlerResponse'
        '401':
          $ref: '#/components/responses/ErrorResponse401'
        '403':
          $ref: '#/components/responses/ErrorResponse403'
        '404':
          $ref: '#/components/responses/ErrorResponse404'
        '429':
          $ref: '#/components/responses/ErrorResponse429'
        '500':
          $ref: '#/components/responses/ErrorResponse500'
        '502':
          $ref: '#/components/responses/ErrorResponse502'
        '504':
          $ref: '#/components/responses/ErrorResponse504'
        '513':
          $ref: '#/components/responses/ErrorResponse513'
    put:
      tags:
        - Manage Event Handlers
      summary: Update event handler.
      description: Update existing event handler.
      operationId: updateHandler
      requestBody:
        $ref: '#/components/requestBodies/HandlerRequest'
      parameters:
        - name: handlerId
          in: path
          description: ID of handler to update
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/HandlerResponse'
        '401':
          $ref: '#/components/responses/ErrorResponse401'
        '403':
          $ref: '#/components/responses/ErrorResponse403'
        '404':
          $ref: '#/components/responses/ErrorResponse404'
        '409':
          $ref: '#/components/responses/ErrorResponse409'
        '429':
          $ref: '#/components/responses/ErrorResponse429'
        '500':
          $ref: '#/components/responses/ErrorResponse500'
        '502':
          $ref: '#/components/responses/ErrorResponse502'
        '504':
          $ref: '#/components/responses/ErrorResponse504'
        '513':
          $ref: '#/components/responses/ErrorResponse513'
  '/hub/spaces':
    get:
      tags:
        - Manage Spaces
      summary: List spaces
      description: Lists the spaces, which the current authenticated user has access to.
      operationId: getSpaces
      responses:
        '200':
          $ref: '#/components/responses/SpacesResponse'
        '401':
          $ref: '#/components/responses/ErrorResponse401'
        '403':
          $ref: '#/components/responses/ErrorResponse403'
        '429':
          $ref: '#/components/responses/ErrorResponse429'
        '500':
          $ref: '#/components/responses/ErrorResponse500'
        '502':
          $ref: '#/components/responses/ErrorResponse502'
        '504':
          $ref: '#/components/responses/ErrorResponse504'
        '513':
          $ref: '#/components/responses/ErrorResponse513'
    post:
      tags:
        - Manage Spaces
      summary: Create new Space
      description: Create new Space
      operationId: postSpace
      requestBody:
        $ref: '#/components/requestBodies/SpaceRequest'
      responses:
        '200':
          $ref: '#/components/responses/SpaceResponse'
        '401':
          $ref: '#/components/responses/ErrorResponse401'
        '403':
          $ref: '#/components/responses/ErrorResponse403'
        '409':
          $ref: '#/components/responses/ErrorResponse409'
        '429':
          $ref: '#/components/responses/ErrorResponse429'
        '500':
          $ref: '#/components/responses/ErrorResponse500'
        '502':
          $ref: '#/components/responses/ErrorResponse502'
        '504':
          $ref: '#/components/responses/ErrorResponse504'
        '513':
          $ref: '#/components/responses/ErrorResponse513'
  '/hub/spaces/{spaceId}':
    get:
      tags:
        - Manage Spaces
      summary: Get the space with the specific ID.
      description: Return the space detail corresponding to the given ID if the current authenticated user has access to.
      operationId: getSpaceById
      parameters:
        - name: spaceId
          in: path
          description: ID of space to fetch
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/SpaceResponse'
        '401':
          $ref: '#/components/responses/ErrorResponse401'
        '403':
          $ref: '#/components/responses/ErrorResponse403'
        '404':
          $ref: '#/components/responses/ErrorResponse404'
        '429':
          $ref: '#/components/responses/ErrorResponse429'
        '500':
          $ref: '#/components/responses/ErrorResponse500'
        '502':
          $ref: '#/components/responses/ErrorResponse502'
        '504':
          $ref: '#/components/responses/ErrorResponse504'
        '513':
          $ref: '#/components/responses/ErrorResponse513'
    put:
      tags:
        - Manage Spaces
      summary: Update a Space with given ID
      description: Update already existing Space
      operationId: putSpace
      requestBody:
        $ref: '#/components/requestBodies/SpaceRequest'
      parameters:
        - name: spaceId
          in: path
          description: ID of Space to update
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/SpaceResponse'
        '401':
          $ref: '#/components/responses/ErrorResponse401'
        '403':
          $ref: '#/components/responses/ErrorResponse403'
        '404':
          $ref: '#/components/responses/ErrorResponse404'
        '409':
          $ref: '#/components/responses/ErrorResponse409'
        '429':
          $ref: '#/components/responses/ErrorResponse429'
        '500':
          $ref: '#/components/responses/ErrorResponse500'
        '502':
          $ref: '#/components/responses/ErrorResponse502'
        '504':
          $ref: '#/components/responses/ErrorResponse504'
        '513':
          $ref: '#/components/responses/ErrorResponse513'
  '/hub/spaces/{spaceId}/features':
    get:
      tags:
        - Read Features
      summary: Get features by ID
      description: >
        Returns all of the features found for the provided list of IDs from the storage associated (directly or via event handler) with the given Space. 
        The response is always a FeatureCollection, even if there are no features with the provided IDs.
      operationId: getFeatures
      parameters:
        - $ref: '#/components/parameters/SpaceId'
        - $ref: '#/components/parameters/RequiredIds'
      responses:
        '200':
          $ref: '#/components/responses/FeatureCollectionResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse400'
        '401':
          $ref: '#/components/responses/ErrorResponse401'
        '403':
          $ref: '#/components/responses/ErrorResponse403'
        '404':
          $ref: '#/components/responses/ErrorResponse404'
        '429':
          $ref: '#/components/responses/ErrorResponse429'
        '500':
          $ref: '#/components/responses/ErrorResponse500'
        '502':
          $ref: '#/components/responses/ErrorResponse502'
        '504':
          $ref: '#/components/responses/ErrorResponse504'
        '513':
          $ref: '#/components/responses/ErrorResponse513'
    post:
      tags:
        - Write Features
      summary: Create new features in the space
      description: >
        This method allows to create new features in the storage associated (directly or via event handler) with the space.
        Feature id will be automatically (randomly) created, if not already provided.
        If the feature id is provided and it clashes with the one already present in the space, then the operation will fail.
        It ensures an atomic operation, so either all features will be created or none (in case of failure).
      operationId: postFeatures
      parameters:
        - $ref: '#/components/parameters/SpaceId'
        - $ref: '#/components/parameters/AddTags'
        - $ref: '#/components/parameters/RemoveTags'
        - $ref: '#/components/parameters/PrefixId'
      requestBody:
        $ref: '#/components/requestBodies/FeatureCollectionRequest'
      responses:
        '200':
          $ref: '#/components/responses/FeatureCollectionModificationResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse400'
        '401':
          $ref: '#/components/responses/ErrorResponse401'
        '403':
          $ref: '#/components/responses/ErrorResponse403'
        '404':
          $ref: '#/components/responses/ErrorResponse404'
        '409':
          $ref: '#/components/responses/ErrorResponse409'
        '429':
          $ref: '#/components/responses/ErrorResponse429'
        '500':
          $ref: '#/components/responses/ErrorResponse500'
        '502':
          $ref: '#/components/responses/ErrorResponse502'
        '504':
          $ref: '#/components/responses/ErrorResponse504'
        '513':
          $ref: '#/components/responses/ErrorResponse513'
    put:
      tags:
        - Write Features
      summary: Upsert features in the space
      description: >
        This method allows to upsert features in the storage associated (directly or via event handler) with the space.
        If a feature does not exist yet, it is created, if it is already available, it will be updated.
        For each existing feature, if UUID is not provided OR if provided UUID matches with what is stored in Naksha, the feature will be updated. 
        Recommendation is to always provide correct UUID to avoid inconsistency due to concurrency.     
        In the JSON feature content, UUID is a string located at "properties -> @ns:com:here:xyz -> uuid".
        If the UUID does not match, HTTP code 409 will be returned.
        It ensures an atomic operation, so either all features will be updated or none (in case of failure).
      operationId: putFeatures
      parameters:
        - $ref: '#/components/parameters/SpaceId'
        - $ref: '#/components/parameters/AddTags'
        - $ref: '#/components/parameters/RemoveTags'
      requestBody:
        $ref: '#/components/requestBodies/FeatureCollectionRequest'
      responses:
        '200':
          $ref: '#/components/responses/FeatureCollectionModificationResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse400'
        '401':
          $ref: '#/components/responses/ErrorResponse401'
        '403':
          $ref: '#/components/responses/ErrorResponse403'
        '404':
          $ref: '#/components/responses/ErrorResponse404'
        '409':
          $ref: '#/components/responses/ErrorResponse409'
        '429':
          $ref: '#/components/responses/ErrorResponse429'
        '500':
          $ref: '#/components/responses/ErrorResponse500'
        '502':
          $ref: '#/components/responses/ErrorResponse502'
        '504':
          $ref: '#/components/responses/ErrorResponse504'
        '513':
          $ref: '#/components/responses/ErrorResponse513'
  '/hub/spaces/{spaceId}/features/{featureId}':
    parameters:
      - $ref: '#/components/parameters/SpaceId'
      - $ref: '#/components/parameters/FeatureId'
    get:
      tags:
        - Read Features
      summary: Get a feature by ID
      description: Retrieves the feature with the provided identifier.
      operationId: getFeature
      responses:
        '200':
          $ref: '#/components/responses/FeatureResponse'
        '401':
          $ref: '#/components/responses/ErrorResponse401'
        '403':
          $ref: '#/components/responses/ErrorResponse403'
        '404':
          $ref: '#/components/responses/ErrorResponse404'
        '513':
          $ref: '#/components/responses/ErrorResponse513'
    put:
      tags:
        - Write Features
      summary: Update feature with specified ID in the space
      description: >
        This method allows to update one feature in the storage associated (directly or via event handler) with the space.
        If the feature with that ID does not exist, HTTP code 404 is returned.
        If UUID is specified and matches the current UUID stored in Naksha, the feature will be updated.
        If the UUID does not match, HTTP code 409 will be returned.
      operationId: putFeature
      parameters:
        - $ref: '#/components/parameters/AddTags'
        - $ref: '#/components/parameters/RemoveTags'
      requestBody:
        $ref: '#/components/requestBodies/FeatureRequest'
      responses:
        '200':
          $ref: '#/components/responses/FeatureResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse400'
        '401':
          $ref: '#/components/responses/ErrorResponse401'
        '403':
          $ref: '#/components/responses/ErrorResponse403'
        '404':
          $ref: '#/components/responses/ErrorResponse404'
        '409':
          $ref: '#/components/responses/ErrorResponse409'
        '429':
          $ref: '#/components/responses/ErrorResponse429'
        '500':
          $ref: '#/components/responses/ErrorResponse500'
        '502':
          $ref: '#/components/responses/ErrorResponse502'
        '504':
          $ref: '#/components/responses/ErrorResponse504'
        '513':
          $ref: '#/components/responses/ErrorResponse513'
  '/hub/spaces/{spaceId}/bbox':
    get:
      tags:
        - Read Features
      summary: Get features by bounding box
      description: Return the features which intersect a bounding box stipulated by west, north, east and south parameters.
      operationId: getFeaturesByBBox
      parameters:
        - $ref: '#/components/parameters/SpaceId'
        - $ref: '#/components/parameters/West'
        - $ref: '#/components/parameters/North'
        - $ref: '#/components/parameters/East'
        - $ref: '#/components/parameters/South'
        - $ref: '#/components/parameters/TagList'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          $ref: '#/components/responses/FeatureCollectionResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse400'
        '401':
          $ref: '#/components/responses/ErrorResponse401'
        '403':
          $ref: '#/components/responses/ErrorResponse403'
        '404':
          $ref: '#/components/responses/ErrorResponse404'
        '429':
          $ref: '#/components/responses/ErrorResponse429'
        '500':
          $ref: '#/components/responses/ErrorResponse500'
        '502':
          $ref: '#/components/responses/ErrorResponse502'
        '504':
          $ref: '#/components/responses/ErrorResponse504'
        '513':
          $ref: '#/components/responses/ErrorResponse513'
  '/hub/spaces/{spaceId}/tile/{type}/{tileId}':
    get:
      tags:
        - Read Features
      summary: Get features in tile
      description: |
        List the features selected by tile type and tile id.
        Tile type of "quadkey" is supported.
      operationId: getFeaturesByTile
      parameters:
        - $ref: '#/components/parameters/SpaceId'
        - $ref: '#/components/parameters/TileType'
        - $ref: '#/components/parameters/TileId'
        - $ref: '#/components/parameters/TagList'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          $ref: '#/components/responses/FeatureCollectionResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse400'
        '401':
          $ref: '#/components/responses/ErrorResponse401'
        '403':
          $ref: '#/components/responses/ErrorResponse403'
        '404':
          $ref: '#/components/responses/ErrorResponse404'
        '429':
          $ref: '#/components/responses/ErrorResponse429'
        '500':
          $ref: '#/components/responses/ErrorResponse500'
        '502':
          $ref: '#/components/responses/ErrorResponse502'
        '504':
          $ref: '#/components/responses/ErrorResponse504'
        '513':
          $ref: '#/components/responses/ErrorResponse513'
components:
  securitySchemes:
    AccessToken:
      type: apiKey
      in: query
      name: access_token
    Bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    SpaceId:
      name: spaceId
      in: path
      description: The unique identifier of the space.
      required: true
      schema:
        type: string
    AddTags:
      name: addTags
      in: query
      description: Tags to be added to the features.
      required: false
      style: form
      schema:
        type: array
        items:
          type: string
    East:
      name: east
      in: query
      description: >-
        The longitude in WGS'84 decimal degree (-180 to +180) of the east
        (right) border of the bounding box.
      required: true
      schema:
        type: number
        format: double
        minimum: -180
        maximum: 180
    FeatureId:
      name: featureId
      in: path
      description: The unique identifier of a feature in the space.
      required: true
      schema:
        type: string
    Limit:
      name: limit
      in: query
      description: >-
        The maximum number of features in the response.
        Default is _30000_. Hard limit is _100000_.
      schema:
        type: integer
    North:
      name: north
      in: query
      description: >-
        The latitude in WGS'84 decimal degree (-90 to +90) of the north
        (top) border of the bounding box.
      required: true
      schema:
        type: number
        format: double
        minimum: -90
        maximum: 90
    RemoveTags:
      name: removeTags
      in: query
      description: Tags to be removed from the features.
      required: false
      style: form
      schema:
        type: array
        items:
          type: string
    RequiredIds:
      name: id
      in: query
      description: >-
        A comma separated list of unique feature identifiers. These are the acceptable formats
        for this field:
          * id=value1,value2
          * id=value1&id=value2
      required: true
      schema:
        type: array
        items:
          type: string
    PrefixId:
      name: prefixId
      in: query
      description: If set all feature IDs are prefixed with the provided string.
      required: false
      schema:
        type: string
    South:
      name: south
      in: query
      description: >-
        The latitude in WGS'84 decimal degree (-90 to +90) of the south
        (bottom) border of the bounding box.
      required: true
      schema:
        type: number
        format: double
        minimum: -90
        maximum: 90
    TagList:
      name: tags
      in: query
      description: >-
        A comma separated list of tags or combination of tags concatenated with
        a plus sign (+). A comma separated list of tags means any tag may be
        found. A plus sign concatenated list means every tag is required.


        #### For example:


        - **tags**=first,two
        
            * will result into logical OR condition between the tags i.e. "first" OR "two"

        - **tags**=first+two
        
            * will result into logical AND condition between the tags i.e. "first" AND "two"

        - **tags**=first,two,three+four
        
            * will result into mixed logical conditions, with AND having higher preference i.e. "first" OR "two" OR ("three" AND "four")

        - **tags**=first+two,three,four
        
            * i.e. ("first" AND "two") OR "three" OR "four"

        - **tags**=first    **tags**=two+three
        
            * multiple tags parameters form OR conditions between them i.e. "first" OR ("two" AND "three")
      allowEmptyValue: false
      style: form
      schema:
        type: array
        items:
          type: string
    TileId:
      name: tileId
      in: path
      description: >-
        The tile identifier can be provided as quadkey (e.g. 120203302030322200).
      required: true
      schema:
        type: string
    TileType:
      name: type
      in: path
      description: >-
        The type of tile identifier, e.g. "quadkey" - Virtual Earth.
      required: true
      schema:
        type: string
        enum:
          - quadkey
    West:
      name: west
      in: query
      description: >-
        The longitude in WGS'84 decimal degree (-180 to +180) of the west
        (left) border of the bounding box.
      required: true
      schema:
        type: number
        format: double
        minimum: -180
        maximum: 180
  requestBodies:
    FeatureRequest:
      description: A request detailing one specific feature
      required: true
      content:
        application/geo+json:
          schema:
            $ref: '#/components/schemas/Feature'
          example:
            type: "Feature"
            geometry:
              type: "Point"
              coordinates:
                - 8.68872
                - 50.0561
                - 292.94377758
            properties:
              name: Anfield
              '@ns:com:here:xyz':
                tags:
                  - football
                  - stadium
              amenity: Football Stadium
              capacity: 54074
              description: Home of Liverpool Football Club
    FeatureCollectionRequest:
      description: A FeatureCollection request holding list of Feature objects.
      required: true
      content:
        application/geo+json:
          schema:
            $ref: '#/components/schemas/FeatureCollection'
          example:
            type: "FeatureCollection"
            features:
              - type: "Feature"
                geometry:
                  type: "Point"
                  coordinates:
                    - 8.68872
                    - 50.0561
                    - 292.94377758
                properties:
                  name: Anfield
                  '@ns:com:here:xyz':
                    tags:
                      - football
                      - stadium
                  amenity: Football Stadium
                  capacity: 54074
                  description: Home of Liverpool Football Club
    StorageRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Storage'
          example:
            id: "um-mod-dev"
            type: "Storage"
            title: "UniMap Moderation Dev Storage"
            description: "UniMap Moderation storage for Dev environment, holding collections managed by Naksha service"
            className: "com.here.naksha.lib.psql.PsqlStorage"
            properties:
              master:
                host: localhost
                port: 5432
                db: db_name
                user: db_writer
                password: db_writer_pass
                readOnly: false
              reader:
                - host: localhost
                  port: 5432
                  db: db_name
                  user: db_reader
                  password: db_reader_pass
                  readOnly: true
              appName: app_name
              schema: schema_name
    HandlerRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EventHandler'
          examples:
            response:
              value:
                id: "um-mod-dev"
                type: "EventHandler"
                title: "Storage Handler for UniMap Moderation Dev Storage"
                description: "Default Naksha Storage Handler for operations on UniMap Moderation Dev Storage"
                className: "com.here.naksha.lib.handlers.DefaultStorageHandler"
                properties:
                  storageId: "ID"
    SpaceRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Space'
          examples:
            response:
              value:
                id: "um-mod-topology-dev"
                type: "Space"
                title: "Topology Space for UniMap Moderation Dev Storage"
                description: "Space for managing Topology Feature collection in UniMap Moderation Dev Storage"
                eventHandlerIds:
                  - "um-mod-dev-handler"
                properties:
                  collection:
                    id: "um-mod-dev:topology"
                    type: "NakshaCollection"
  responses:
    EmptyResponse:
      description: >-
        An empty response as a result of a user-request with accepted MIME type application/x-empty.
      content:
        application/x-empty:
          schema:
            type: string
          example: ""
    ErrorResponse400:
      description: Indicates bad request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            type: "ErrorResponse"
            error: "IllegalArgument"
            errorMessage: "Invalid request."
            streamId: "d5b2edaa-2c6b-44e1-b794-feea6fa0e15b"
    ErrorResponse401:
      description: Unauthorized to perform the request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            type: "ErrorResponse"
            error: "Unauthorized"
            errorMessage: "Request not authorized."
            streamId: "d5b2edaa-2c6b-44e1-b794-feea6fa0e15b"
    ErrorResponse403:
      description: Access forbidden for given operation.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            type: "ErrorResponse"
            error: "Forbidden"
            errorMessage: "Operation not authorized."
            streamId: "d5b2edaa-2c6b-44e1-b794-feea6fa0e15b"
    ErrorResponse404:
      description: The requested content does not exist.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            type: "ErrorResponse"
            error: "NotFound"
            errorMessage: "Does not exist."
            streamId: "d5b2edaa-2c6b-44e1-b794-feea6fa0e15b"
    ErrorResponse409:
      description: Indicates request state/version conflict.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            type: "ErrorResponse"
            error: "Conflict"
            errorMessage: "Request conflicts with present state of resource on server side."
            streamId: "d5b2edaa-2c6b-44e1-b794-feea6fa0e15b"
    ErrorResponse429:
      description: Indicates request limit breach.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            type: "ErrorResponse"
            error: "TooManyRequests"
            errorMessage: "Too many requests in progress."
            streamId: "d5b2edaa-2c6b-44e1-b794-feea6fa0e15b"
    ErrorResponse500:
      description: Indicates server side error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            type: "ErrorResponse"
            error: "Exception"
            errorMessage: "Internal server error."
            streamId: "d5b2edaa-2c6b-44e1-b794-feea6fa0e15b"
    ErrorResponse502:
      description: Indicates gateway error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            type: "ErrorResponse"
            error: "BadGateway"
            errorMessage: "Unable to reach to dependent service(s)."
            streamId: "d5b2edaa-2c6b-44e1-b794-feea6fa0e15b"
    ErrorResponse504:
      description: Indicates request timeout.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            type: "ErrorResponse"
            error: "Timeout"
            errorMessage: "Request got timed out while processing."
            streamId: "d5b2edaa-2c6b-44e1-b794-feea6fa0e15b"
    ErrorResponse513:
      description: Request/Response payload too large.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            type: "ErrorResponse"
            error: "PayloadTooLarge"
            errorMessage: "Payload too large."
            streamId: "d5b2edaa-2c6b-44e1-b794-feea6fa0e15b"
    FeatureResponse:
      description: A feature response.
      content:
        application/geo+json:
          schema:
            $ref: '#/components/schemas/Feature'
          example:
            type: Feature
            id: BfiimUxHjj
            geometry:
              type: Point
              coordinates:
                - 8.68872
                - 50.0561
                - 292.94377758
            properties:
              name: Anfield
              '@ns:com:here:xyz':
                tags:
                  - football
                  - stadium
              amenity: Football Stadium
              capacity: 54074
              description: Home of Liverpool Football Club
    FeatureCollectionResponse:
      description: An array of features response.
      content:
        application/geo+json:
          schema:
            $ref: '#/components/schemas/FeatureCollection'
          example:
            type: FeatureCollection
            features:
              - type: Feature
                id: BfiimUxHjj
                geometry:
                  type: Point
                  coordinates:
                    - 8.68872
                    - 50.0561
                    - 292.94377758
                properties:
                  name: Anfield
                  '@ns:com:here:xyz':
                    createdAt: 1517504700726
                    updatedAt: 1517504700726
                    tags:
                      - football
                      - stadium
                  amenity: Football Stadium
                  capacity: 54074
                  description: Home of Liverpool Football Club
    FeatureCollectionModificationResponse:
      description: An array of features and their modifications response.
      content:
        application/geo+json:
          schema:
            $ref: '#/components/schemas/FeatureCollectionModification'
          example:
            type: FeatureCollection
            inserted:
              - BfiimUxHjj
            updated:
              - cuiImUxOjj
            deleted:
              - dyoweUxjde
            features:
              - type: Feature
                id: BfiimUxHjj
                geometry:
                  type: Point
                  coordinates:
                    - 8.68872
                    - 50.0561
                    - 292.94377758
                properties:
                  name: Anfield
                  '@ns:com:here:xyz':
                    createdAt: 1517504700726
                    updatedAt: 1517504700726
                    tags:
                      - football
                      - stadium
                  amenity: Football Stadium
                  capacity: 54074
                  description: Home of Liverpool Football Club
    StorageResponse:
      description: The space.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Storage'
          examples:
            response:
              value:
                id: "um-mod-dev"
                type: "Storage"
                title: "UniMap Moderation Dev Storage"
                description: "UniMap Moderation storage for Dev environment, holding collections managed by Naksha service"
                className: "com.here.naksha.lib.psql.PsqlStorage"
    StoragesResponse:
      description: The list of storages.
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/Storage'
            type: array
          examples:
            response:
              value:
                - id: "um-mod-dev"
                  type: "Storage"
                  title: "UniMap Moderation Dev Storage"
                  description: "UniMap Moderation storage for Dev environment, holding collections managed by Naksha service"
                  className: "com.here.naksha.lib.psql.PsqlStorage"
    HandlerResponse:
      description: The handler details.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EventHandler'
          examples:
            response:
              value:
                id: "um-mod-dev"
                type: "EventHandler"
                title: "Storage Handler for UniMap Moderation Dev Storage"
                description: "Default Naksha Storage Handler for operations on UniMap Moderation Dev Storage"
                className: "com.here.naksha.lib.handlers.DefaultStorageHandler"
                properties:
                  storageId: "ID"
    HandlersResponse:
      description: The list of event handlers.
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/EventHandler'
            type: array
          examples:
            response:
              value:
                - id: "um-mod-dev"
                  type: "EventHandler"
                  title: "Storage Handler for UniMap Moderation Dev Storage"
                  description: "Default Naksha Storage Handler for operations on UniMap Moderation Dev Storage"
                  className: "com.here.naksha.lib.handlers.DefaultStorageHandler"
                  properties:
                    storageId: "ID"
    SpaceResponse:
      description: The space details.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Space'
          examples:
            response:
              value:
                id: "um-mod-topology-dev"
                type: "Space"
                title: "Topology Space for UniMap Moderation Dev Storage"
                description: "Space for managing Topology Feature collection in UniMap Moderation Dev Storage"
                eventHandlerIds:
                  - "um-mod-dev-handler"
                properties:
                  collection:
                    id: "um-mod-dev:topology"
                    type: "NakshaCollection"
    SpacesResponse:
      description: The list of spaces.
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/Space'
            type: array
          examples:
            response:
              value:
                - id: "um-mod-topology-dev"
                  type: "Space"
                  title: "Topology Space for UniMap Moderation Dev Storage"
                  description: "Space for managing Topology Feature collection in UniMap Moderation Dev Storage"
                  eventHandlerIds:
                    - "um-mod-dev-handler"
                  properties:
                    collection:
                      id: "um-mod-dev:topology"
                      type: "NakshaCollection"
  schemas:
    Error:
      type: object
      description: >-
        The response send when the request failed. This response may be send for
        certain HTTP error codes like 403 Forbidden or 502 Bad Gateway and
        should hold more details about the error reason.
      properties:
        streamId:
          description: >-
            A unique identifier of the request. This identifier should be
            provided when reporting errors. Its used to track requests
            through the XYZ platform.
          type: string
        type:
          type: string
          description: The type of the error. Defaults to 'ErrorResponse'.
        error:
          type: string
          description: The error summary.
        errorMessage:
          type: string
          description: >-
            A human readable message in English that should provide a more
            detailed description of the error reason.
    GeoJSON:
      type: object
      description: The base type for all possible GeoJSON objects.
      required:
        - type
      properties:
        type:
          type: string
      discriminator:
        propertyName: type
        mapping:
          Feature: '#/components/schemas/Feature'
          FeatureCollection: '#/components/schemas/FeatureCollection'
          Geometry: '#/components/schemas/Geometry'
      additionalProperties: true
    Geometry:
      allOf:
        - $ref: '#/components/schemas/GeoJSON'
        - type: object
          description: A Geometry object represents points, curves, and surfaces in coordinate space.
          discriminator:
            propertyName: type
            mapping:
              LineString: '#/components/schemas/LineString'
              MultiLineString: '#/components/schemas/MultiLineString'
              MultiPoint: '#/components/schemas/MultiPoint'
              MultiPolygon: '#/components/schemas/MultiPolygon'
              Point: '#/components/schemas/Point'
              Polygon: '#/components/schemas/Polygon'
    Feature:
      allOf:
        - $ref: '#/components/schemas/GeoJSON'
        - type: object
          description: A Feature represents a spatially bounded object.
          properties:
            id:
              description: The unique identifier of the feature.
              type: string
            geometry:
              nullable: true
              anyOf:
                - $ref: '#/components/schemas/LineString'
                - $ref: '#/components/schemas/MultiLineString'
                - $ref: '#/components/schemas/MultiPoint'
                - $ref: '#/components/schemas/MultiPolygon'
                - $ref: '#/components/schemas/Point'
                - $ref: '#/components/schemas/Polygon'
                - $ref: '#/components/schemas/Nullable'
            properties:
              type: object
              description: The properties of the feature.
              properties:
                '@ns:com:here:xyz':
                  $ref: '#/components/schemas/XyzNamespace'
              additionalProperties: true
    FeatureCollection:
      description: A FeatureCollection GeoJSON object.
      allOf:
        - $ref: '#/components/schemas/GeoJSON'
        - type: object
          required:
            - features
          discriminator:
            propertyName: type
            mapping:
              FeatureCollectionModification: '#/components/schemas/FeatureCollectionModification'
          properties:
            features:
              type: array
              description: Features included in the collection.
              items:
                $ref: '#/components/schemas/Feature'
    FeatureCollectionModification:
      allOf:
        - $ref: '#/components/schemas/FeatureCollection'
        - type: object
          properties:
            inserted:
              type: array
              description: List of inserted feature IDs.
              items:
                type: string
            updated:
              type: array
              description: List of updated features IDs.
              items:
                type: string
            deleted:
              type: array
              description: List of deleted features IDs.
              items:
                type: string
    LineString:
      allOf:
        - $ref: '#/components/schemas/Geometry'
        - type: object
          description: A LineString geometry.
          properties:
            coordinates:
              type: array
              items:
                type: array
                items:
                  type: number
                maxItems: 3
                minItems: 2
              minItems: 2
    MultiLineString:
      allOf:
        - $ref: '#/components/schemas/Geometry'
        - type: object
          description: A MultiLineString geometry.
          properties:
            coordinates:
              type: array
              items:
                type: array
                items:
                  type: array
                  items:
                    type: number
                  maxItems: 3
                  minItems: 2
                minItems: 2
    MultiPoint:
      allOf:
        - $ref: '#/components/schemas/Geometry'
        - type: object
          description: A MultiPoint geometry.
          properties:
            coordinates:
              type: array
              items:
                type: array
                items:
                  type: number
                maxItems: 3
                minItems: 2
    MultiPolygon:
      allOf:
        - $ref: '#/components/schemas/Geometry'
        - type: object
          description: A MultiPolygon geometry.
          properties:
            coordinates:
              type: array
              items:
                type: array
                items:
                  type: array
                  items:
                    type: array
                    items:
                      type: number
                    maxItems: 3
                    minItems: 2
                  minItems: 4
    Nullable:
      type: object
      nullable: true
    Point:
      allOf:
        - $ref: '#/components/schemas/Geometry'
        - type: object
          description: A Point geometry.
          properties:
            coordinates:
              type: array
              items:
                type: number
              maxItems: 3
              minItems: 2
    Polygon:
      allOf:
        - $ref: '#/components/schemas/Geometry'
        - type: object
          description: A Polygon geometry.
          properties:
            coordinates:
              type: array
              items:
                type: array
                items:
                  type: array
                  items:
                    type: number
                  maxItems: 3
                  minItems: 2
                minItems: 4
    Storage:
      type: object
      description: A physical storage to perform read/write interaction with collections.
      properties:
        id:
          description: >-
            The unique identifier of the storage which is used to associate the event handlers with.
          type: string
        type:
          description: The feature type fixed as "Storage".
          type: string
        title:
          description: The storage title.
          type: string
        description:
          description: The storage description in markdown format.
          type: string
        className:
          description: The FQCN (Fully Qualified Class Name) which implements storage interactions.
          type: string
        properties:
          $ref: '#/components/schemas/StorageProperties'
    StorageProperties:
      type: object
      description: >-
        This object represents properties, as supported by default Naksha Storage implementation, but it can be customized as per custom storage implementation.
      properties:
        master:
          description: >-
            The configuration of the master database.
          $ref: '#/components/schemas/PsqlInstanceConfig'
        readers:
          description: >-
            The configuration of all read-replicas.
          type: array
          items:
            $ref: '#/components/schemas/PsqlInstanceConfig'
        appName:
          description: >-
            The application name to be used when connecting to the database.
          type: string
    EventHandler:
      type: object
      description: >-
        A configured event handler responsible for defining processing behaviour of incoming event, by internally using other event handler or backend storage implementation as applicable.
      properties:
        id:
          description: The unique identifier of the event handler.
          type: string
        type:
          description: The feature type fixed as "EventHandler".
          type: string
        title:
          description: The handler title.
          type: string
        description:
          description: The handler description in markdown format.
          type: string
        className:
          description: The FQCN (Fully Qualified Class Name) which implements event handler interactions.
          type: string
        active:
          description: Whether the handler is active.
          type: boolean
        extensionId:
          description: If this handler is running on an external Naksha extention, the ID will be specified, null otherwise.
          type: string
          nullable: true
        properties:
          $ref: '#/components/schemas/HandlerProperties'
    HandlerProperties:
      type: object
      description: >-
        This object represents properties, as supported by default Naksha Handler implementation, but it can be customized as per custom handler implementation.
      properties:
        storageId:
          description: The storage this handler is bound to.
          type: string
        collection:
          $ref: '#/components/schemas/NakshaCollection'
    Space:
      type: object
      description: >-
        Component responsible for propagating event through associated handlers that form an event pipeline.
        Can be used for any purpose, mostly used to store and modify features in a storage.
      properties:
        id:
          description: The unique identifier of the space.
          type: string
        type:
          description: The feature type fixed as "Space".
          type: string
        title:
          description: The space title.
          type: string
        description:
          description: The space description in markdown format.
          type: string
        eventHandlerIds:
          description: IDs of Handlers associated with this Space
          type: array
          items:
            type: string
        properties:
          $ref: '#/components/schemas/SpaceProperties'
    SpaceProperties:
      type: object
      description: Properties of Space
      properties:
        collection:
          $ref: '#/components/schemas/NakshaCollection'
    PsqlInstanceConfig:
      type: object
      description: >-
        Configuration object used to provide backend database server specific connection details.
      properties:
        host:
          description: Database hostname
          type: string
        port:
          description: Database port
          type: integer
        db:
          description: Database name (applicable for databases like PostgreSQL)
          type: string
        user:
          description: Database user id
          type: string
        password:
          description: Database user password
          type: string
        readOnly:
          description: If this is a read-replica or a master node used as read-only.
          type: boolean
        schema:
          description: Database schema name
          type: string
    NakshaCollection:
      type: object
      description: A collection is a virtual container for features. All collections optionally have a history and transaction log.
      properties:
        id:
          description: The unique storage ID.
          type: string
        type:
          description: The data type fixed as "NakshaCollection".
          type: string
        maxAge:
          description: The maximum age of the history entries in days. Zero means no history.
          type: number
        history:
          description: Toggle if the history is enabled.
          type: boolean
        deletedAt:
          description: A value greater than zero implies that the collection shall be treated as deleted and represents the UTC Epoch timestamp in
            milliseconds when the deletion has been done.
          type: number

    XyzNamespace:
      type: object
      description: The XYZ namespace object managed by Naksha service
      properties:
        tags:
          description: The tags for this objects.
          items:
            type: string
          type: array
        createdAt:
          description: >-
            The UNIX Epoch time of when this feature has been created (in
            milliseconds since 01.01.1970).
          example: 1234567890123
          format: int64
          readOnly: true
          type: integer
        updatedAt:
          description: >-
            The UNIX Epoch time of when this feature has been last updated (in
            milliseconds since 01.01.1970).
          example: 1234567890123
          format: int64
          readOnly: true
          type: integer
      additionalProperties: true
