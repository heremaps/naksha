/*
 * Copyright (C) 2017-2023 HERE Europe B.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * License-Filename: LICENSE
 */
package com.here.naksha.lib.core.models.features;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.here.naksha.lib.core.NakshaVersion;
import com.here.naksha.lib.core.models.IPlugin;
import com.here.naksha.lib.core.models.PluginCache;
import com.here.naksha.lib.core.models.geojson.implementation.XyzFeature;
import com.here.naksha.lib.core.storage.IStorage;
import org.jetbrains.annotations.ApiStatus.AvailableSince;
import org.jetbrains.annotations.NotNull;

/**
 * The configuration of a storage. Storages are internally used to access and modify features and collection.
 */
@AvailableSince(NakshaVersion.v2_0_0)
@JsonTypeName(value = "Storage")
public class Storage extends XyzFeature implements IPlugin<IStorage> {

  @AvailableSince(NakshaVersion.v2_0_0)
  public static final String NUMBER = "number";

  @AvailableSince(NakshaVersion.v2_0_0)
  public static final String CLASS_NAME = "className";

  @AvailableSince(NakshaVersion.v2_0_6)
  public static final String TITLE = "title";

  @AvailableSince(NakshaVersion.v2_0_6)
  public static final String DESCRIPTION = "description";

  /**
   * Create a new storage.
   *
   * @param id     the unique identifier of the storage (selected by the user).
   * @param number the unique identifier (40-bit unsigned integer) that is auto-generated by the Naksha-Hub.
   * @param cla$$  the class, that implement the {@link IStorage} API.
   */
  @AvailableSince(NakshaVersion.v2_0_0)
  public Storage(@NotNull String id, long number, @NotNull Class<? extends IStorage> cla$$) {
    super(id);
    this.number = number;
    this.className = cla$$.getName();
  }

  /**
   * Create a new empty storage.
   *
   * @param id        the unique identifier of the storage (selected by the user).
   * @param number    the unique identifier (40-bit unsigned integer) that is auto-generated by the Naksha-Hub.
   * @param className the full qualified name of the class to load for this storage. The class need to implement the {@link IStorage} API.
   */
  @AvailableSince(NakshaVersion.v2_0_0)
  @JsonCreator
  public Storage(
      @JsonProperty(ID) @NotNull String id,
      @JsonProperty(NUMBER) long number,
      @JsonProperty(CLASS_NAME) @NotNull String className) {
    super(id);
    this.number = number;
    this.className = className;
  }

  /**
   * The unique storage number, being a 40-bit unsigned integer.
   */
  @AvailableSince(NakshaVersion.v2_0_0)
  @JsonProperty(NUMBER)
  private long number;

  /**
   * The classname to load.
   */
  @AvailableSince(NakshaVersion.v2_0_0)
  @JsonProperty(CLASS_NAME)
  private @NotNull String className;

  /**
   * A human-readable title of the storage.
   */
  @AvailableSince(NakshaVersion.v2_0_6)
  @JsonProperty(TITLE)
  private String title;

  /**
   * A human-readable description of the storage, like its purpose.
   */
  @AvailableSince(NakshaVersion.v2_0_6)
  @JsonProperty(DESCRIPTION)
  private String description;

  /**
   * Initialize the storage engine, invoked from the Naksha-Hub when creating a new instance of the storage. This should ensure that the
   * storage is accessible and in a good state. If the method fails, it is invoked again after a couple of minutes. This method is invoked
   * at least ones for every service start and therefore must be concurrency safe, because it may be called in parallel by multiple
   * Naksha-Hub instances.
   */
  @Override
  public @NotNull IStorage newInstance() {
    // TODO: Keep storage engines in memory and only instantiate the same storage ones!
    return PluginCache.newInstance(className, IStorage.class, this);
  }

  public long getNumber() {
    return number;
  }

  public void setNumber(long number) {
    this.number = number;
  }

  public @NotNull String getClassName() {
    return className;
  }

  public void setClassName(@NotNull String className) {
    this.className = className;
  }

  public String getTitle() {
    return title;
  }

  public void setTitle(final String title) {
    this.title = title;
  }

  public @NotNull Storage withTitle(final String title) {
    setTitle(title);
    return this;
  }

  public String getDescription() {
    return description;
  }

  public void setDescription(final String description) {
    this.description = description;
  }

  public @NotNull Storage withDescription(final String description) {
    setDescription(description);
    return this;
  }
}
