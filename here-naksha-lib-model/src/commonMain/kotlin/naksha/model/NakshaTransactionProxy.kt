package naksha.model

import naksha.base.Int64
import naksha.base.NotNullProperty
import kotlin.js.JsExport

/**
 * A proxy for a transaction feature.
 */
@Suppress("OPT_IN_USAGE")
@JsExport
class NakshaTransactionProxy : NakshaFeatureProxy() {

    companion object {
        private val INT_0 = NotNullProperty<Any, NakshaTransactionProxy, Int>(Int::class, init = { _, _ -> 0 })
        private val COLLECTIONS = NotNullProperty<Any, NakshaTransactionProxy, TransactionCollectionInfoMapProxy>(
            TransactionCollectionInfoMapProxy::class, init = { _, _ -> TransactionCollectionInfoMapProxy() }
        )
        private val INT64_NULL = NotNullProperty<Any, NakshaTransactionProxy, Int64>(Int64::class)
    }

    override fun typeDefaultValue(): String = "naksha.Tx"

    /**
     * Number of features modified in the transaction - total number of features from all touched collections.
     */
    var featuresModified: Int by INT_0

    /**
     * Total number of bytes sent to DB in transaction.
     */
    var featuresBytes: Int by INT_0

    /**
     * The seqNumber of the transaction is a sequential number starting with 1 for the first transaction, it has no holes and is
     * generated by a sequencer. Therefore, transactions that have not been sequenced yet have no seqNumber (_null_) and seqTs (_null_).
     */
    var seqNumber: Int64 by INT64_NULL

    /**
     * The sequencing time in epoch milliseconds or _null_, when no sequencing has yet been done of this transaction.
     */
    var seqTs: Int64 by INT64_NULL

    /**
     * A map of the collections that have been modified as part of this transaction.
     */
    var collections: TransactionCollectionInfoMapProxy by COLLECTIONS

    fun incFeaturesModified(count: Int) {
        featuresModified += count
    }

    fun addCollectionCounts(collectionCounts: TransactionCollectionInfoProxy) {
        if (!collections.contains(collectionCounts.collectionId)) {
            collections[collectionCounts.collectionId!!] = collectionCounts
        } else {
            collections[collectionCounts.collectionId]!!.addValues(collectionCounts)
        }

    }
}