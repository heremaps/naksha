@file:Suppress("OPT_IN_USAGE")

package naksha.model.objects

import naksha.base.Int64
import naksha.base.NotNullProperty
import naksha.model.Version
import naksha.model.request.notification.RowsByTxn
import kotlin.js.JsExport
import kotlin.js.JsName

/**
 * A transaction feature as stored in Naksha storages.
 */
@JsExport
open class Transaction() : NakshaFeature() {

    /**
     * Create a new transaction with the given transaction number.
     * @param txn the transaction number.
     */
    @JsName("of")
    constructor(txn: Int64) : this() {
        this.txn = txn
    }

    companion object NakshaTransaction_C {
        private val INT64_0 = NotNullProperty<Transaction, Int64>(Int64::class) { _,_ -> Int64(0) }
        private val INT_0 = NotNullProperty<Transaction, Int>(Int::class, init = { _, _ -> 0 })
        private val COLLECTIONS = NotNullProperty<Transaction, TxCollectionInfoMap>(TxCollectionInfoMap::class)
        private val INT64_NULL = NotNullProperty<Transaction, Int64>(Int64::class)
    }

    override fun typeDefaultValue(): String = "naksha.Tx"

    /**
     * The transaction number, being as well the version.
     */
    var txn by INT64_0

    private var version: Version? = null

    /**
     * Returns the transaction number as [Version].
     * @return the transaction number as [Version].
     */
    fun version(): Version {
        val txn = this.txn
        var v = version
        if (v == null || v.value != txn) {
            v = Version(txn)
            version = v
        }
        return v
    }

    /**
     * Number of features modified in the transaction - total number of features from all touched collections.
     *
     * Note, the value is updated by the sequencer, and up until this was done, the number is just an estimation.
     */
    var featuresModified: Int by INT_0

    /**
     * Total number of bytes of all rows being in the transaction.
     *
     * Note, the value is updated by the sequencer, and up until this was done, the number is just an estimation.
     */
    var featuresBytes: Int by INT_0

    /**
     * The sequence number of the transaction, what is a sequential number starting with 1 for the first transaction, it has no holes and is generated by a sequencer job. Therefore, transactions that have not been sequenced yet have no [sequence number][seqNumber] (_null_), nor a [sequence timestamp][seqTs] (_null_).
     */
    var seqNumber by INT64_NULL

    /**
     * The sequencing time in epoch milliseconds, or _null_, when no sequencing has yet been done of this transaction.
     */
    var seqTs by INT64_NULL

    /**
     * A map of the collections that have been modified as part of this transaction.
     */
    var collections by COLLECTIONS

    /**
     * Returns the collection-info of the given collection, if it does not yet exist, creates a new empty one.
     * @param collectionId the collection identifier.
     * @return the transaction collection information.
     */
    fun useTxCollectionInfo(collectionId: String): TxCollectionInfo {
        var info = collections[collectionId]
        if (info == null) {
            info = TxCollectionInfo()
            collections[collectionId] = info
        }
        return info
    }

    /**
     * Add the given collection info, if it exists already, otherwise a new entry is created, and the given values are added.
     * @param info the collection info to add.
     */
    fun addTxCollectionInfo(info: TxCollectionInfo) {
        useTxCollectionInfo(info.collectionId).addValues(info)
    }
}