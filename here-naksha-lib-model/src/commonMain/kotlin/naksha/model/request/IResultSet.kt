@file:Suppress("OPT_IN_USAGE", "MemberVisibilityCanBePrivate")

package naksha.model.request

import naksha.model.*
import kotlin.js.JsExport

/**
 * A result-set as generated by the storage, and returned for a [ReadRequest] or [ReadHandle].
 *
 * - For a [ReadHandle] the `offset`, and `limit` encoded in the handle are used.
 * - For a [ReadRequest] the `offset` will always be zero, and the `limit` is dependent on the request parameters.
 *
 * The result-set is not serializable itself, but the tuple-numbers are. The result-set provides access to storage internal caches, and allows a more fine-grained access to results. A result-set may contain more data than needed or requested by the client.
 *
 * By default, [SuccessResponse] will only call [result] and [resultSize], except some special handling by the client is wished.
 */
@JsExport
interface IResultSet {

    /**
     * The storage that produces the result-set.
     */
    val storage: IStorage

    /**
     * The session that was used to produce the result-set.
     *
     * **Warning**: The session may have been closed already!
     */
    val session: ISession

    /**
     * The amount of tuples that were requested by the client via [ReadRequest.limit]. If the client did not request any limit, the limit that the API selected.
     */
    val limit: Int

    /**
     * The maximum amount of tuples that were requested from the storage.
     */
    val hardCap: Int

    /**
     * The offset in the result-set from where to read tuples to make the result for the client.
     *
     * Will be zero, if the result-set was generated for a [ReadFeatures] request, bigger than zero, when the result-set was produced by a [ReadHandle] request.
     */
    val offset: Int

    /**
     * The position in the result-set that should not be included in the result.
     */
    val end: Int

    /**
     * Return the requested result, generated from all [tuples] that are part of the result-set.
     *
     * **Note**: The storage will not fetch the tuples of the result-set. The client need to invoke [ISession.fetchTuples] to be sure that the [tuples][Tuple] are available. This is automatically done, when invoking [SuccessResponse.features].
     *
     * @return a sub-list from [offset] to [end] with all result-tuples, that should be part of the success response.
     */
    val result: ResultTupleList

    /**
     * Returns the size of the result, actually this is simply `result().size`.
     * @return the amount of tuples being part of the result.
     */
    val resultSize: Int

    /**
     * Returns all [tuples][Tuple] being part of the result-set, the tuples may not have been read from the storage yet, and may require to invoke [ISession.fetchTuples]. Only the tuples till [validationEnd] are validated (filtered), all others are in an unknown state, except [isComplete].
     *
     * To generate the features for an [SuccessResponse], simply read all tuples from [offset] till [end] (or use the [result] method), and convert them into features. Beware that only the tuples till [validationEnd] are reliable. All tuples returned starting with the one at [validationEnd] are not yet validated, therefore some filters (like property query, lambdas) have not been applied yet.
     * @return the list of all tuples being part of the result-set.
     */
    val tuples: ResultTupleList

    /**
     * The position in the result-set that was not yet validated.
     *
     * The client should not read beyond this position. It can force a validation by calling [validateTill], if it needs to process more tuples of the result-set than the client requested (for whatever reason).
     */
    val validationEnd: Int

    /**
     * Force the storage to validate more tuples.
     *
     * If the result-set is [incomplete][isIncomplete], the method will throw an [NakshaError.ILLEGAL_STATE] error.
     * @param end the offset of the first tuple **not** to validate, if `tuples().size` is given, the result-set will become [complete][isComplete].
     */
    fun validateTill(end: Int)

    /**
     * If _true_, the result-set is complete, that means all [tuple][Tuple] of the result-set are available, they are ordered correctly, and filtered by given [filter-lambdas][ResultFilter].
     */
    fun isComplete(): Boolean

    /**
     * If _true_, the result-set is complete, but not fully validated, this state is called partially complete. This means that all tuples are ordered, but are only validated until [validationEnd], where [validationEnd] is the index of the first tuple not yet validated.
     *
     * Unless a specific ordering is requested or other circumstances, the storage normally only validates tuples until enough are available to fulfill the [limit]. If this is a continuation read, it needs to filter everything up until [offset], and then enough for the [limit], so in this case [validationEnd] should be greater or equal to [offset] plus [limit].
     */
    fun isPartial(): Boolean

    /**
     * If _true_, the result-set only holds what the client requested, so [tuples] will return exactly what the client requested.
     *
     * Note, if no handle, and no order where requested by the client, and a small limit was given, the storage may decide to only load the needed tuples, therefore the result-set is incomplete. This means that [offset] will be zero, [end] and [validationEnd] will both be equal to `tuples().size`.
     */
    fun isIncomplete(): Boolean

    /**
     * Creates a handle into the result-set, requires that the result-set is either [complete][isComplete] or [partially complete][isPartial], and that is valid until the given [end].
     *
     * - If the given [end] is larger than [IResultSet.validationEnd], the method will throw an [NakshaError.ILLEGAL_STATE] error.
     * - If the result-set is [incomplete][isIncomplete], the method will throw an [NakshaError.ILLEGAL_STATE] error.
     * @param start the offset of the first tuples to include.
     * @param end the offset of the first tuples to exclude.
     * @return returns a handle that allows to read results between the given [offset], and the given [end], or _null_, if there are no more results (the new result-set would be empty).
     */
    fun createHandle(start: Int = this.offset, end: Int = this.end): String?
}