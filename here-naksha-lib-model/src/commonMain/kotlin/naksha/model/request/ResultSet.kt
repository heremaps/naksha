@file:Suppress("OPT_IN_USAGE", "MemberVisibilityCanBePrivate")

package naksha.model.request

import naksha.model.*
import kotlin.js.JsExport

/**
 * A result-set as generated by a storage, and returned for a [ReadRequest].
 *
 * The result-set is not serializable, it provides access to storage internal caches, and allows a more fine-grained access to results. A result-set may contain more data than needed or requested by the client.
 */
@JsExport
interface ResultSet {

    /**
     * The storage that produces the result-set.
     */
    fun storage(): IStorage

    /**
     * The map that was read.
     */
    fun map(): String

    /**
     * The amount of rows that were requested by the client via [ReadRequest.limit].
     */
    fun softCap(): Int

    /**
     * The amount of rows that were requested from the storage.
     */
    fun hardCap(): Int

    /**
     * The amount of rows that are in the result-set.
     */
    fun rowCount(): Int

    /**
     * Force the storage to fully validate the result-set.
     *
     * After this operation is done, the result [is complete][isComplete], but beware, this can become extremely expensive, and is not recommended. It is normally only necessary, if the total amount of rows is needed. This can cause another full read internally, because if the result-set [is incomplete][isIncomplete], a new one need to created.
     */
    fun validateAll()

    /**
     * If _true_, the result-set is complete, that means all [row addresses][RowAddr] of the result-set are available, they are ordered correctly, and filtered by given [filter-lambdas][ResultFilter].
     *
     * This means that [rowCount] returns the total size of the result-set.
     */
    fun isComplete(): Boolean

    /**
     * If _true_, the result-set is partially complete. This means that all rows are valid until [end], where [end] is the index of the first not yet validated row.
     *
     * Unless a specific ordering is requested, the storage normally only filters rows until enough are available to fulfill the [softCap]. If this is a continuation read, it needs to filter everything up until [offset], and then enough for the [softCap], so in this case [end] should be greater or equal to [offset] plus [softCap].
     */
    fun isPartial(): Boolean

    /**
     * If _true_, the result-set only holds what the client requested. The only reliable thing in this case is to read the [rows].
     */
    fun isIncomplete(): Boolean

    /**
     * The offset in the result-set, will be zero, if the result-set was generated for a [ReadFeatures] request, bigger than zero, when the result-set was produced by a [ReadHandle] request.
     *
     * Normally the rows from the offset till `offset() + softCap()` are part of what the client requested. Only these rows are guaranteed to be valid.
     */
    fun offset(): Int

    /**
     * The position in the result-set that was not yet validated.
     *
     * The client should not read beyond this position. It can force a full validation by calling [validateAll], if it really needs to process the full result-set.
     */
    fun end(): Int

    /**
     * Creates a handle into the result-set.
     *
     * **Warning**: If the given `end` is larger than [ResultSet.end], the method will throw an [NakshaError.ILLEGAL_STATE] error.
     * @param start the offset of the first row to include.
     * @param end the offset of the first row to exclude.
     * @return returns a handle that allows to restore this result-set, and that describes exactly a region in the result-set.
     */
     fun handle(start: Int, end: Int): String

    /**
     * Returns all [rows][Row] being part of the result-set.
     *
     * Beware that only the ones till [end] are reliable. All rows returned behind [end] are only guaranteed to
     * @return the list of all rows being part of the result-set.
     */
    fun rows(): List<Row>
}