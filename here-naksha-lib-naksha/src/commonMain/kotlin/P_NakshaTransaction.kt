@file:Suppress("OPT_IN_USAGE")
package com.here.naksha.lib.base

import kotlin.js.JsExport
import kotlin.js.JsName
import kotlin.jvm.JvmStatic

@JsExport
class P_NakshaTransaction : P_NakshaFeature() {

    companion object {
        @JvmStatic
        val FEATURES_MODIFIED = Platform.intern("featuresModified")

        @JvmStatic
        val FEATURES_BYTES = Platform.intern("featuresBytes")

        @JvmStatic
        val COLLECTIONS = Platform.intern("collections")

        @JvmStatic
        val SEQ_NUMBER = Platform.intern("seqNumber")

        @JvmStatic
        val SEQ_TS = Platform.intern("seqTs")
    }

    /**
     * Returns number of features modified in the transaction - total number of features from all touched collections.
     */
    fun getFeaturesModified(): Int = getOrCreate(FEATURES_MODIFIED, Platform.intKlass)

    /**
     * Set number of features modified in the transaction - total number of features from all touched collections.
     */
    fun setFeaturesModified(value: Int) = set(FEATURES_MODIFIED, value)

    /**
     * Total number of bytes sent to DB in transaction.
     */
    fun getFeaturesBytes(): Int = getOrCreate(FEATURES_BYTES, Platform.intKlass)

    /**
     * Set total number of bytes sent to DB in transaction.
     */
    fun setFeaturesBytes(value: Int) = set(FEATURES_BYTES, value)

    /**
     * The seqNumber of the transaction is a sequential number starting with 1 for the first transaction, it has no holes and is generated by a sequencer.
     * Therefore, transactions that have not been sequenced yet have no seqNumber (null) or seqTs (null).
     */
    fun getSeqNumber(): Int64 = getOrCreate(SEQ_NUMBER, Platform.int64Klass)

    fun setSeqNumber(value: Int64) = set(SEQ_NUMBER, value)

    fun getSeqTs(): Int64 = getOrCreate(SEQ_TS, Platform.int64Klass)

    fun setSeqTs(value: Int64) = set(SEQ_TS, value)

    fun incFeaturesModified(count: Int) {
        setFeaturesModified(getFeaturesModified() + count)
    }

    fun getCollections(): P_TransactionCollectionInfo = getOrCreate(COLLECTIONS, P_TransactionCollectionInfo::class)
    fun setCollectionCounters(value: P_TransactionCollectionInfo) = set(COLLECTIONS, value)

    fun addCollectionCounts(collection: String, count: Int) {
        // TODO implement me
        throw NotImplementedError()
    }
}