<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Naksha local load test">
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Test config">
        <collectionProp name="Arguments.arguments">
          <elementProp name="g_naksha_host_url" elementType="Argument">
            <stringProp name="Argument.name">g_naksha_host_url</stringProp>
            <stringProp name="Argument.value">${__P(NAKSHA_HOST_URL,localhost)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="g_web_protocol" elementType="Argument">
            <stringProp name="Argument.name">g_web_protocol</stringProp>
            <stringProp name="Argument.value">${__P(WEB_PROTOCOL,http)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="g_web_port" elementType="Argument">
            <stringProp name="Argument.name">g_web_port</stringProp>
            <stringProp name="Argument.value">${__P(WEB_PORT,8080)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="g_naksha_jwt" elementType="Argument">
            <stringProp name="Argument.name">g_naksha_jwt</stringProp>
            <stringProp name="Argument.value">${__P(NAKSHA_JWT,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="g_resource_files_path" elementType="Argument">
            <stringProp name="Argument.name">g_resource_files_path</stringProp>
            <stringProp name="Argument.value">${__P(RESOURCE_FILES_PATH,/Users/phmai/xyz-hub/test-scripts/api-perf-tests)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="g_psql_host" elementType="Argument">
            <stringProp name="Argument.name">g_psql_host</stringProp>
            <stringProp name="Argument.value">${__P(PSQL_HOST,host.docker.internal)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="g_psql_db" elementType="Argument">
            <stringProp name="Argument.name">g_psql_db</stringProp>
            <stringProp name="Argument.value">${__P(PSQL_DB,postgres)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="g_psql_user" elementType="Argument">
            <stringProp name="Argument.name">g_psql_user</stringProp>
            <stringProp name="Argument.value">${__P(PSQL_USER,postgres)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="g_psql_password" elementType="Argument">
            <stringProp name="Argument.name">g_psql_password</stringProp>
            <stringProp name="Argument.value">${__P(PSQL_PASSWORD,password)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="g_psql_schema" elementType="Argument">
            <stringProp name="Argument.name">g_psql_schema</stringProp>
            <stringProp name="Argument.value">${__P(PSQL_SCHEMA,naksha)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="g_execute_time" elementType="Argument">
            <stringProp name="Argument.name">g_execute_time</stringProp>
            <stringProp name="Argument.value">${__time(d-MMM-yyyy hhmm)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="g_naksha_test_storage" elementType="Argument">
            <stringProp name="Argument.name">g_naksha_test_storage</stringProp>
            <stringProp name="Argument.value">${__P(NAKSHA_TEST_STORAGE,ingest_test_storage)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="g_naksha_test_handler" elementType="Argument">
            <stringProp name="Argument.name">g_naksha_test_handler</stringProp>
            <stringProp name="Argument.value">${__P(NAKSHA_TEST_HANDLER,ingest_test_handler)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="g_naksha_test_space" elementType="Argument">
            <stringProp name="Argument.name">g_naksha_test_space</stringProp>
            <stringProp name="Argument.value">${__P(NAKSHA_TEST_SPACE,ingest_test_space)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="g_naksha_test_activity_log_handler" elementType="Argument">
            <stringProp name="Argument.name">g_naksha_test_activity_log_handler</stringProp>
            <stringProp name="Argument.value">${__P(NAKSHA_TEST_ACTIVITY_HANDLER,activity_history_test_handler)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="g_naksha_test_activity_log_space" elementType="Argument">
            <stringProp name="Argument.name">g_naksha_test_activity_log_space</stringProp>
            <stringProp name="Argument.value">${__P(NAKSHA_TEST_ACTIVITY_SPACE,activity_history_space_load_test)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Add HTTP Authorization header">
        <stringProp name="cacheKey">true</stringProp>
        <stringProp name="filename"></stringProp>
        <stringProp name="parameters"></stringProp>
        <stringProp name="script">// Retrieve the authorization parameter value
String authHeader = ${g_naksha_jwt}

// Check if the authorization parameter is provided
if (authHeader &amp;&amp; !authHeader.isEmpty() &amp;&amp; authHeader!=1) {
    // Add the Authorization header to the HTTP Header Manager
    sampler.getHeaderManager().add(new org.apache.jmeter.protocol.http.control.Header(&quot;Authorization&quot;, authHeader))
}
</stringProp>
        <stringProp name="scriptLanguage">groovy</stringProp>
      </JSR223PreProcessor>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">accept</stringProp>
            <stringProp name="Header.value">application/geo+json</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Content-Type</stringProp>
            <stringProp name="Header.value">application/geo+json</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Tile ids">
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="filename">${g_resource_files_path}/tile_ids.csv</stringProp>
        <boolProp name="ignoreFirstLine">true</boolProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <stringProp name="shareMode">shareMode.group</stringProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="variableNames">v_tile_id</stringProp>
      </CSVDataSet>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setUp Thread Group">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">stoptest</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </SetupThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create storage">
          <stringProp name="HTTPSampler.domain">${g_naksha_host_url}</stringProp>
          <stringProp name="HTTPSampler.port">${g_web_port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${g_web_protocol}</stringProp>
          <stringProp name="HTTPSampler.path">hub/storages</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;${g_naksha_test_storage}&quot;,&#xd;
  &quot;type&quot;: &quot;Storage&quot;,&#xd;
  &quot;title&quot;: &quot;Test PSQL storage&quot;,&#xd;
  &quot;description&quot;: &quot;PSQL storage instance for testing purpose&quot;,&#xd;
  &quot;className&quot;: &quot;com.here.naksha.lib.psql.PsqlStorage&quot;,&#xd;
  &quot;properties&quot;: {&#xd;
    &quot;master&quot;: {&#xd;
      &quot;host&quot;: &quot;${g_psql_host}&quot;,&#xd;
      &quot;db&quot;: &quot;${g_psql_db}&quot;,&#xd;
      &quot;user&quot;: &quot;${g_psql_user}&quot;,&#xd;
      &quot;password&quot;: &quot;${g_psql_password}&quot;,&#xd;
      &quot;readOnly&quot;: false&#xd;
    },&#xd;
    &quot;appName&quot;: &quot;ingest-test&quot;,&#xd;
    &quot;schema&quot;: &quot;${g_psql_schema}&quot;&#xd;
  }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create handler">
          <stringProp name="HTTPSampler.domain">${g_naksha_host_url}</stringProp>
          <stringProp name="HTTPSampler.port">${g_web_port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${g_web_protocol}</stringProp>
          <stringProp name="HTTPSampler.path">hub/handlers</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;${g_naksha_test_handler}&quot;,&#xd;
  &quot;type&quot;: &quot;EventHandler&quot;,&#xd;
  &quot;title&quot;: &quot;Storage Handler Naksha performance test&quot;,&#xd;
  &quot;description&quot;: &quot;Storage Handler Naksha performance test&quot;,&#xd;
  &quot;className&quot;: &quot;com.here.naksha.lib.handlers.DefaultStorageHandler&quot;,&#xd;
  &quot;active&quot;: true,&#xd;
  &quot;extensionId&quot;: null,&#xd;
  &quot;properties&quot;: {&#xd;
    &quot;storageId&quot;: &quot;${g_naksha_test_storage}&quot;,&#xd;
    &quot;autoDeleteCollection&quot;: false&#xd;
  }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create space">
          <stringProp name="HTTPSampler.domain">${g_naksha_host_url}</stringProp>
          <stringProp name="HTTPSampler.port">${g_web_port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${g_web_protocol}</stringProp>
          <stringProp name="HTTPSampler.path">hub/spaces</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;${g_naksha_test_space}&quot;,&#xd;
  &quot;type&quot;: &quot;Space&quot;,&#xd;
  &quot;title&quot;: &quot;Topology Space for UniMap Moderation Dev Storage&quot;,&#xd;
  &quot;description&quot;: &quot;Space for managing Topology Feature collection in UniMap Moderation Dev Storage&quot;,&#xd;
  &quot;eventHandlerIds&quot;: [&#xd;
    &quot;${g_naksha_test_handler}&quot;&#xd;
  ],&#xd;
  &quot;properties&quot;: {&#xd;
    &quot;collection&quot;: {&#xd;
      &quot;id&quot;: &quot;${g_naksha_test_space}&quot;,&#xd;
      &quot;type&quot;: &quot;NakshaCollection&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create activity history handler">
          <stringProp name="HTTPSampler.domain">${g_naksha_host_url}</stringProp>
          <stringProp name="HTTPSampler.port">${g_web_port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${g_web_protocol}</stringProp>
          <stringProp name="HTTPSampler.path">hub/handlers</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;${g_naksha_test_activity_log_handler}&quot;,&#xd;
  &quot;type&quot;: &quot;EventHandler&quot;,&#xd;
  &quot;title&quot;: &quot;Sample Activity History Handler&quot;,&#xd;
  &quot;description&quot;: &quot;Activity History Handler used for tests&quot;,&#xd;
  &quot;className&quot;: &quot;com.here.naksha.handler.activitylog.ActivityLogHandler&quot;,&#xd;
  &quot;active&quot;: true,&#xd;
  &quot;extensionId&quot;: null,&#xd;
  &quot;properties&quot;: {&#xd;
    &quot;spaceId&quot;: &quot;${g_naksha_test_space}&quot;&#xd;
  }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create activity history space">
          <stringProp name="HTTPSampler.domain">${g_naksha_host_url}</stringProp>
          <stringProp name="HTTPSampler.port">${g_web_port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${g_web_protocol}</stringProp>
          <stringProp name="HTTPSampler.path">hub/spaces</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;${g_naksha_test_activity_log_space}&quot;,&#xd;
  &quot;type&quot;: &quot;Space&quot;,&#xd;
  &quot;title&quot;: &quot;Activity space for performance test using jmeter&quot;,&#xd;
  &quot;description&quot;: &quot;Activity space for performance test using jmeter&quot;,&#xd;
  &quot;eventHandlerIds&quot;: [&#xd;
    &quot;${g_naksha_test_activity_log_handler}&quot;&#xd;
  ]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="API performance tests">
        <stringProp name="ThreadGroup.num_threads">${__P(threads,5)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${__P(rampUp,2)}</stringProp>
        <longProp name="ThreadGroup.duration">60</longProp>
        <longProp name="ThreadGroup.delay">0</longProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">${__P(loopCount,5)}</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get features in tile">
          <stringProp name="HTTPSampler.response_timeout">${__P(timeout,)}</stringProp>
          <stringProp name="HTTPSampler.domain">${g_naksha_host_url}</stringProp>
          <stringProp name="HTTPSampler.port">${g_web_port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${g_web_protocol}</stringProp>
          <stringProp name="HTTPSampler.path">hub/spaces/${g_naksha_test_space}/tile/quadkey/${v_tile_id}</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">//read the response, extract one random feature, modify one field of that feature, push modified feature into a variable
// extract also feature id
import groovy.json.JsonSlurper
import groovy.json.JsonOutput

String response = prev.getResponseDataAsString()

def jsonResponse = new JsonSlurper().parseText(response)

// Keep only the first feature for the next test
jsonResponse.features = [jsonResponse.features[0]]

jsonResponse.features[0].properties.&quot;@ns:com:here:xyz&quot;.version=1412
jsonResponse.features[0].properties.&quot;@ns:com:here:xyz&quot;.tags=[&quot;${g_execute_time}&quot;]


String modifiedFeature = JsonOutput.toJson(jsonResponse)
vars.put(&quot;v_modified_tile&quot;, modifiedFeature)
vars.put(&quot;v_modified_feature_id&quot;, jsonResponse.features[0].id)</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Patch features from previous step">
          <stringProp name="HTTPSampler.response_timeout">${__P(timeout,)}</stringProp>
          <stringProp name="HTTPSampler.domain">${g_naksha_host_url}</stringProp>
          <stringProp name="HTTPSampler.port">${g_web_port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${g_web_protocol}</stringProp>
          <stringProp name="HTTPSampler.path">hub/spaces/${g_naksha_test_space}/features</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${v_modified_tile}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Search history of previously modified features">
          <stringProp name="HTTPSampler.response_timeout">${__P(timeout,)}</stringProp>
          <stringProp name="HTTPSampler.domain">${g_naksha_host_url}</stringProp>
          <stringProp name="HTTPSampler.port">${g_web_port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${g_web_protocol}</stringProp>
          <stringProp name="HTTPSampler.path">hub/spaces/${g_naksha_test_activity_log_space}/search</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="properties.@ns:com:here:xyz:log.id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">${v_modified_feature_id}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">properties.@ns:com:here:xyz:log.id</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <PostThreadGroup guiclass="PostThreadGroupGui" testclass="PostThreadGroup" testname="tearDown Thread Group">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </PostThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete activity history space">
          <stringProp name="HTTPSampler.domain">${g_naksha_host_url}</stringProp>
          <stringProp name="HTTPSampler.port">${g_web_port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${g_web_protocol}</stringProp>
          <stringProp name="HTTPSampler.path">hub/spaces/${g_naksha_test_activity_log_space}</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete activity history handler">
          <stringProp name="HTTPSampler.domain">${g_naksha_host_url}</stringProp>
          <stringProp name="HTTPSampler.port">${g_web_port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${g_web_protocol}</stringProp>
          <stringProp name="HTTPSampler.path">hub/handlers/${g_naksha_test_activity_log_handler}</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete space">
          <stringProp name="HTTPSampler.domain">${g_naksha_host_url}</stringProp>
          <stringProp name="HTTPSampler.port">${g_web_port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${g_web_protocol}</stringProp>
          <stringProp name="HTTPSampler.path">hub/spaces/${g_naksha_test_space}</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete handler">
          <stringProp name="HTTPSampler.domain">${g_naksha_host_url}</stringProp>
          <stringProp name="HTTPSampler.port">${g_web_port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${g_web_protocol}</stringProp>
          <stringProp name="HTTPSampler.path">hub/handlers/${g_naksha_test_handler}</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete storage">
          <stringProp name="HTTPSampler.domain">${g_naksha_host_url}</stringProp>
          <stringProp name="HTTPSampler.port">${g_web_port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${g_web_protocol}</stringProp>
          <stringProp name="HTTPSampler.path">hub/storages/${g_naksha_test_storage}</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
