<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.4.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="XYZ API - MapTask Test Suite" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Common Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="TASK_ID_P01_01" elementType="Argument">
            <stringProp name="Argument.name">TASK_ID_P01_01</stringProp>
            <stringProp name="Argument.value">jmeter-test-task-p01-01</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TASK_ID_P02_01" elementType="Argument">
            <stringProp name="Argument.name">TASK_ID_P02_01</stringProp>
            <stringProp name="Argument.value">jmeter-test-task-p02-01</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TASK_ID_P02_02" elementType="Argument">
            <stringProp name="Argument.name">TASK_ID_P02_02</stringProp>
            <stringProp name="Argument.value">jmeter-test-task-p02-02</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TASK_ID_P03_01" elementType="Argument">
            <stringProp name="Argument.name">TASK_ID_P03_01</stringProp>
            <stringProp name="Argument.value">jmeter-test-task-p03-01</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TASK_ID_P04_01" elementType="Argument">
            <stringProp name="Argument.name">TASK_ID_P04_01</stringProp>
            <stringProp name="Argument.value">0000000000-p04-01</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Prefix to allow iterate to work using index</stringProp>
          </elementProp>
          <elementProp name="TASK_ID_P07_01" elementType="Argument">
            <stringProp name="Argument.name">TASK_ID_P07_01</stringProp>
            <stringProp name="Argument.value">jmeter-test-task-p07-01</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TASK_ID_N02_01" elementType="Argument">
            <stringProp name="Argument.name">TASK_ID_N02_01</stringProp>
            <stringProp name="Argument.value">jmeter-test-task-n02-01</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TASK_ID_N03_01" elementType="Argument">
            <stringProp name="Argument.name">TASK_ID_N03_01</stringProp>
            <stringProp name="Argument.value">jmeter-test-task-n03-01</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TASK_ID_N04_01" elementType="Argument">
            <stringProp name="Argument.name">TASK_ID_N04_01</stringProp>
            <stringProp name="Argument.value">jmeter-test-task-n04-01</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TASK_ID_N04_02" elementType="Argument">
            <stringProp name="Argument.name">TASK_ID_N04_02</stringProp>
            <stringProp name="Argument.value">jmeter-test-task-n04-02</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TASK_ID_N05_01" elementType="Argument">
            <stringProp name="Argument.name">TASK_ID_N05_01</stringProp>
            <stringProp name="Argument.value">jmeter-test-task-n05-01</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ALL_TASK_IDS" elementType="Argument">
            <stringProp name="Argument.name">ALL_TASK_IDS</stringProp>
            <stringProp name="Argument.value">${TASK_ID_P01_01},${TASK_ID_P02_01},${TASK_ID_P02_02},${TASK_ID_P03_01},${TASK_ID_P04_01},${TASK_ID_P07_01},${TASK_ID_N02_01},${TASK_ID_N03_01},${TASK_ID_N04_01},${TASK_ID_N04_02},${TASK_ID_N05_01}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="UTM_TAG_ID" elementType="Argument">
            <stringProp name="Argument.name">UTM_TAG_ID</stringProp>
            <stringProp name="Argument.value">utm_maptask_invalid</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="UTM_DUMMY_UPDATE_TAG" elementType="Argument">
            <stringProp name="Argument.name">UTM_DUMMY_UPDATE_TAG</stringProp>
            <stringProp name="Argument.value">utm_dummy_update</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="UTM_DUMMY_UPDATE_TAG_2" elementType="Argument">
            <stringProp name="Argument.name">UTM_DUMMY_UPDATE_TAG_2</stringProp>
            <stringProp name="Argument.value">utm_dummy_update_2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DUMMY_SPACE_ID_1" elementType="Argument">
            <stringProp name="Argument.name">DUMMY_SPACE_ID_1</stringProp>
            <stringProp name="Argument.value">demo:dummy_space_1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DUMMY_SPACE_ID_2" elementType="Argument">
            <stringProp name="Argument.name">DUMMY_SPACE_ID_2</stringProp>
            <stringProp name="Argument.value">demo:dummy_space_2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DUMMY_SPACE_ID_3" elementType="Argument">
            <stringProp name="Argument.name">DUMMY_SPACE_ID_3</stringProp>
            <stringProp name="Argument.value">demo:dummy_space_3</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DUMMY_CONNECTOR" elementType="Argument">
            <stringProp name="Argument.name">DUMMY_CONNECTOR</stringProp>
            <stringProp name="Argument.value">utm_dummy_connector</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DEF_CONNECTOR_ID" elementType="Argument">
            <stringProp name="Argument.name">DEF_CONNECTOR_ID</stringProp>
            <stringProp name="Argument.value">psql</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="LOOP_COUNT" elementType="Argument">
            <stringProp name="Argument.name">LOOP_COUNT</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Env variables - DH E2E" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="XYZ_API_PROTOCOL" elementType="Argument">
            <stringProp name="Argument.name">XYZ_API_PROTOCOL</stringProp>
            <stringProp name="Argument.value">https</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="XYZ_HOST_URL" elementType="Argument">
            <stringProp name="Argument.name">XYZ_HOST_URL</stringProp>
            <stringProp name="Argument.value">xyz.api.here.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="XYZ_URI_PREFIX" elementType="Argument">
            <stringProp name="Argument.name">XYZ_URI_PREFIX</stringProp>
            <stringProp name="Argument.value">/hub</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="XYZ_PORT" elementType="Argument">
            <stringProp name="Argument.name">XYZ_PORT</stringProp>
            <stringProp name="Argument.value">443</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SPACE_ID" elementType="Argument">
            <stringProp name="Argument.name">SPACE_ID</stringProp>
            <stringProp name="Argument.value">39ZVK252</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="WR_API_KEY" elementType="Argument">
            <stringProp name="Argument.name">WR_API_KEY</stringProp>
            <stringProp name="Argument.value">AK-DOoA0pEEWWOoBSKneXjQ</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RD_API_KEY" elementType="Argument">
            <stringProp name="Argument.name">RD_API_KEY</stringProp>
            <stringProp name="Argument.value">ACgMl1D0s1ju1ELhIW1tlnI</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CONN_API_KEY" elementType="Argument">
            <stringProp name="Argument.name">CONN_API_KEY</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.desc">Manage Connector API Key</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SPACE_API_KEY" elementType="Argument">
            <stringProp name="Argument.name">SPACE_API_KEY</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.desc">Manage Space API Key</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Env variables - Local" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="XYZ_API_PROTOCOL" elementType="Argument">
            <stringProp name="Argument.name">XYZ_API_PROTOCOL</stringProp>
            <stringProp name="Argument.value">http</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="XYZ_HOST_URL" elementType="Argument">
            <stringProp name="Argument.name">XYZ_HOST_URL</stringProp>
            <stringProp name="Argument.value">localhost</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="XYZ_URI_PREFIX" elementType="Argument">
            <stringProp name="Argument.name">XYZ_URI_PREFIX</stringProp>
            <stringProp name="Argument.value">/hub</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="XYZ_PORT" elementType="Argument">
            <stringProp name="Argument.name">XYZ_PORT</stringProp>
            <stringProp name="Argument.value">8080</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SPACE_ID" elementType="Argument">
            <stringProp name="Argument.name">SPACE_ID</stringProp>
            <stringProp name="Argument.value">local:space_1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">local:space_1</stringProp>
          </elementProp>
          <elementProp name="WR_API_KEY" elementType="Argument">
            <stringProp name="Argument.name">WR_API_KEY</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RD_API_KEY" elementType="Argument">
            <stringProp name="Argument.name">RD_API_KEY</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CONN_API_KEY" elementType="Argument">
            <stringProp name="Argument.name">CONN_API_KEY</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.desc">Manage Connector API Key</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SPACE_API_KEY" elementType="Argument">
            <stringProp name="Argument.name">SPACE_API_KEY</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.desc">Manage Space API Key</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Env variables - E2E" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="XYZ_API_PROTOCOL" elementType="Argument">
            <stringProp name="Argument.name">XYZ_API_PROTOCOL</stringProp>
            <stringProp name="Argument.value">https</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="XYZ_HOST_URL" elementType="Argument">
            <stringProp name="Argument.name">XYZ_HOST_URL</stringProp>
            <stringProp name="Argument.value">naksha-e2e.ext.mapcreator.here.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">xyz-e2e-kotori.ext.mapcreator.here.com,xyz-e2e-kasa.ext.mapcreator.here.com</stringProp>
          </elementProp>
          <elementProp name="XYZ_URI_PREFIX" elementType="Argument">
            <stringProp name="Argument.name">XYZ_URI_PREFIX</stringProp>
            <stringProp name="Argument.value">/hub</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="XYZ_PORT" elementType="Argument">
            <stringProp name="Argument.name">XYZ_PORT</stringProp>
            <stringProp name="Argument.value">443</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SPACE_ID" elementType="Argument">
            <stringProp name="Argument.name">SPACE_ID</stringProp>
            <stringProp name="Argument.value">utm-e2e_qa:campaign</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">39ZVK252</stringProp>
          </elementProp>
          <elementProp name="WR_API_KEY" elementType="Argument">
            <stringProp name="Argument.name">WR_API_KEY</stringProp>
            <stringProp name="Argument.value">AK-DOoA0pEEWWOoBSKneXjQ</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RD_API_KEY" elementType="Argument">
            <stringProp name="Argument.name">RD_API_KEY</stringProp>
            <stringProp name="Argument.value">ACgMl1D0s1ju1ELhIW1tlnI</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CONN_API_KEY" elementType="Argument">
            <stringProp name="Argument.name">CONN_API_KEY</stringProp>
            <stringProp name="Argument.value">upm.6A2srka5acvQQFrz</stringProp>
            <stringProp name="Argument.desc">Manage Connector API Key</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SPACE_API_KEY" elementType="Argument">
            <stringProp name="Argument.name">SPACE_API_KEY</stringProp>
            <stringProp name="Argument.value">upm.7qymBrp3yfH8GvSo</stringProp>
            <stringProp name="Argument.desc">Manage Space API Key</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Env variables - E2E Demo" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="XYZ_API_PROTOCOL" elementType="Argument">
            <stringProp name="Argument.name">XYZ_API_PROTOCOL</stringProp>
            <stringProp name="Argument.value">https</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="XYZ_HOST_URL" elementType="Argument">
            <stringProp name="Argument.name">XYZ_HOST_URL</stringProp>
            <stringProp name="Argument.value">naksha-e2e.ext.mapcreator.here.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">xyz-e2e-kotori.ext.mapcreator.here.com,xyz-e2e-kasa.ext.mapcreator.here.com</stringProp>
          </elementProp>
          <elementProp name="XYZ_URI_PREFIX" elementType="Argument">
            <stringProp name="Argument.name">XYZ_URI_PREFIX</stringProp>
            <stringProp name="Argument.value">/hub</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="XYZ_PORT" elementType="Argument">
            <stringProp name="Argument.name">XYZ_PORT</stringProp>
            <stringProp name="Argument.value">443</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SPACE_ID" elementType="Argument">
            <stringProp name="Argument.name">SPACE_ID</stringProp>
            <stringProp name="Argument.value">demo:foo</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="WR_API_KEY" elementType="Argument">
            <stringProp name="Argument.name">WR_API_KEY</stringProp>
            <stringProp name="Argument.value">upm.vqubCxoHf28i9YOn</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RD_API_KEY" elementType="Argument">
            <stringProp name="Argument.name">RD_API_KEY</stringProp>
            <stringProp name="Argument.value">upm.i6raAHfn879AHITy</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CONN_API_KEY" elementType="Argument">
            <stringProp name="Argument.name">CONN_API_KEY</stringProp>
            <stringProp name="Argument.value">upm.6A2srka5acvQQFrz</stringProp>
            <stringProp name="Argument.desc">Manage Connector API Key</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SPACE_API_KEY" elementType="Argument">
            <stringProp name="Argument.name">SPACE_API_KEY</stringProp>
            <stringProp name="Argument.value">upm.7qymBrp3yfH8GvSo</stringProp>
            <stringProp name="Argument.desc">Manage Space API Key</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Env variables - E2E Naksha ELB" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="XYZ_API_PROTOCOL" elementType="Argument">
            <stringProp name="Argument.name">XYZ_API_PROTOCOL</stringProp>
            <stringProp name="Argument.value">http</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="XYZ_HOST_URL" elementType="Argument">
            <stringProp name="Argument.name">XYZ_HOST_URL</stringProp>
            <stringProp name="Argument.value">internal-naksha-e2e-us-east-1-pvt-alb-868171580.us-east-1.elb.amazonaws.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">ec2-50-19-84-216.compute-1.amazonaws.com</stringProp>
          </elementProp>
          <elementProp name="XYZ_URI_PREFIX" elementType="Argument">
            <stringProp name="Argument.name">XYZ_URI_PREFIX</stringProp>
            <stringProp name="Argument.value">/hub</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="XYZ_PORT" elementType="Argument">
            <stringProp name="Argument.name">XYZ_PORT</stringProp>
            <stringProp name="Argument.value">80</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">7080</stringProp>
          </elementProp>
          <elementProp name="SPACE_ID" elementType="Argument">
            <stringProp name="Argument.name">SPACE_ID</stringProp>
            <stringProp name="Argument.value">demo:foo</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="WR_API_KEY" elementType="Argument">
            <stringProp name="Argument.name">WR_API_KEY</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RD_API_KEY" elementType="Argument">
            <stringProp name="Argument.name">RD_API_KEY</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CONN_API_KEY" elementType="Argument">
            <stringProp name="Argument.name">CONN_API_KEY</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.desc">Manage Connector API Key</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SPACE_API_KEY" elementType="Argument">
            <stringProp name="Argument.name">SPACE_API_KEY</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.desc">Manage Space API Key</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request - Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">${XYZ_HOST_URL}</stringProp>
        <stringProp name="HTTPSampler.port">${XYZ_PORT}</stringProp>
        <stringProp name="HTTPSampler.protocol">${XYZ_API_PROTOCOL}</stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Headers - Defaults" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Content-Type</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Stream-Id</stringProp>
            <stringProp name="Header.value">${__UUID()}</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setUp" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stoptest</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </SetupThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="setUp - Clean JMeter specific Tasks" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${XYZ_URI_PREFIX}/spaces/${SPACE_ID}/features?access_token=${WR_API_KEY}&amp;id=${__eval(${ALL_TASK_IDS})}</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Pos1 - CRUD Operations" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stoptestnow</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${LOOP_COUNT}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Pos1.1 - Prepare Create Request" enabled="true">
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">
var requestStr = {
  &quot;type&quot;: &quot;Feature&quot;,
  &quot;id&quot;: &quot;${TASK_ID_P01_01}&quot;,
  &quot;geometry&quot;: {
    &quot;type&quot;: &quot;Point&quot;,
    &quot;coordinates&quot;: [
      8.68872,
      50.0561,
      0
    ]
  },
  &quot;properties&quot;: {
    &quot;@ns:com:here:xyz&quot;: {
      &quot;tags&quot;: [&quot;@admin1_deu&quot;, &quot;@admin2_hesse&quot;, &quot;@admin3_neu-isenburg&quot;, &quot;@adminlevels_deu_hesse_neu-isenburg&quot;, &quot;audience_internal&quot;, &quot;category_community_feedback_road&quot;, &quot;category_road_geometry&quot;, &quot;isocc_deu&quot;, &quot;otm_maptask&quot;, &quot;priority_1&quot;, &quot;quadkey_1202033022101121&quot;, &quot;skill_level_journeyman&quot;, &quot;source_mapedit&quot;, &quot;status_open&quot;, &quot;taskproducer_mcpt&quot;, &quot;tasktype_geometry&quot;, &quot;tool_mapcreator_moderation&quot;, &quot;tool_mapcreator_moderation_category_community_feedback_road_isocc_deu_user_type_normal&quot;, &quot;tool_mapcreator_moderation_category_road_geometry_isocc_deu_user_type_normal&quot;, &quot;user_type_normal&quot;, &quot;${UTM_TAG_ID}&quot;,&quot;1234567890123456789012345678901234567890123456789012345678901234567890123456789012345_100_1234567890123456789012345678901234567890123456789012345678901234567890123456789012345_200_1234567890123456789012345678901234567890123456789012345678901234567890123456789012345_300_&quot;]
    },
    &quot;references&quot;: [{
      &quot;ids&quot;: [&quot;ad24b3d2-9f23-4b61-b007-4dc5aeea1bc0&quot;],
      &quot;spaceId&quot;: &quot;QsZZzwyY&quot;,
      &quot;featureType&quot;: &quot;Road&quot;
    }],
    &quot;@ns:com:here:utm&quot;: {
      &quot;tags&quot;: [&quot;tool_mapcreator_moderation_category_community_feedback_road_isocc_deu_user_type_normal&quot;, &quot;tool_mapcreator_moderation_category_road_geometry_isocc_deu_user_type_normal&quot;]
    },
    &quot;isoCountryCode&quot;: &quot;DEU&quot;,
    &quot;description&quot;: [{
      &quot;lang&quot;: &quot;en&quot;,
      &quot;text&quot;: &quot;A  Road has been CREATED, Please check this task for reference!&quot;
    }],
    &quot;priority&quot;: 1,
    &quot;taskType&quot;: &quot;COLLECT&quot;,
    &quot;due&quot;: 0,
    &quot;options&quot;: [{
      &quot;key&quot;: &quot;EDIT&quot;,
      &quot;value&quot;: [{
        &quot;lang&quot;: &quot;en&quot;,
        &quot;text&quot;: &quot;Edit&quot;
      }]
    }, {
      &quot;key&quot;: &quot;ENDORSED&quot;,
      &quot;value&quot;: [{
        &quot;lang&quot;: &quot;en&quot;,
        &quot;text&quot;: &quot;Endorsed&quot;
      }]
    }, {
      &quot;key&quot;: &quot;ROLLBACK_MANUALLY&quot;,
      &quot;value&quot;: [{
        &quot;lang&quot;: &quot;en&quot;,
        &quot;text&quot;: &quot;Rollback - Code Manually&quot;
      }]
    }, {
      &quot;key&quot;: &quot;ROLLBACK_REJECT&quot;,
      &quot;value&quot;: [{
        &quot;lang&quot;: &quot;en&quot;,
        &quot;text&quot;: &quot;Rollback - Reject&quot;
      }]
    }],
    &quot;featureType&quot;: &quot;MapTask&quot;,
    &quot;audiences&quot;: [&quot;INTERNAL&quot;],
    &quot;potentialValue&quot;: 0,
    &quot;headline&quot;: [{
      &quot;lang&quot;: &quot;en&quot;,
      &quot;text&quot;: &quot;A road has been CREATED&quot;
    }],
    &quot;status&quot;: &quot;OPEN&quot;
  }
};


vars.put(&quot;V_Create_Request_Str&quot;, JSON.stringify(requestStr));
</stringProp>
          <stringProp name="scriptLanguage">javascript</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pos1.2 - Create Task" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${V_Create_Request_Str}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${XYZ_URI_PREFIX}/spaces/${SPACE_ID}/features/${TASK_ID_P01_01}?access_token=${WR_API_KEY}</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Validate Res Body" enabled="true">
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">
// Fail the test case (by default), unless it is found to have &quot;passed&quot; later on
prev.setSuccessful(false);

// Remove unwanted fields from RESPONSE object, before actual v/s expected comparison
var actualResString = prev.getResponseDataAsString();
vars.put(&quot;V_Create_Task_Response_Str&quot;, actualResString);	// save it for next test case i.e. &quot;GET Created Task&quot;
var actualResObj = JSON.parse(actualResString);
delete actualResObj.geometry.bbox;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].createdAt;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].muuid;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].puuid;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].space;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].updatedAt;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].uuid;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].version;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].txn;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].rtcts;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].rtuts;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].action;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].appId;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].author;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].deleted;

// Compare actual v/s expected
var modifiedActualResString = JSON.stringify(actualResObj);
var expectedResString = JSON.stringify(${V_Create_Request_Str});

if ( expectedResString == modifiedActualResString ) {
	prev.setSuccessful(true);
}
else {
	prev.setSuccessful(false);
	prev.setResponseMessage(&quot;:: ERROR :: Response body doesn&apos;t match. \n\nExpected : [&quot;+ expectedResString +&quot;]\n\nActual : [&quot;+ modifiedActualResString +&quot;]&quot;);
}


</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pos1.3 - GET Created Task" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${XYZ_URI_PREFIX}/spaces/${SPACE_ID}/features/${TASK_ID_P01_01}?access_token=${WR_API_KEY}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Validate Res Body" enabled="true">
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">
// Fail the test case (by default), unless it is found to have &quot;passed&quot; later on
prev.setSuccessful(false);

// Remove unwanted fields from response, before actual v/s expected comparison
var actualResString = prev.getResponseDataAsString();
vars.put(&quot;V_Created_Task_Str&quot;, actualResString);	// save it for next test case i.e. &quot;Update Task&quot;
var actualResObj = JSON.parse(actualResString);

// Compare actual v/s expected
var modifiedActualResString = JSON.stringify(actualResObj);
var expectedResString = JSON.stringify(${V_Create_Task_Response_Str});

if ( expectedResString == modifiedActualResString ) {
	prev.setSuccessful(true);
}
else {
	prev.setSuccessful(false);
	prev.setResponseMessage(&quot;:: ERROR :: Response body doesn&apos;t match. \n\nExpected : [&quot;+ expectedResString +&quot;]\n\nActual : [&quot;+ modifiedActualResString +&quot;]&quot;);
}


</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Pos1.4 - Prepare Update Request" enabled="true">
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">
var createdTaskStr = vars.get(&quot;V_Created_Task_Str&quot;);
var updateTaskObj = JSON.parse(createdTaskStr);
updateTaskObj.properties[&quot;@ns:com:here:xyz&quot;].tags.push(&quot;${UTM_DUMMY_UPDATE_TAG}&quot;);


vars.put(&quot;V_Update_Request_Str&quot;, JSON.stringify(updateTaskObj));
</stringProp>
          <stringProp name="scriptLanguage">javascript</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pos1.5 - Update Task" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${V_Update_Request_Str}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${XYZ_URI_PREFIX}/spaces/${SPACE_ID}/features/${TASK_ID_P01_01}?access_token=${WR_API_KEY}&amp;rlock=abort</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Validate Res Body" enabled="true">
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">
// Fail the test case (by default), unless it is found to have &quot;passed&quot; later on
prev.setSuccessful(false);

// Remove unwanted fields from RESPONSE object, before actual v/s expected comparison
var actualResString = prev.getResponseDataAsString();
vars.put(&quot;V_Update_Task_Response_Str&quot;, actualResString);	// save it for next test case i.e. &quot;GET Updated Task&quot;
var actualResObj = JSON.parse(actualResString);
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].muuid;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].puuid;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].updatedAt;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].uuid;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].version;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].txn;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].rtuts;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].action;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].appId;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].author;

// Remove unwanted fields from EXPECTED object, before actual v/s expected comparison
var expectedResString = JSON.stringify(${V_Update_Request_Str});
var expectedResObj = JSON.parse(expectedResString);
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].muuid;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].puuid;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].updatedAt;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].uuid;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].version;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].txn;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].rtuts;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].action;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].appId;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].author;

// Compare actual v/s expected
var modifiedActualResString = JSON.stringify(actualResObj);
var modifiedExpResString = JSON.stringify(expectedResObj);

if ( modifiedExpResString == modifiedActualResString ) {
	prev.setSuccessful(true);
}
else {
	prev.setSuccessful(false);
	prev.setResponseMessage(&quot;:: ERROR :: Response body doesn&apos;t match. \n\nExpected : [&quot;+ modifiedExpResString +&quot;]\n\nActual : [&quot;+ modifiedActualResString +&quot;]&quot;);
}


</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pos1.6 - GET Updated Task" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${XYZ_URI_PREFIX}/spaces/${SPACE_ID}/features/${TASK_ID_P01_01}?access_token=${WR_API_KEY}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Validate Res Body" enabled="true">
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">
// Fail the test case (by default), unless it is found to have &quot;passed&quot; later on
prev.setSuccessful(false);

// Remove unwanted fields from RESPONSE object, before actual v/s expected comparison
var actualResString = prev.getResponseDataAsString();
var actualResObj = JSON.parse(actualResString);

// Remove unwanted fields from EXPECTED object, before actual v/s expected comparison
var expectedResString = JSON.stringify(${V_Update_Task_Response_Str});
var expectedResObj = JSON.parse(expectedResString);

// Compare actual v/s expected
var modifiedActualResString = JSON.stringify(actualResObj);
var modifiedExpResString = JSON.stringify(expectedResObj);

if ( modifiedExpResString == modifiedActualResString ) {
	prev.setSuccessful(true);
}
else {
	prev.setSuccessful(false);
	prev.setResponseMessage(&quot;:: ERROR :: Response body doesn&apos;t match. \n\nExpected : [&quot;+ modifiedExpResString +&quot;]\n\nActual : [&quot;+ modifiedActualResString +&quot;]&quot;);
}


</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pos1.7 - Delete Task" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${XYZ_URI_PREFIX}/spaces/${SPACE_ID}/features/${TASK_ID_P01_01}?access_token=${WR_API_KEY}</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49590">204</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Body" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1468">.*</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">5</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pos1.8 - GET Deleted Task" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${XYZ_URI_PREFIX}/spaces/${SPACE_ID}/features/${TASK_ID_P01_01}?access_token=${WR_API_KEY}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51512">404</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Body" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-351582124">&quot;type&quot;:&quot;ErrorResponse&quot;,&quot;error&quot;:&quot;Exception&quot;,&quot;errorMessage&quot;:&quot;The requested resource does not exist.&quot;,&quot;streamId&quot;:&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Pos2 - Bulk Operations" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stopthread</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${LOOP_COUNT}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Local Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="UTM_UNIQ_SEARCH_TAG" elementType="Argument">
              <stringProp name="Argument.name">UTM_UNIQ_SEARCH_TAG</stringProp>
              <stringProp name="Argument.value">utm_dummy_search_p02_${__UUID()}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Pos2.1 - Prepare Bulk Create Requests" enabled="true">
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">
var requestObj = {
  &quot;type&quot;: &quot;Feature&quot;,
  &quot;id&quot;: &quot;${TASK_ID_P02_01}&quot;,
  &quot;geometry&quot;: {
    &quot;type&quot;: &quot;Point&quot;,
    &quot;coordinates&quot;: [
      8.68872,
      50.0561,
      0
    ]
  },
  &quot;properties&quot;: {
    &quot;@ns:com:here:xyz&quot;: {
      &quot;tags&quot;: [&quot;@admin1_deu&quot;, &quot;@admin2_hesse&quot;, &quot;@admin3_neu-isenburg&quot;, &quot;@adminlevels_deu_hesse_neu-isenburg&quot;, &quot;audience_internal&quot;, &quot;category_community_feedback_road&quot;, &quot;category_road_geometry&quot;, &quot;isocc_deu&quot;, &quot;otm_maptask&quot;, &quot;priority_1&quot;, &quot;quadkey_1202033022101121&quot;, &quot;skill_level_journeyman&quot;, &quot;source_mapedit&quot;, &quot;status_open&quot;, &quot;taskproducer_mcpt&quot;, &quot;tasktype_geometry&quot;, &quot;tool_mapcreator_moderation&quot;, &quot;tool_mapcreator_moderation_category_community_feedback_road_isocc_deu_user_type_normal&quot;, &quot;tool_mapcreator_moderation_category_road_geometry_isocc_deu_user_type_normal&quot;, &quot;user_type_normal&quot;, &quot;${UTM_TAG_ID}&quot;]
    },
    &quot;references&quot;: [{
      &quot;ids&quot;: [&quot;ad24b3d2-9f23-4b61-b007-4dc5aeea1bc0&quot;],
      &quot;spaceId&quot;: &quot;QsZZzwyY&quot;,
      &quot;featureType&quot;: &quot;Road&quot;
    }],
    &quot;@ns:com:here:utm&quot;: {
      &quot;tags&quot;: [&quot;tool_mapcreator_moderation_category_community_feedback_road_isocc_deu_user_type_normal&quot;, &quot;tool_mapcreator_moderation_category_road_geometry_isocc_deu_user_type_normal&quot;]
    },
    &quot;isoCountryCode&quot;: &quot;DEU&quot;,
    &quot;description&quot;: [{
      &quot;lang&quot;: &quot;en&quot;,
      &quot;text&quot;: &quot;A  Road has been CREATED, Please check this task for reference!&quot;
    }],
    &quot;priority&quot;: 1,
    &quot;taskType&quot;: &quot;COLLECT&quot;,
    &quot;due&quot;: 0,
    &quot;options&quot;: [{
      &quot;key&quot;: &quot;EDIT&quot;,
      &quot;value&quot;: [{
        &quot;lang&quot;: &quot;en&quot;,
        &quot;text&quot;: &quot;Edit&quot;
      }]
    }, {
      &quot;key&quot;: &quot;ENDORSED&quot;,
      &quot;value&quot;: [{
        &quot;lang&quot;: &quot;en&quot;,
        &quot;text&quot;: &quot;Endorsed&quot;
      }]
    }, {
      &quot;key&quot;: &quot;ROLLBACK_MANUALLY&quot;,
      &quot;value&quot;: [{
        &quot;lang&quot;: &quot;en&quot;,
        &quot;text&quot;: &quot;Rollback - Code Manually&quot;
      }]
    }, {
      &quot;key&quot;: &quot;ROLLBACK_REJECT&quot;,
      &quot;value&quot;: [{
        &quot;lang&quot;: &quot;en&quot;,
        &quot;text&quot;: &quot;Rollback - Reject&quot;
      }]
    }],
    &quot;featureType&quot;: &quot;MapTask&quot;,
    &quot;audiences&quot;: [&quot;INTERNAL&quot;],
    &quot;potentialValue&quot;: 0,
    &quot;headline&quot;: [{
      &quot;lang&quot;: &quot;en&quot;,
      &quot;text&quot;: &quot;A road has been CREATED&quot;
    }],
    &quot;status&quot;: &quot;OPEN&quot;
  }
};


// Create request 01
vars.put(&quot;V_Create_Request_Str_01&quot;, JSON.stringify(requestObj));

// Create request 02
requestObj.id = &quot;${TASK_ID_P02_02}&quot;;
vars.put(&quot;V_Create_Request_Str_02&quot;, JSON.stringify(requestObj));



</stringProp>
          <stringProp name="scriptLanguage">javascript</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pos2.2 - Bulk Insert" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;FeatureCollection&quot;,&#xd;
  &quot;features&quot;: [&#xd;
    ${V_Create_Request_Str_01},&#xd;
    ${V_Create_Request_Str_02}&#xd;
  ]&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${XYZ_URI_PREFIX}/spaces/${SPACE_ID}/features?access_token=${WR_API_KEY}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Validate Res Body" enabled="true">
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">
// Fail the test case (by default), unless it is found to have &quot;passed&quot; later on
prev.setSuccessful(false);

// Set expected response object
var expectedResObj = {
  &quot;type&quot;: &quot;FeatureCollection&quot;,
  &quot;features&quot;: [
    ${V_Create_Request_Str_01},
    ${V_Create_Request_Str_02}
  ],
  &quot;inserted&quot;: [&quot;${TASK_ID_P02_01}&quot;, &quot;${TASK_ID_P02_02}&quot;]
};

// Remove unwanted fields from response, before actual v/s expected comparison
var actualResString = prev.getResponseDataAsString();
var actualResObj = JSON.parse(actualResString);
delete actualResObj.etag;
actualResObj.features.forEach(function(feature) {
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].createdAt;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].muuid;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].puuid;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].space;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].updatedAt;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].uuid;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].version;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].txn;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].rtcts;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].rtuts;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].action;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].appId;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].author;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].deleted;
});

// Compare actual v/s expected
var modifiedActualResString = JSON.stringify(actualResObj);
var expectedResString = JSON.stringify(expectedResObj);

if ( expectedResString == modifiedActualResString ) {
	prev.setSuccessful(true);
}
else {
	prev.setSuccessful(false);
	prev.setResponseMessage(&quot;:: ERROR :: Response body doesn&apos;t match. \n\nExpected : [&quot;+ expectedResString +&quot;]\n\nActual : [&quot;+ modifiedActualResString +&quot;]&quot;);
}


</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pos2.3 - Bulk GET Created Tasks" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${XYZ_URI_PREFIX}/spaces/${SPACE_ID}/features?access_token=${WR_API_KEY}&amp;id=${TASK_ID_P02_01},${TASK_ID_P02_02}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Validate Res Body" enabled="true">
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">
// Fail the test case (by default), unless it is found to have &quot;passed&quot; later on
prev.setSuccessful(false);

// Set expected response object
var expectedResObj = {
  &quot;type&quot;: &quot;FeatureCollection&quot;,
  &quot;features&quot;: [
    ${V_Create_Request_Str_01},
    ${V_Create_Request_Str_02}
  ]
};

// Remove unwanted fields from response, before actual v/s expected comparison
var actualResString = prev.getResponseDataAsString();
var actualResObj = JSON.parse(actualResString);
delete actualResObj.etag;
var count = 1;
actualResObj.features.forEach(function(feature) {
	vars.put(&quot;V_Created_Task_Str_0&quot;+count++, JSON.stringify(feature));		// Save for next Bulk Update operation
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].createdAt;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].muuid;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].puuid;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].space;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].updatedAt;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].uuid;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].version;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].txn;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].rtcts;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].rtuts;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].action;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].appId;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].author;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].deleted;
});

// Compare actual v/s expected
var modifiedActualResString = JSON.stringify(actualResObj);
var expectedResString = JSON.stringify(expectedResObj);

if ( expectedResString == modifiedActualResString ) {
	prev.setSuccessful(true);
}
else {
	prev.setSuccessful(false);
	prev.setResponseMessage(&quot;:: ERROR :: Response body doesn&apos;t match. \n\nExpected : [&quot;+ expectedResString +&quot;]\n\nActual : [&quot;+ modifiedActualResString +&quot;]&quot;);
}


</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Pos2.4 - Prepare Bulk Update Requests" enabled="true">
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">
// Create Update Request 01
var updateTaskObj = JSON.parse(vars.get(&quot;V_Created_Task_Str_01&quot;));
updateTaskObj.properties[&quot;@ns:com:here:xyz&quot;].tags.push(&quot;${UTM_DUMMY_UPDATE_TAG}&quot;);
updateTaskObj.properties[&quot;@ns:com:here:xyz&quot;].tags.push(&quot;${UTM_UNIQ_SEARCH_TAG}&quot;);
vars.put(&quot;V_Update_Request_Str_01&quot;, JSON.stringify(updateTaskObj));

// Create Update Request 02
updateTaskObj = JSON.parse(vars.get(&quot;V_Created_Task_Str_02&quot;));
updateTaskObj.properties[&quot;@ns:com:here:xyz&quot;].tags.push(&quot;${UTM_DUMMY_UPDATE_TAG}&quot;);
updateTaskObj.properties[&quot;@ns:com:here:xyz&quot;].tags.push(&quot;${UTM_UNIQ_SEARCH_TAG}&quot;);
vars.put(&quot;V_Update_Request_Str_02&quot;, JSON.stringify(updateTaskObj));
</stringProp>
          <stringProp name="scriptLanguage">javascript</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pos2.5 - Bulk Update" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;FeatureCollection&quot;,&#xd;
  &quot;features&quot;: [&#xd;
    ${V_Update_Request_Str_01},&#xd;
    ${V_Update_Request_Str_02}&#xd;
  ]&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${XYZ_URI_PREFIX}/spaces/${SPACE_ID}/features?access_token=${WR_API_KEY}&amp;rlock=abort</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Validate Res Body" enabled="true">
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">
// Fail the test case (by default), unless it is found to have &quot;passed&quot; later on
prev.setSuccessful(false);

// Set expected response object
var expectedResObj = {
  &quot;type&quot;: &quot;FeatureCollection&quot;,
  &quot;features&quot;: [
    ${V_Update_Request_Str_01},
    ${V_Update_Request_Str_02}
  ],
  &quot;updated&quot;: [&quot;${TASK_ID_P02_01}&quot;, &quot;${TASK_ID_P02_02}&quot;]
};

// Remove unwanted fields from RESPONSE object, before actual v/s expected comparison
var actualResString = prev.getResponseDataAsString();
var actualResObj = JSON.parse(actualResString);
delete actualResObj.etag;
delete actualResObj.oldFeatures;
actualResObj.features.forEach(function(feature) {
	//delete feature.properties[&quot;@ns:com:here:xyz&quot;].createdAt;	// createdAt MUST match, hence not removing it
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].muuid;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].puuid;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].space;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].updatedAt;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].uuid;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].version;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].txn;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].rtcts;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].rtuts;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].action;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].appId;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].author;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].deleted;
});

// Remove unwanted fields from EXPECTED object, before actual v/s expected comparison
expectedResObj.features.forEach(function(feature) {
	//delete feature.properties[&quot;@ns:com:here:xyz&quot;].createdAt;	// createdAt MUST match, hence not removing it
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].muuid;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].puuid;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].space;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].updatedAt;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].uuid;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].version;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].txn;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].rtcts;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].rtuts;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].action;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].appId;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].author;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].deleted;
});

// Compare actual v/s expected
var modifiedActualResString = JSON.stringify(actualResObj);
var expectedResString = JSON.stringify(expectedResObj);

if ( expectedResString == modifiedActualResString ) {
	prev.setSuccessful(true);
}
else {
	prev.setSuccessful(false);
	prev.setResponseMessage(&quot;:: ERROR :: Response body doesn&apos;t match. \n\nExpected : [&quot;+ expectedResString +&quot;]\n\nActual : [&quot;+ modifiedActualResString +&quot;]&quot;);
}


</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pos2.6 - Bulk Search Updated Tasks" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="access_token" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${WR_API_KEY}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">access_token</stringProp>
              </elementProp>
              <elementProp name="limit" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">10</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">limit</stringProp>
              </elementProp>
              <elementProp name="p.priority" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">p.priority</stringProp>
              </elementProp>
              <elementProp name="tags" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${UTM_UNIQ_SEARCH_TAG}+${UTM_DUMMY_UPDATE_TAG}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">tags</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${XYZ_URI_PREFIX}/spaces/${SPACE_ID}/search</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Validate Res Body" enabled="true">
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">
// Fail the test case (by default), unless it is found to have &quot;passed&quot; later on
prev.setSuccessful(false);

// Set expected response object
// NOTE : SEARCH operation changes the order in which fields are returned, hence we have to put entire expected response object here, instead of reusing original Update requests
var expectedResObj = {
  &quot;type&quot;: &quot;FeatureCollection&quot;,
  &quot;features&quot;: [{
    &quot;type&quot;: &quot;Feature&quot;,
    &quot;properties&quot;: {
      &quot;due&quot;: 0,
      &quot;status&quot;: &quot;OPEN&quot;,
      &quot;options&quot;: [{
        &quot;key&quot;: &quot;EDIT&quot;,
        &quot;value&quot;: [{
          &quot;lang&quot;: &quot;en&quot;,
          &quot;text&quot;: &quot;Edit&quot;
        }]
      }, {
        &quot;key&quot;: &quot;ENDORSED&quot;,
        &quot;value&quot;: [{
          &quot;lang&quot;: &quot;en&quot;,
          &quot;text&quot;: &quot;Endorsed&quot;
        }]
      }, {
        &quot;key&quot;: &quot;ROLLBACK_MANUALLY&quot;,
        &quot;value&quot;: [{
          &quot;lang&quot;: &quot;en&quot;,
          &quot;text&quot;: &quot;Rollback - Code Manually&quot;
        }]
      }, {
        &quot;key&quot;: &quot;ROLLBACK_REJECT&quot;,
        &quot;value&quot;: [{
          &quot;lang&quot;: &quot;en&quot;,
          &quot;text&quot;: &quot;Rollback - Reject&quot;
        }]
      }],
      &quot;headline&quot;: [{
        &quot;lang&quot;: &quot;en&quot;,
        &quot;text&quot;: &quot;A road has been CREATED&quot;
      }],
      &quot;priority&quot;: 1,
      &quot;taskType&quot;: &quot;COLLECT&quot;,
      &quot;audiences&quot;: [&quot;INTERNAL&quot;],
      &quot;references&quot;: [{
        &quot;ids&quot;: [&quot;ad24b3d2-9f23-4b61-b007-4dc5aeea1bc0&quot;],
        &quot;spaceId&quot;: &quot;QsZZzwyY&quot;,
        &quot;featureType&quot;: &quot;Road&quot;
      }],
      &quot;description&quot;: [{
        &quot;lang&quot;: &quot;en&quot;,
        &quot;text&quot;: &quot;A  Road has been CREATED, Please check this task for reference!&quot;
      }],
      &quot;featureType&quot;: &quot;MapTask&quot;,
      &quot;isoCountryCode&quot;: &quot;DEU&quot;,
      &quot;potentialValue&quot;: 0,
      &quot;@ns:com:here:utm&quot;: {
        &quot;tags&quot;: [&quot;tool_mapcreator_moderation_category_community_feedback_road_isocc_deu_user_type_normal&quot;, &quot;tool_mapcreator_moderation_category_road_geometry_isocc_deu_user_type_normal&quot;]
      },
      &quot;@ns:com:here:xyz&quot;: {
        &quot;tags&quot;: [&quot;@admin1_deu&quot;, &quot;@admin2_hesse&quot;, &quot;@admin3_neu-isenburg&quot;, &quot;@adminlevels_deu_hesse_neu-isenburg&quot;, &quot;audience_internal&quot;, &quot;category_community_feedback_road&quot;, &quot;category_road_geometry&quot;, &quot;isocc_deu&quot;, &quot;otm_maptask&quot;, &quot;priority_1&quot;, &quot;quadkey_1202033022101121&quot;, &quot;skill_level_journeyman&quot;, &quot;source_mapedit&quot;, &quot;status_open&quot;, &quot;taskproducer_mcpt&quot;, &quot;tasktype_geometry&quot;, &quot;tool_mapcreator_moderation&quot;, &quot;tool_mapcreator_moderation_category_community_feedback_road_isocc_deu_user_type_normal&quot;, &quot;tool_mapcreator_moderation_category_road_geometry_isocc_deu_user_type_normal&quot;, &quot;user_type_normal&quot;, &quot;utm_maptask_invalid&quot;, &quot;${UTM_DUMMY_UPDATE_TAG}&quot;, &quot;${UTM_UNIQ_SEARCH_TAG}&quot;]
      }
    },
    &quot;geometry&quot;: {
      &quot;type&quot;: &quot;Point&quot;,
      &quot;coordinates&quot;: [8.68872, 50.0561, 0]
    }
  }, {
    &quot;type&quot;: &quot;Feature&quot;,
    &quot;properties&quot;: {
      &quot;due&quot;: 0,
      &quot;status&quot;: &quot;OPEN&quot;,
      &quot;options&quot;: [{
        &quot;key&quot;: &quot;EDIT&quot;,
        &quot;value&quot;: [{
          &quot;lang&quot;: &quot;en&quot;,
          &quot;text&quot;: &quot;Edit&quot;
        }]
      }, {
        &quot;key&quot;: &quot;ENDORSED&quot;,
        &quot;value&quot;: [{
          &quot;lang&quot;: &quot;en&quot;,
          &quot;text&quot;: &quot;Endorsed&quot;
        }]
      }, {
        &quot;key&quot;: &quot;ROLLBACK_MANUALLY&quot;,
        &quot;value&quot;: [{
          &quot;lang&quot;: &quot;en&quot;,
          &quot;text&quot;: &quot;Rollback - Code Manually&quot;
        }]
      }, {
        &quot;key&quot;: &quot;ROLLBACK_REJECT&quot;,
        &quot;value&quot;: [{
          &quot;lang&quot;: &quot;en&quot;,
          &quot;text&quot;: &quot;Rollback - Reject&quot;
        }]
      }],
      &quot;headline&quot;: [{
        &quot;lang&quot;: &quot;en&quot;,
        &quot;text&quot;: &quot;A road has been CREATED&quot;
      }],
      &quot;priority&quot;: 1,
      &quot;taskType&quot;: &quot;COLLECT&quot;,
      &quot;audiences&quot;: [&quot;INTERNAL&quot;],
      &quot;references&quot;: [{
        &quot;ids&quot;: [&quot;ad24b3d2-9f23-4b61-b007-4dc5aeea1bc0&quot;],
        &quot;spaceId&quot;: &quot;QsZZzwyY&quot;,
        &quot;featureType&quot;: &quot;Road&quot;
      }],
      &quot;description&quot;: [{
        &quot;lang&quot;: &quot;en&quot;,
        &quot;text&quot;: &quot;A  Road has been CREATED, Please check this task for reference!&quot;
      }],
      &quot;featureType&quot;: &quot;MapTask&quot;,
      &quot;isoCountryCode&quot;: &quot;DEU&quot;,
      &quot;potentialValue&quot;: 0,
      &quot;@ns:com:here:utm&quot;: {
        &quot;tags&quot;: [&quot;tool_mapcreator_moderation_category_community_feedback_road_isocc_deu_user_type_normal&quot;, &quot;tool_mapcreator_moderation_category_road_geometry_isocc_deu_user_type_normal&quot;]
      },
      &quot;@ns:com:here:xyz&quot;: {
        &quot;tags&quot;: [&quot;@admin1_deu&quot;, &quot;@admin2_hesse&quot;, &quot;@admin3_neu-isenburg&quot;, &quot;@adminlevels_deu_hesse_neu-isenburg&quot;, &quot;audience_internal&quot;, &quot;category_community_feedback_road&quot;, &quot;category_road_geometry&quot;, &quot;isocc_deu&quot;, &quot;otm_maptask&quot;, &quot;priority_1&quot;, &quot;quadkey_1202033022101121&quot;, &quot;skill_level_journeyman&quot;, &quot;source_mapedit&quot;, &quot;status_open&quot;, &quot;taskproducer_mcpt&quot;, &quot;tasktype_geometry&quot;, &quot;tool_mapcreator_moderation&quot;, &quot;tool_mapcreator_moderation_category_community_feedback_road_isocc_deu_user_type_normal&quot;, &quot;tool_mapcreator_moderation_category_road_geometry_isocc_deu_user_type_normal&quot;, &quot;user_type_normal&quot;, &quot;utm_maptask_invalid&quot;, &quot;${UTM_DUMMY_UPDATE_TAG}&quot;, &quot;${UTM_UNIQ_SEARCH_TAG}&quot;]
      }
    },
    &quot;geometry&quot;: {
      &quot;type&quot;: &quot;Point&quot;,
      &quot;coordinates&quot;: [8.68872, 50.0561, 0]
    }
  }]
};

// Remove unwanted fields from RESPONSE object, before actual v/s expected comparison
var actualResString = prev.getResponseDataAsString();
var actualResObj = JSON.parse(actualResString);
delete actualResObj.etag;
actualResObj.features.forEach(function(feature) {
	delete feature.id;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].createdAt;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].muuid;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].puuid;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].space;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].updatedAt;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].uuid;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].version;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].txn;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].rtcts;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].rtuts;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].action;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].appId;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].author;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].deleted;
});

// Remove unwanted fields from EXPECTED object, before actual v/s expected comparison
expectedResObj.features.forEach(function(feature) {
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].createdAt;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].muuid;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].puuid;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].space;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].updatedAt;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].uuid;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].version;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].txn;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].rtcts;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].rtuts;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].action;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].appId;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].author;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].deleted;
});

// Compare actual v/s expected
var modifiedActualResString = JSON.stringify(actualResObj);
var expectedResString = JSON.stringify(expectedResObj);

if ( expectedResString == modifiedActualResString ) {
	prev.setSuccessful(true);
}
else {
	prev.setSuccessful(false);
	prev.setResponseMessage(&quot;:: ERROR :: Response body doesn&apos;t match. \n\nExpected : [&quot;+ expectedResString +&quot;]\n\nActual : [&quot;+ modifiedActualResString +&quot;]&quot;);
}


</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pos2.7 - Search by TileId" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="access_token" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${WR_API_KEY}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">access_token</stringProp>
              </elementProp>
              <elementProp name="tags" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${UTM_UNIQ_SEARCH_TAG}+${UTM_DUMMY_UPDATE_TAG}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">tags</stringProp>
              </elementProp>
              <elementProp name="skipCache" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">skipCache</stringProp>
              </elementProp>
              <elementProp name="limit" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">10</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">limit</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${XYZ_URI_PREFIX}/spaces/${SPACE_ID}/tile/quadkey/1202033022101121</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Validate Res Body" enabled="true">
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">
// Fail the test case (by default), unless it is found to have &quot;passed&quot; later on
prev.setSuccessful(false);

// Set expected response object
// NOTE : SEARCH operation changes the order in which fields are returned, hence we have to put entire expected response object here, instead of reusing original Update requests
var expectedResObj = {
  &quot;type&quot;: &quot;FeatureCollection&quot;,
  &quot;features&quot;: [{
    &quot;type&quot;: &quot;Feature&quot;,
    &quot;properties&quot;: {
      &quot;due&quot;: 0,
      &quot;status&quot;: &quot;OPEN&quot;,
      &quot;options&quot;: [{
        &quot;key&quot;: &quot;EDIT&quot;,
        &quot;value&quot;: [{
          &quot;lang&quot;: &quot;en&quot;,
          &quot;text&quot;: &quot;Edit&quot;
        }]
      }, {
        &quot;key&quot;: &quot;ENDORSED&quot;,
        &quot;value&quot;: [{
          &quot;lang&quot;: &quot;en&quot;,
          &quot;text&quot;: &quot;Endorsed&quot;
        }]
      }, {
        &quot;key&quot;: &quot;ROLLBACK_MANUALLY&quot;,
        &quot;value&quot;: [{
          &quot;lang&quot;: &quot;en&quot;,
          &quot;text&quot;: &quot;Rollback - Code Manually&quot;
        }]
      }, {
        &quot;key&quot;: &quot;ROLLBACK_REJECT&quot;,
        &quot;value&quot;: [{
          &quot;lang&quot;: &quot;en&quot;,
          &quot;text&quot;: &quot;Rollback - Reject&quot;
        }]
      }],
      &quot;headline&quot;: [{
        &quot;lang&quot;: &quot;en&quot;,
        &quot;text&quot;: &quot;A road has been CREATED&quot;
      }],
      &quot;priority&quot;: 1,
      &quot;taskType&quot;: &quot;COLLECT&quot;,
      &quot;audiences&quot;: [&quot;INTERNAL&quot;],
      &quot;references&quot;: [{
        &quot;ids&quot;: [&quot;ad24b3d2-9f23-4b61-b007-4dc5aeea1bc0&quot;],
        &quot;spaceId&quot;: &quot;QsZZzwyY&quot;,
        &quot;featureType&quot;: &quot;Road&quot;
      }],
      &quot;description&quot;: [{
        &quot;lang&quot;: &quot;en&quot;,
        &quot;text&quot;: &quot;A  Road has been CREATED, Please check this task for reference!&quot;
      }],
      &quot;featureType&quot;: &quot;MapTask&quot;,
      &quot;isoCountryCode&quot;: &quot;DEU&quot;,
      &quot;potentialValue&quot;: 0,
      &quot;@ns:com:here:utm&quot;: {
        &quot;tags&quot;: [&quot;tool_mapcreator_moderation_category_community_feedback_road_isocc_deu_user_type_normal&quot;, &quot;tool_mapcreator_moderation_category_road_geometry_isocc_deu_user_type_normal&quot;]
      },
      &quot;@ns:com:here:xyz&quot;: {
        &quot;tags&quot;: [&quot;@admin1_deu&quot;, &quot;@admin2_hesse&quot;, &quot;@admin3_neu-isenburg&quot;, &quot;@adminlevels_deu_hesse_neu-isenburg&quot;, &quot;audience_internal&quot;, &quot;category_community_feedback_road&quot;, &quot;category_road_geometry&quot;, &quot;isocc_deu&quot;, &quot;otm_maptask&quot;, &quot;priority_1&quot;, &quot;quadkey_1202033022101121&quot;, &quot;skill_level_journeyman&quot;, &quot;source_mapedit&quot;, &quot;status_open&quot;, &quot;taskproducer_mcpt&quot;, &quot;tasktype_geometry&quot;, &quot;tool_mapcreator_moderation&quot;, &quot;tool_mapcreator_moderation_category_community_feedback_road_isocc_deu_user_type_normal&quot;, &quot;tool_mapcreator_moderation_category_road_geometry_isocc_deu_user_type_normal&quot;, &quot;user_type_normal&quot;, &quot;utm_maptask_invalid&quot;, &quot;${UTM_DUMMY_UPDATE_TAG}&quot;, &quot;${UTM_UNIQ_SEARCH_TAG}&quot;]
      }
    },
    &quot;geometry&quot;: {
      &quot;type&quot;: &quot;Point&quot;,
      &quot;coordinates&quot;: [8.68872, 50.0561, 0]
    }
  }, {
    &quot;type&quot;: &quot;Feature&quot;,
    &quot;properties&quot;: {
      &quot;due&quot;: 0,
      &quot;status&quot;: &quot;OPEN&quot;,
      &quot;options&quot;: [{
        &quot;key&quot;: &quot;EDIT&quot;,
        &quot;value&quot;: [{
          &quot;lang&quot;: &quot;en&quot;,
          &quot;text&quot;: &quot;Edit&quot;
        }]
      }, {
        &quot;key&quot;: &quot;ENDORSED&quot;,
        &quot;value&quot;: [{
          &quot;lang&quot;: &quot;en&quot;,
          &quot;text&quot;: &quot;Endorsed&quot;
        }]
      }, {
        &quot;key&quot;: &quot;ROLLBACK_MANUALLY&quot;,
        &quot;value&quot;: [{
          &quot;lang&quot;: &quot;en&quot;,
          &quot;text&quot;: &quot;Rollback - Code Manually&quot;
        }]
      }, {
        &quot;key&quot;: &quot;ROLLBACK_REJECT&quot;,
        &quot;value&quot;: [{
          &quot;lang&quot;: &quot;en&quot;,
          &quot;text&quot;: &quot;Rollback - Reject&quot;
        }]
      }],
      &quot;headline&quot;: [{
        &quot;lang&quot;: &quot;en&quot;,
        &quot;text&quot;: &quot;A road has been CREATED&quot;
      }],
      &quot;priority&quot;: 1,
      &quot;taskType&quot;: &quot;COLLECT&quot;,
      &quot;audiences&quot;: [&quot;INTERNAL&quot;],
      &quot;references&quot;: [{
        &quot;ids&quot;: [&quot;ad24b3d2-9f23-4b61-b007-4dc5aeea1bc0&quot;],
        &quot;spaceId&quot;: &quot;QsZZzwyY&quot;,
        &quot;featureType&quot;: &quot;Road&quot;
      }],
      &quot;description&quot;: [{
        &quot;lang&quot;: &quot;en&quot;,
        &quot;text&quot;: &quot;A  Road has been CREATED, Please check this task for reference!&quot;
      }],
      &quot;featureType&quot;: &quot;MapTask&quot;,
      &quot;isoCountryCode&quot;: &quot;DEU&quot;,
      &quot;potentialValue&quot;: 0,
      &quot;@ns:com:here:utm&quot;: {
        &quot;tags&quot;: [&quot;tool_mapcreator_moderation_category_community_feedback_road_isocc_deu_user_type_normal&quot;, &quot;tool_mapcreator_moderation_category_road_geometry_isocc_deu_user_type_normal&quot;]
      },
      &quot;@ns:com:here:xyz&quot;: {
        &quot;tags&quot;: [&quot;@admin1_deu&quot;, &quot;@admin2_hesse&quot;, &quot;@admin3_neu-isenburg&quot;, &quot;@adminlevels_deu_hesse_neu-isenburg&quot;, &quot;audience_internal&quot;, &quot;category_community_feedback_road&quot;, &quot;category_road_geometry&quot;, &quot;isocc_deu&quot;, &quot;otm_maptask&quot;, &quot;priority_1&quot;, &quot;quadkey_1202033022101121&quot;, &quot;skill_level_journeyman&quot;, &quot;source_mapedit&quot;, &quot;status_open&quot;, &quot;taskproducer_mcpt&quot;, &quot;tasktype_geometry&quot;, &quot;tool_mapcreator_moderation&quot;, &quot;tool_mapcreator_moderation_category_community_feedback_road_isocc_deu_user_type_normal&quot;, &quot;tool_mapcreator_moderation_category_road_geometry_isocc_deu_user_type_normal&quot;, &quot;user_type_normal&quot;, &quot;utm_maptask_invalid&quot;, &quot;${UTM_DUMMY_UPDATE_TAG}&quot;, &quot;${UTM_UNIQ_SEARCH_TAG}&quot;]
      }
    },
    &quot;geometry&quot;: {
      &quot;type&quot;: &quot;Point&quot;,
      &quot;coordinates&quot;: [8.68872, 50.0561, 0]
    }
  }]
};

// Remove unwanted fields from RESPONSE object, before actual v/s expected comparison
var actualResString = prev.getResponseDataAsString();
var actualResObj = JSON.parse(actualResString);
delete actualResObj.etag;
actualResObj.features.forEach(function(feature) {
	delete feature.id;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].createdAt;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].muuid;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].puuid;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].space;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].updatedAt;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].uuid;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].version;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].txn;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].rtcts;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].rtuts;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].action;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].appId;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].author;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].deleted;
});

// Remove unwanted fields from EXPECTED object, before actual v/s expected comparison
expectedResObj.features.forEach(function(feature) {
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].createdAt;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].muuid;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].puuid;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].space;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].updatedAt;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].uuid;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].version;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].txn;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].rtcts;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].rtuts;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].action;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].appId;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].author;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].deleted;
});

// Compare actual v/s expected
var modifiedActualResString = JSON.stringify(actualResObj);
var expectedResString = JSON.stringify(expectedResObj);

if ( expectedResString == modifiedActualResString ) {
	prev.setSuccessful(true);
}
else {
	prev.setSuccessful(false);
	prev.setResponseMessage(&quot;:: ERROR :: Response body doesn&apos;t match. \n\nExpected : [&quot;+ expectedResString +&quot;]\n\nActual : [&quot;+ modifiedActualResString +&quot;]&quot;);
}


</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pos2.8 - Bulk Delete" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="access_token" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${WR_API_KEY}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">access_token</stringProp>
              </elementProp>
              <elementProp name="id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${TASK_ID_P02_01}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">id</stringProp>
              </elementProp>
              <elementProp name="id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${TASK_ID_P02_02}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">id</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${XYZ_URI_PREFIX}/spaces/${SPACE_ID}/features</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49590">204</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Body" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1468">.*</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">5</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pos2.9 - Bulk GET Deleted Tasks" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="access_token" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${WR_API_KEY}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">access_token</stringProp>
              </elementProp>
              <elementProp name="id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${TASK_ID_P02_01}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">id</stringProp>
              </elementProp>
              <elementProp name="id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${TASK_ID_P02_02}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">id</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${XYZ_URI_PREFIX}/spaces/${SPACE_ID}/features</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Body" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="299068150">&quot;features&quot;:\[]}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Pos3 - Tag Operations" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stopthread</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${LOOP_COUNT}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Pos3.1 - Prepare Create Request" enabled="true">
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">
var requestObj = {
  &quot;type&quot;: &quot;Feature&quot;,
  &quot;id&quot;: &quot;${TASK_ID_P03_01}&quot;,
  &quot;geometry&quot;: {
    &quot;type&quot;: &quot;Point&quot;,
    &quot;coordinates&quot;: [
      8.68872,
      50.0561,
      0
    ]
  },
  &quot;properties&quot;: {
    &quot;@ns:com:here:xyz&quot;: {
      &quot;tags&quot;: [&quot;@admin1_deu&quot;, &quot;@admin2_hesse&quot;, &quot;@admin3_neu-isenburg&quot;, &quot;@adminlevels_deu_hesse_neu-isenburg&quot;, &quot;audience_internal&quot;, &quot;category_community_feedback_road&quot;, &quot;category_road_geometry&quot;, &quot;isocc_deu&quot;, &quot;otm_maptask&quot;, &quot;priority_1&quot;, &quot;quadkey_1202033022101121&quot;, &quot;skill_level_journeyman&quot;, &quot;source_mapedit&quot;, &quot;status_open&quot;, &quot;taskproducer_mcpt&quot;, &quot;tasktype_geometry&quot;, &quot;tool_mapcreator_moderation&quot;, &quot;tool_mapcreator_moderation_category_community_feedback_road_isocc_deu_user_type_normal&quot;, &quot;tool_mapcreator_moderation_category_road_geometry_isocc_deu_user_type_normal&quot;, &quot;user_type_normal&quot;, &quot;${UTM_TAG_ID}&quot;]
    },
    &quot;references&quot;: [{
      &quot;ids&quot;: [&quot;ad24b3d2-9f23-4b61-b007-4dc5aeea1bc0&quot;],
      &quot;spaceId&quot;: &quot;QsZZzwyY&quot;,
      &quot;featureType&quot;: &quot;Road&quot;
    }],
    &quot;@ns:com:here:utm&quot;: {
      &quot;tags&quot;: [&quot;tool_mapcreator_moderation_category_community_feedback_road_isocc_deu_user_type_normal&quot;, &quot;tool_mapcreator_moderation_category_road_geometry_isocc_deu_user_type_normal&quot;]
    },
    &quot;isoCountryCode&quot;: &quot;DEU&quot;,
    &quot;description&quot;: [{
      &quot;lang&quot;: &quot;en&quot;,
      &quot;text&quot;: &quot;A  Road has been CREATED, Please check this task for reference!&quot;
    }],
    &quot;priority&quot;: 1,
    &quot;taskType&quot;: &quot;COLLECT&quot;,
    &quot;due&quot;: 0,
    &quot;options&quot;: [{
      &quot;key&quot;: &quot;EDIT&quot;,
      &quot;value&quot;: [{
        &quot;lang&quot;: &quot;en&quot;,
        &quot;text&quot;: &quot;Edit&quot;
      }]
    }, {
      &quot;key&quot;: &quot;ENDORSED&quot;,
      &quot;value&quot;: [{
        &quot;lang&quot;: &quot;en&quot;,
        &quot;text&quot;: &quot;Endorsed&quot;
      }]
    }, {
      &quot;key&quot;: &quot;ROLLBACK_MANUALLY&quot;,
      &quot;value&quot;: [{
        &quot;lang&quot;: &quot;en&quot;,
        &quot;text&quot;: &quot;Rollback - Code Manually&quot;
      }]
    }, {
      &quot;key&quot;: &quot;ROLLBACK_REJECT&quot;,
      &quot;value&quot;: [{
        &quot;lang&quot;: &quot;en&quot;,
        &quot;text&quot;: &quot;Rollback - Reject&quot;
      }]
    }],
    &quot;featureType&quot;: &quot;MapTask&quot;,
    &quot;audiences&quot;: [&quot;INTERNAL&quot;],
    &quot;potentialValue&quot;: 0,
    &quot;headline&quot;: [{
      &quot;lang&quot;: &quot;en&quot;,
      &quot;text&quot;: &quot;A road has been CREATED&quot;
    }],
    &quot;status&quot;: &quot;OPEN&quot;
  }
};

// Save task before adding new tag
vars.put(&quot;V_Orig_Task_Str&quot;, JSON.stringify(requestObj));

requestObj.properties[&quot;@ns:com:here:xyz&quot;].tags.push(&quot;${UTM_DUMMY_UPDATE_TAG}&quot;);
vars.put(&quot;V_Create_Request_Str&quot;, JSON.stringify(requestObj));
</stringProp>
          <stringProp name="scriptLanguage">javascript</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pos3.2 - Create Task" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${V_Create_Request_Str}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${XYZ_URI_PREFIX}/spaces/${SPACE_ID}/features/${TASK_ID_P03_01}?access_token=${WR_API_KEY}</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Validate Res Body" enabled="true">
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">
// Fail the test case (by default), unless it is found to have &quot;passed&quot; later on
prev.setSuccessful(false);

// Remove unwanted fields from RESPONSE object, before actual v/s expected comparison
var actualResString = prev.getResponseDataAsString();
var actualResObj = JSON.parse(actualResString);
delete actualResObj.geometry.bbox;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].createdAt;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].muuid;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].puuid;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].space;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].updatedAt;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].uuid;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].version;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].txn;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].rtcts;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].rtuts;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].action;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].appId;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].author;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].deleted;

// Compare actual v/s expected
var modifiedActualResString = JSON.stringify(actualResObj);
var expectedResString = JSON.stringify(${V_Create_Request_Str});

if ( expectedResString == modifiedActualResString ) {
	prev.setSuccessful(true);
}
else {
	prev.setSuccessful(false);
	prev.setResponseMessage(&quot;:: ERROR :: Response body doesn&apos;t match. \n\nExpected : [&quot;+ expectedResString +&quot;]\n\nActual : [&quot;+ modifiedActualResString +&quot;]&quot;);
}


</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pos3.3 - GET Created Task" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${XYZ_URI_PREFIX}/spaces/${SPACE_ID}/features/${TASK_ID_P03_01}?access_token=${WR_API_KEY}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Validate Res Body" enabled="true">
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">
// Fail the test case (by default), unless it is found to have &quot;passed&quot; later on
prev.setSuccessful(false);

// Remove unwanted fields from response, before actual v/s expected comparison
var actualResString = prev.getResponseDataAsString();
vars.put(&quot;V_Created_Task_Str&quot;, actualResString);	// save it for next test case i.e. &quot;Update Task&quot;
var actualResObj = JSON.parse(actualResString);
delete actualResObj.geometry.bbox;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].createdAt;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].muuid;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].puuid;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].space;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].updatedAt;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].uuid;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].version;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].txn;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].rtcts;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].rtuts;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].action;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].appId;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].author;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].deleted;

// Compare actual v/s expected
var modifiedActualResString = JSON.stringify(actualResObj);
var expectedResString = JSON.stringify(${V_Create_Request_Str});

if ( expectedResString == modifiedActualResString ) {
	prev.setSuccessful(true);
}
else {
	prev.setSuccessful(false);
	prev.setResponseMessage(&quot;:: ERROR :: Response body doesn&apos;t match. \n\nExpected : [&quot;+ expectedResString +&quot;]\n\nActual : [&quot;+ modifiedActualResString +&quot;]&quot;);
}


</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Pos3.4 - Prepare Expected Task Obj" enabled="true">
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">
var origTaskStr = vars.get(&quot;V_Orig_Task_Str&quot;);
var origTaskObj = JSON.parse(origTaskStr);
origTaskObj.properties[&quot;@ns:com:here:xyz&quot;].tags.push(&quot;${UTM_DUMMY_UPDATE_TAG_2}&quot;);


vars.put(&quot;V_Expected_Task_Str&quot;, JSON.stringify(origTaskObj));
</stringProp>
          <stringProp name="scriptLanguage">javascript</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pos3.5 - Update Task" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${V_Created_Task_Str}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${XYZ_URI_PREFIX}/spaces/${SPACE_ID}/features/${TASK_ID_P03_01}?access_token=${WR_API_KEY}&amp;addTags=${UTM_DUMMY_UPDATE_TAG_2}&amp;removeTags=${UTM_DUMMY_UPDATE_TAG}</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Validate Res Body" enabled="true">
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">
// Fail the test case (by default), unless it is found to have &quot;passed&quot; later on
prev.setSuccessful(false);

// Remove unwanted fields from RESPONSE object, before actual v/s expected comparison
var actualResString = prev.getResponseDataAsString();
var actualResObj = JSON.parse(actualResString);
delete actualResObj.geometry.bbox;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].createdAt;	// createdAt MUST match, hence not removing it
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].muuid;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].puuid;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].space;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].updatedAt;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].uuid;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].version;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].txn;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].rtcts;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].rtuts;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].action;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].appId;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].author;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].deleted;

// Remove unwanted fields from EXPECTED object, before actual v/s expected comparison
var expectedResString = JSON.stringify(${V_Expected_Task_Str});
var expectedResObj = JSON.parse(expectedResString);
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].createdAt;	// createdAt MUST match, hence not removing it
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].muuid;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].puuid;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].space;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].updatedAt;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].uuid;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].version;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].txn;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].rtcts;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].rtuts;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].action;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].appId;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].author;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].deleted;

// Compare actual v/s expected
var modifiedActualResString = JSON.stringify(actualResObj);
var modifiedExpResString = JSON.stringify(expectedResObj);

if ( modifiedExpResString == modifiedActualResString ) {
	prev.setSuccessful(true);
}
else {
	prev.setSuccessful(false);
	prev.setResponseMessage(&quot;:: ERROR :: Response body doesn&apos;t match. \n\nExpected : [&quot;+ modifiedExpResString +&quot;]\n\nActual : [&quot;+ modifiedActualResString +&quot;]&quot;);
}


</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pos3.6 - GET Updated Task" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${XYZ_URI_PREFIX}/spaces/${SPACE_ID}/features/${TASK_ID_P03_01}?access_token=${WR_API_KEY}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Validate Res Body" enabled="true">
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">
// Fail the test case (by default), unless it is found to have &quot;passed&quot; later on
prev.setSuccessful(false);

// Remove unwanted fields from RESPONSE object, before actual v/s expected comparison
var actualResString = prev.getResponseDataAsString();
var actualResObj = JSON.parse(actualResString);
delete actualResObj.geometry.bbox;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].createdAt;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].muuid;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].puuid;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].space;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].updatedAt;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].uuid;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].version;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].txn;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].rtcts;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].rtuts;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].action;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].appId;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].author;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].deleted;

// Remove unwanted fields from EXPECTED object, before actual v/s expected comparison
var expectedResString = JSON.stringify(${V_Expected_Task_Str});
var expectedResObj = JSON.parse(expectedResString);
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].createdAt;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].muuid;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].puuid;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].space;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].updatedAt;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].uuid;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].version;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].txn;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].rtcts;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].rtuts;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].action;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].appId;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].author;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].deleted;

// Compare actual v/s expected
var modifiedActualResString = JSON.stringify(actualResObj);
var modifiedExpResString = JSON.stringify(expectedResObj);

if ( modifiedExpResString == modifiedActualResString ) {
	prev.setSuccessful(true);
}
else {
	prev.setSuccessful(false);
	prev.setResponseMessage(&quot;:: ERROR :: Response body doesn&apos;t match. \n\nExpected : [&quot;+ modifiedExpResString +&quot;]\n\nActual : [&quot;+ modifiedActualResString +&quot;]&quot;);
}


</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pos3.7 - Delete Task" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${XYZ_URI_PREFIX}/spaces/${SPACE_ID}/features/${TASK_ID_P03_01}?access_token=${WR_API_KEY}</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49590">204</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Body" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1468">.*</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">5</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Pos4 - Iterate Operation" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${LOOP_COUNT}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Pos4.1 - Prepare Create Request" enabled="true">
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">
var requestStr = {
  &quot;type&quot;: &quot;Feature&quot;,
  &quot;id&quot;: &quot;${TASK_ID_P04_01}&quot;,
  &quot;geometry&quot;: {
    &quot;type&quot;: &quot;Point&quot;,
    &quot;coordinates&quot;: [
      8.68872,
      50.0561,
      0
    ]
  },
  &quot;properties&quot;: {
    &quot;@ns:com:here:xyz&quot;: {
      &quot;tags&quot;: [&quot;@admin1_deu&quot;, &quot;@admin2_hesse&quot;, &quot;@admin3_neu-isenburg&quot;, &quot;@adminlevels_deu_hesse_neu-isenburg&quot;, &quot;audience_internal&quot;, &quot;category_community_feedback_road&quot;, &quot;category_road_geometry&quot;, &quot;isocc_deu&quot;, &quot;otm_maptask&quot;, &quot;priority_1&quot;, &quot;quadkey_1202033022101121&quot;, &quot;skill_level_journeyman&quot;, &quot;source_mapedit&quot;, &quot;status_open&quot;, &quot;taskproducer_mcpt&quot;, &quot;tasktype_geometry&quot;, &quot;tool_mapcreator_moderation&quot;, &quot;tool_mapcreator_moderation_category_community_feedback_road_isocc_deu_user_type_normal&quot;, &quot;tool_mapcreator_moderation_category_road_geometry_isocc_deu_user_type_normal&quot;, &quot;user_type_normal&quot;, &quot;${UTM_TAG_ID}&quot;]
    },
    &quot;references&quot;: [{
      &quot;ids&quot;: [&quot;ad24b3d2-9f23-4b61-b007-4dc5aeea1bc0&quot;],
      &quot;spaceId&quot;: &quot;QsZZzwyY&quot;,
      &quot;featureType&quot;: &quot;Road&quot;
    }],
    &quot;@ns:com:here:utm&quot;: {
      &quot;tags&quot;: [&quot;tool_mapcreator_moderation_category_community_feedback_road_isocc_deu_user_type_normal&quot;, &quot;tool_mapcreator_moderation_category_road_geometry_isocc_deu_user_type_normal&quot;]
    },
    &quot;isoCountryCode&quot;: &quot;DEU&quot;,
    &quot;description&quot;: [{
      &quot;lang&quot;: &quot;en&quot;,
      &quot;text&quot;: &quot;A  Road has been CREATED, Please check this task for reference!&quot;
    }],
    &quot;priority&quot;: 0,
    &quot;taskType&quot;: &quot;COLLECT&quot;,
    &quot;due&quot;: 0,
    &quot;options&quot;: [{
      &quot;key&quot;: &quot;EDIT&quot;,
      &quot;value&quot;: [{
        &quot;lang&quot;: &quot;en&quot;,
        &quot;text&quot;: &quot;Edit&quot;
      }]
    }, {
      &quot;key&quot;: &quot;ENDORSED&quot;,
      &quot;value&quot;: [{
        &quot;lang&quot;: &quot;en&quot;,
        &quot;text&quot;: &quot;Endorsed&quot;
      }]
    }, {
      &quot;key&quot;: &quot;ROLLBACK_MANUALLY&quot;,
      &quot;value&quot;: [{
        &quot;lang&quot;: &quot;en&quot;,
        &quot;text&quot;: &quot;Rollback - Code Manually&quot;
      }]
    }, {
      &quot;key&quot;: &quot;ROLLBACK_REJECT&quot;,
      &quot;value&quot;: [{
        &quot;lang&quot;: &quot;en&quot;,
        &quot;text&quot;: &quot;Rollback - Reject&quot;
      }]
    }],
    &quot;featureType&quot;: &quot;MapTask&quot;,
    &quot;audiences&quot;: [&quot;INTERNAL&quot;],
    &quot;potentialValue&quot;: 0,
    &quot;headline&quot;: [{
      &quot;lang&quot;: &quot;en&quot;,
      &quot;text&quot;: &quot;A road has been CREATED&quot;
    }],
    &quot;status&quot;: &quot;OPEN&quot;
  }
};


vars.put(&quot;V_Create_Request_Str&quot;, JSON.stringify(requestStr));
</stringProp>
          <stringProp name="scriptLanguage">javascript</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pos4.2 - Create Task" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${V_Create_Request_Str}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${XYZ_URI_PREFIX}/spaces/${SPACE_ID}/features/${TASK_ID_P04_01}?access_token=${WR_API_KEY}</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Validate Res Body" enabled="true">
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">
// Fail the test case (by default), unless it is found to have &quot;passed&quot; later on
prev.setSuccessful(false);

// Remove unwanted fields from RESPONSE object, before actual v/s expected comparison
var actualResString = prev.getResponseDataAsString();
var actualResObj = JSON.parse(actualResString);
delete actualResObj.geometry.bbox;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].createdAt;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].muuid;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].puuid;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].space;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].updatedAt;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].uuid;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].version;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].txn;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].rtcts;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].rtuts;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].action;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].appId;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].author;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].deleted;

// Compare actual v/s expected
var modifiedActualResString = JSON.stringify(actualResObj);
var expectedResString = JSON.stringify(${V_Create_Request_Str});

if ( expectedResString == modifiedActualResString ) {
	prev.setSuccessful(true);
}
else {
	prev.setSuccessful(false);
	prev.setResponseMessage(&quot;:: ERROR :: Response body doesn&apos;t match. \n\nExpected : [&quot;+ expectedResString +&quot;]\n\nActual : [&quot;+ modifiedActualResString +&quot;]&quot;);
}


</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pos4.3 - Iterate Tasks" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="access_token" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${RD_API_KEY}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">access_token</stringProp>
              </elementProp>
              <elementProp name="limit" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">10</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">limit</stringProp>
              </elementProp>
              <elementProp name="sort" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">id:asc</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">sort</stringProp>
              </elementProp>
              <elementProp name="skipCache" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">skipCache</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${XYZ_URI_PREFIX}/spaces/${SPACE_ID}/iterate</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Validate Res Body" enabled="true">
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">
// Fail the test case (by default), unless it is found to have &quot;passed&quot; later on
prev.setSuccessful(false);

// Set expected response object
// NOTE : ITERATE operation changes the order in which fields are returned, hence we have to put entire expected response object here, instead of reusing original Create request
var expectedResObj = {
  &quot;id&quot;: &quot;${TASK_ID_P04_01}&quot;,
  &quot;type&quot;: &quot;Feature&quot;,
  &quot;properties&quot;: {
    &quot;due&quot;: 0,
    &quot;status&quot;: &quot;OPEN&quot;,
    &quot;options&quot;: [
      {
        &quot;key&quot;: &quot;EDIT&quot;,
        &quot;value&quot;: [
          {
            &quot;lang&quot;: &quot;en&quot;,
            &quot;text&quot;: &quot;Edit&quot;
          }
        ]
      },
      {
        &quot;key&quot;: &quot;ENDORSED&quot;,
        &quot;value&quot;: [
          {
            &quot;lang&quot;: &quot;en&quot;,
            &quot;text&quot;: &quot;Endorsed&quot;
          }
        ]
      },
      {
        &quot;key&quot;: &quot;ROLLBACK_MANUALLY&quot;,
        &quot;value&quot;: [
          {
            &quot;lang&quot;: &quot;en&quot;,
            &quot;text&quot;: &quot;Rollback - Code Manually&quot;
          }
        ]
      },
      {
        &quot;key&quot;: &quot;ROLLBACK_REJECT&quot;,
        &quot;value&quot;: [
          {
            &quot;lang&quot;: &quot;en&quot;,
            &quot;text&quot;: &quot;Rollback - Reject&quot;
          }
        ]
      }
    ],
    &quot;headline&quot;: [
      {
        &quot;lang&quot;: &quot;en&quot;,
        &quot;text&quot;: &quot;A road has been CREATED&quot;
      }
    ],
    &quot;priority&quot;: 0,
    &quot;taskType&quot;: &quot;COLLECT&quot;,
    &quot;audiences&quot;: [
      &quot;INTERNAL&quot;
    ],
    &quot;references&quot;: [
      {
        &quot;ids&quot;: [
          &quot;ad24b3d2-9f23-4b61-b007-4dc5aeea1bc0&quot;
        ],
        &quot;spaceId&quot;: &quot;QsZZzwyY&quot;,
        &quot;featureType&quot;: &quot;Road&quot;
      }
    ],
    &quot;description&quot;: [
      {
        &quot;lang&quot;: &quot;en&quot;,
        &quot;text&quot;: &quot;A  Road has been CREATED, Please check this task for reference!&quot;
      }
    ],
    &quot;featureType&quot;: &quot;MapTask&quot;,
    &quot;isoCountryCode&quot;: &quot;DEU&quot;,
    &quot;potentialValue&quot;: 0,
    &quot;@ns:com:here:utm&quot;: {
      &quot;tags&quot;: [
        &quot;tool_mapcreator_moderation_category_community_feedback_road_isocc_deu_user_type_normal&quot;,
        &quot;tool_mapcreator_moderation_category_road_geometry_isocc_deu_user_type_normal&quot;
      ]
    },
    &quot;@ns:com:here:xyz&quot;: {
      &quot;tags&quot;: [
        &quot;@admin1_deu&quot;,
        &quot;@admin2_hesse&quot;,
        &quot;@admin3_neu-isenburg&quot;,
        &quot;@adminlevels_deu_hesse_neu-isenburg&quot;,
        &quot;audience_internal&quot;,
        &quot;category_community_feedback_road&quot;,
        &quot;category_road_geometry&quot;,
        &quot;isocc_deu&quot;,
        &quot;otm_maptask&quot;,
        &quot;priority_1&quot;,
        &quot;quadkey_1202033022101121&quot;,
        &quot;skill_level_journeyman&quot;,
        &quot;source_mapedit&quot;,
        &quot;status_open&quot;,
        &quot;taskproducer_mcpt&quot;,
        &quot;tasktype_geometry&quot;,
        &quot;tool_mapcreator_moderation&quot;,
        &quot;tool_mapcreator_moderation_category_community_feedback_road_isocc_deu_user_type_normal&quot;,
        &quot;tool_mapcreator_moderation_category_road_geometry_isocc_deu_user_type_normal&quot;,
        &quot;user_type_normal&quot;,
        &quot;${UTM_TAG_ID}&quot;
      ]
    }
  },
  &quot;geometry&quot;: {
    &quot;type&quot;: &quot;Point&quot;,
    &quot;coordinates&quot;: [
      8.68872,
      50.0561,
      0
    ]
  }
};



// Remove unwanted fields from RESPONSE object, before actual v/s expected comparison
var actualResString = prev.getResponseDataAsString();
var actualResObj = JSON.parse(actualResString);

if (actualResObj.features.length &lt;= 0) {
	prev.setSuccessful(false);
	prev.setResponseMessage(&quot;:: ERROR :: Empty response collection&quot;);
}

var feature = actualResObj.features[0];
delete feature.properties[&quot;@ns:com:here:xyz&quot;].createdAt;
delete feature.properties[&quot;@ns:com:here:xyz&quot;].muuid;
delete feature.properties[&quot;@ns:com:here:xyz&quot;].puuid;
delete feature.properties[&quot;@ns:com:here:xyz&quot;].space;
delete feature.properties[&quot;@ns:com:here:xyz&quot;].updatedAt;
delete feature.properties[&quot;@ns:com:here:xyz&quot;].uuid;
delete feature.properties[&quot;@ns:com:here:xyz&quot;].version;
delete feature.properties[&quot;@ns:com:here:xyz&quot;].txn;
delete feature.properties[&quot;@ns:com:here:xyz&quot;].rtcts;
delete feature.properties[&quot;@ns:com:here:xyz&quot;].rtuts;
delete feature.properties[&quot;@ns:com:here:xyz&quot;].action;
delete feature.properties[&quot;@ns:com:here:xyz&quot;].appId;
delete feature.properties[&quot;@ns:com:here:xyz&quot;].author;
delete feature.properties[&quot;@ns:com:here:xyz&quot;].deleted;

// Compare actual v/s expected
var modifiedActualResString = JSON.stringify(feature);
var expectedResString = JSON.stringify(expectedResObj);

if ( expectedResString == modifiedActualResString ) {
	prev.setSuccessful(true);
}
else {
	prev.setSuccessful(false);
	prev.setResponseMessage(&quot;:: ERROR :: Response body doesn&apos;t match. \n\nExpected : [&quot;+ expectedResString +&quot;]\n\nActual : [&quot;+ modifiedActualResString +&quot;]&quot;);
}


</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pos4.4 - Delete Task" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${XYZ_URI_PREFIX}/spaces/${SPACE_ID}/features/${TASK_ID_P04_01}?access_token=${WR_API_KEY}</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49590">204</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Body" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1468">.*</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">5</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Pos5 - Read Access Control (wikvaya)" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">stopthread</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${LOOP_COUNT}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pos5.1 - GET with Read Key" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${XYZ_URI_PREFIX}/spaces/${SPACE_ID}/features/unknown-task-id?access_token=${RD_API_KEY}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51512">404</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Body" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-351582124">&quot;type&quot;:&quot;ErrorResponse&quot;,&quot;error&quot;:&quot;Exception&quot;,&quot;errorMessage&quot;:&quot;The requested resource does not exist.&quot;,&quot;streamId&quot;:&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pos5.2 - Create Feature with Read key (failure)" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;FeatureCollection&quot;,&#xd;
  &quot;features&quot;: [{&#xd;
    &quot;type&quot;: &quot;Feature&quot;,&#xd;
    &quot;id&quot;: &quot;${TASK_ID_N03_01}&quot;,&#xd;
    &quot;properties&quot;: {&#xd;
      &quot;description&quot;: [{&#xd;
        &quot;lang&quot;: &quot;en&quot;,&#xd;
        &quot;text&quot;: &quot;A  Road has been CREATED, Please check this task for reference!&quot;&#xd;
      }],&#xd;
      &quot;priority&quot;: 1,&#xd;
      &quot;taskType&quot;: &quot;COLLECT&quot;,&#xd;
      &quot;featureType&quot;: &quot;MapTask&quot;,&#xd;
      &quot;headline&quot;: [{&#xd;
        &quot;lang&quot;: &quot;en&quot;,&#xd;
        &quot;text&quot;: &quot;A road has been CREATED&quot;&#xd;
      }],&#xd;
      &quot;status&quot;: &quot;OPEN&quot;&#xd;
    },&#xd;
    &quot;geometry&quot;: {&#xd;
      &quot;type&quot;: &quot;Point&quot;,&#xd;
      &quot;coordinates&quot;: [&#xd;
        8.68872,&#xd;
        50.0561,&#xd;
        0&#xd;
      ]&#xd;
    }&#xd;
  }]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${XYZ_URI_PREFIX}/spaces/${SPACE_ID}/features?access_token=${RD_API_KEY}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51511">403</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Body" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-857009810">&quot;type&quot;:&quot;ErrorResponse&quot;,&quot;error&quot;:&quot;Exception&quot;,&quot;errorMessage&quot;:&quot;Insufficient rights. Token access</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pos5.3 - Create Space with Read key (failure)" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;id&quot;: &quot;${DUMMY_SPACE_ID_1}&quot;,&#xd;
	&quot;title&quot;: &quot;UTM Dummy Space&quot;,&#xd;
	&quot;description&quot;: &quot;Dummy Space created for automated testing&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${XYZ_URI_PREFIX}/spaces?access_token=${RD_API_KEY}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51511">403</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Body" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-857009810">&quot;type&quot;:&quot;ErrorResponse&quot;,&quot;error&quot;:&quot;Exception&quot;,&quot;errorMessage&quot;:&quot;Insufficient rights. Token access</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pos5.4 - GET Connector with Read Key (failure)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${XYZ_URI_PREFIX}/connectors?access_token=${RD_API_KEY}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51511">403</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Body" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-857009810">&quot;type&quot;:&quot;ErrorResponse&quot;,&quot;error&quot;:&quot;Exception&quot;,&quot;errorMessage&quot;:&quot;Insufficient rights. Token access</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pos5.5 - Create Connector with Read Key (failure)" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;${DUMMY_CONNECTOR}&quot;,&#xd;
  &quot;owner&quot;: &quot;ANONYMOUS&quot;,&#xd;
  &quot;active&quot;: true,&#xd;
  &quot;params&quot;: {&#xd;
    &quot;ecps&quot;: &quot;3ZAzLlvfz8KV5NMAifpyUC5C/GtUdE+fm3XIdoS4AV+AYD1SvQS/b+A1tWhABe0O0hfDoFZGxuCqS85z6rf8GBYazv1Gu2FmKO9vhWzwGAc/53LTRVmS5Mv+/JSKJq6D8RqSe8Rt5GTFaLYmMuNj7JSEp9Mxib1C5efdVkvQIPcPdIXO9RwkPVsnQVZxMJ6qqgCxXyVsJEG8pmQ4p7V1ezosAWSVcSNED10hSpkoblqHsTGAnunaMgH/I8Vcqq6Pb1CUNK/CHvLmKw/d2D8py7j64U1LOuTGMHijdVui4zDrEXYiBp+W4w==&quot;,&#xd;
    &quot;connectorId&quot;: &quot;${DUMMY_CONNECTOR}&quot;&#xd;
  },&#xd;
  &quot;contactEmails&quot;: [&#xd;
    &quot;hiren.patel@here.com&quot;&#xd;
  ],&#xd;
  &quot;remoteFunctions&quot;: {&#xd;
    &quot;local&quot;: {&#xd;
      &quot;id&quot;: &quot;xyz-psql-local&quot;,&#xd;
      &quot;env&quot;: {&#xd;
        &quot;ECPS_PHRASE&quot;: &quot;utm!pa55phr4s3&quot;&#xd;
      },&#xd;
      &quot;type&quot;: &quot;Embedded&quot;,&#xd;
      &quot;className&quot;: &quot;com.here.xyz.psql.PSQLXyzConnector&quot;,&#xd;
      &quot;timeoutMs&quot;: 0&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${XYZ_URI_PREFIX}/connectors?access_token=${RD_API_KEY}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51511">403</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Body" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-857009810">&quot;type&quot;:&quot;ErrorResponse&quot;,&quot;error&quot;:&quot;Exception&quot;,&quot;errorMessage&quot;:&quot;Insufficient rights. Token access</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Pos6 - Write Access Control (wikvaya)" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${LOOP_COUNT}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pos6.1 - Create Space with Write key (failure)" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;id&quot;: &quot;${DUMMY_SPACE_ID_2}&quot;,&#xd;
	&quot;title&quot;: &quot;UTM Dummy Space&quot;,&#xd;
	&quot;description&quot;: &quot;Dummy Space created for automated testing&quot;,&#xd;
	&quot;storage&quot;: {&#xd;
		&quot;id&quot;: &quot;psql&quot;&#xd;
	},&#xd;
	&quot;enableUUID&quot;: true&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${XYZ_URI_PREFIX}/spaces?access_token=${WR_API_KEY}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51511">403</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Body" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-857009810">&quot;type&quot;:&quot;ErrorResponse&quot;,&quot;error&quot;:&quot;Exception&quot;,&quot;errorMessage&quot;:&quot;Insufficient rights. Token access</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pos6.2 - GET Connector with Write Key (failure)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${XYZ_URI_PREFIX}/connectors?access_token=${WR_API_KEY}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51511">403</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Body" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-857009810">&quot;type&quot;:&quot;ErrorResponse&quot;,&quot;error&quot;:&quot;Exception&quot;,&quot;errorMessage&quot;:&quot;Insufficient rights. Token access</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pos6.3 - Create Connector with Write Key (failure)" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;${DUMMY_CONNECTOR}&quot;,&#xd;
  &quot;owner&quot;: &quot;ANONYMOUS&quot;,&#xd;
  &quot;active&quot;: true,&#xd;
  &quot;params&quot;: {&#xd;
    &quot;ecps&quot;: &quot;3ZAzLlvfz8KV5NMAifpyUC5C/GtUdE+fm3XIdoS4AV+AYD1SvQS/b+A1tWhABe0O0hfDoFZGxuCqS85z6rf8GBYazv1Gu2FmKO9vhWzwGAc/53LTRVmS5Mv+/JSKJq6D8RqSe8Rt5GTFaLYmMuNj7JSEp9Mxib1C5efdVkvQIPcPdIXO9RwkPVsnQVZxMJ6qqgCxXyVsJEG8pmQ4p7V1ezosAWSVcSNED10hSpkoblqHsTGAnunaMgH/I8Vcqq6Pb1CUNK/CHvLmKw/d2D8py7j64U1LOuTGMHijdVui4zDrEXYiBp+W4w==&quot;,&#xd;
    &quot;connectorId&quot;: &quot;${DUMMY_CONNECTOR}&quot;&#xd;
  },&#xd;
  &quot;contactEmails&quot;: [&#xd;
    &quot;hiren.patel@here.com&quot;&#xd;
  ],&#xd;
  &quot;remoteFunctions&quot;: {&#xd;
    &quot;local&quot;: {&#xd;
      &quot;id&quot;: &quot;xyz-psql-local&quot;,&#xd;
      &quot;env&quot;: {&#xd;
        &quot;ECPS_PHRASE&quot;: &quot;utm!pa55phr4s3&quot;&#xd;
      },&#xd;
      &quot;type&quot;: &quot;Embedded&quot;,&#xd;
      &quot;className&quot;: &quot;com.here.xyz.psql.PSQLXyzConnector&quot;,&#xd;
      &quot;timeoutMs&quot;: 0&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${XYZ_URI_PREFIX}/connectors?access_token=${WR_API_KEY}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51511">403</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Body" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-857009810">&quot;type&quot;:&quot;ErrorResponse&quot;,&quot;error&quot;:&quot;Exception&quot;,&quot;errorMessage&quot;:&quot;Insufficient rights. Token access</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Pos7 - Patch Operation" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stopthread</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${LOOP_COUNT}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Patch variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="V_New_Priority_Value" elementType="Argument">
              <stringProp name="Argument.name">V_New_Priority_Value</stringProp>
              <stringProp name="Argument.value">5</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="V_New_Tag" elementType="Argument">
              <stringProp name="Argument.name">V_New_Tag</stringProp>
              <stringProp name="Argument.value">priority_5</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="V_Remove_Tag" elementType="Argument">
              <stringProp name="Argument.name">V_Remove_Tag</stringProp>
              <stringProp name="Argument.value">priority_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Pos7.1 - Prepare Create Request" enabled="true">
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">
var requestStr = {
  &quot;type&quot;: &quot;Feature&quot;,
  &quot;id&quot;: &quot;${TASK_ID_P07_01}&quot;,
  &quot;geometry&quot;: {
    &quot;type&quot;: &quot;Point&quot;,
    &quot;coordinates&quot;: [
      8.68872,
      50.0561,
      0
    ]
  },
  &quot;properties&quot;: {
    &quot;@ns:com:here:xyz&quot;: {
      &quot;tags&quot;: [&quot;@admin1_deu&quot;, &quot;@admin2_hesse&quot;, &quot;@admin3_neu-isenburg&quot;, &quot;@adminlevels_deu_hesse_neu-isenburg&quot;, &quot;audience_internal&quot;, &quot;category_community_feedback_road&quot;, &quot;category_road_geometry&quot;, &quot;isocc_deu&quot;, &quot;otm_maptask&quot;, &quot;priority_1&quot;, &quot;quadkey_1202033022101121&quot;, &quot;skill_level_journeyman&quot;, &quot;source_mapedit&quot;, &quot;status_open&quot;, &quot;taskproducer_mcpt&quot;, &quot;tasktype_geometry&quot;, &quot;tool_mapcreator_moderation&quot;, &quot;tool_mapcreator_moderation_category_community_feedback_road_isocc_deu_user_type_normal&quot;, &quot;tool_mapcreator_moderation_category_road_geometry_isocc_deu_user_type_normal&quot;, &quot;user_type_normal&quot;, &quot;${UTM_TAG_ID}&quot;]
    },
    &quot;references&quot;: [{
      &quot;ids&quot;: [&quot;ad24b3d2-9f23-4b61-b007-4dc5aeea1bc0&quot;],
      &quot;spaceId&quot;: &quot;QsZZzwyY&quot;,
      &quot;featureType&quot;: &quot;Road&quot;
    }],
    &quot;@ns:com:here:utm&quot;: {
      &quot;tags&quot;: [&quot;tool_mapcreator_moderation_category_community_feedback_road_isocc_deu_user_type_normal&quot;, &quot;tool_mapcreator_moderation_category_road_geometry_isocc_deu_user_type_normal&quot;]
    },
    &quot;isoCountryCode&quot;: &quot;DEU&quot;,
    &quot;description&quot;: [{
      &quot;lang&quot;: &quot;en&quot;,
      &quot;text&quot;: &quot;A  Road has been CREATED, Please check this task for reference!&quot;
    }],
    &quot;priority&quot;: 1,
    &quot;taskType&quot;: &quot;COLLECT&quot;,
    &quot;due&quot;: 0,
    &quot;options&quot;: [{
      &quot;key&quot;: &quot;EDIT&quot;,
      &quot;value&quot;: [{
        &quot;lang&quot;: &quot;en&quot;,
        &quot;text&quot;: &quot;Edit&quot;
      }]
    }, {
      &quot;key&quot;: &quot;ENDORSED&quot;,
      &quot;value&quot;: [{
        &quot;lang&quot;: &quot;en&quot;,
        &quot;text&quot;: &quot;Endorsed&quot;
      }]
    }, {
      &quot;key&quot;: &quot;ROLLBACK_MANUALLY&quot;,
      &quot;value&quot;: [{
        &quot;lang&quot;: &quot;en&quot;,
        &quot;text&quot;: &quot;Rollback - Code Manually&quot;
      }]
    }, {
      &quot;key&quot;: &quot;ROLLBACK_REJECT&quot;,
      &quot;value&quot;: [{
        &quot;lang&quot;: &quot;en&quot;,
        &quot;text&quot;: &quot;Rollback - Reject&quot;
      }]
    }],
    &quot;featureType&quot;: &quot;MapTask&quot;,
    &quot;audiences&quot;: [&quot;INTERNAL&quot;],
    &quot;potentialValue&quot;: 0,
    &quot;headline&quot;: [{
      &quot;lang&quot;: &quot;en&quot;,
      &quot;text&quot;: &quot;A road has been CREATED&quot;
    }],
    &quot;status&quot;: &quot;OPEN&quot;
  }
};


vars.put(&quot;V_Create_Request_Str&quot;, JSON.stringify(requestStr));
</stringProp>
          <stringProp name="scriptLanguage">javascript</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pos7.2 - Create Task" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${V_Create_Request_Str}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${XYZ_URI_PREFIX}/spaces/${SPACE_ID}/features/${TASK_ID_P07_01}?access_token=${WR_API_KEY}</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Validate Res Body" enabled="true">
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">
// Fail the test case (by default), unless it is found to have &quot;passed&quot; later on
prev.setSuccessful(false);

// Remove unwanted fields from RESPONSE object, before actual v/s expected comparison
var actualResString = prev.getResponseDataAsString();
var actualResObj = JSON.parse(actualResString);
delete actualResObj.geometry.bbox;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].createdAt;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].muuid;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].puuid;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].space;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].updatedAt;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].uuid;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].version;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].txn;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].rtcts;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].rtuts;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].action;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].appId;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].author;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].deleted;

// Compare actual v/s expected
var modifiedActualResString = JSON.stringify(actualResObj);
var expectedResString = JSON.stringify(${V_Create_Request_Str});

if ( expectedResString == modifiedActualResString ) {
	prev.setSuccessful(true);
}
else {
	prev.setSuccessful(false);
	prev.setResponseMessage(&quot;:: ERROR :: Response body doesn&apos;t match. \n\nExpected : [&quot;+ expectedResString +&quot;]\n\nActual : [&quot;+ modifiedActualResString +&quot;]&quot;);
}


</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pos7.3 - GET Created Task" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${XYZ_URI_PREFIX}/spaces/${SPACE_ID}/features/${TASK_ID_P07_01}?access_token=${WR_API_KEY}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Validate Res Body" enabled="true">
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">
// Fail the test case (by default), unless it is found to have &quot;passed&quot; later on
prev.setSuccessful(false);

// Remove unwanted fields from response, before actual v/s expected comparison
var actualResString = prev.getResponseDataAsString();
vars.put(&quot;V_Created_Task_Str&quot;, actualResString);	// save it for next test case i.e. &quot;Update Task&quot;
var actualResObj = JSON.parse(actualResString);
delete actualResObj.geometry.bbox;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].createdAt;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].muuid;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].puuid;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].space;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].updatedAt;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].uuid;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].version;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].txn;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].rtcts;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].rtuts;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].action;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].appId;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].author;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].deleted;

// Compare actual v/s expected
var modifiedActualResString = JSON.stringify(actualResObj);
var expectedResString = JSON.stringify(${V_Create_Request_Str});

if ( expectedResString == modifiedActualResString ) {
	prev.setSuccessful(true);
}
else {
	prev.setSuccessful(false);
	prev.setResponseMessage(&quot;:: ERROR :: Response body doesn&apos;t match. \n\nExpected : [&quot;+ expectedResString +&quot;]\n\nActual : [&quot;+ modifiedActualResString +&quot;]&quot;);
}


</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Pos7.4 - Prepare Expected Patch Task" enabled="true">
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">
var createdTaskStr = vars.get(&quot;V_Created_Task_Str&quot;);
var patchedTaskObj = JSON.parse(createdTaskStr);
patchedTaskObj.properties[&quot;@ns:com:here:xyz&quot;].tags.push(&quot;${V_New_Tag}&quot;);
patchedTaskObj.properties.priority = ${V_New_Priority_Value};

// Remove existing tag
var newTags = [];
patchedTaskObj.properties[&quot;@ns:com:here:xyz&quot;].tags.forEach(function(tag) {
	if (tag != &quot;${V_Remove_Tag}&quot;) {
		newTags.push(tag);
	}
});
patchedTaskObj.properties[&quot;@ns:com:here:xyz&quot;].tags = newTags;


vars.put(&quot;V_Patched_Task_Str&quot;, JSON.stringify(patchedTaskObj));
</stringProp>
          <stringProp name="scriptLanguage">javascript</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pos7.5 - Patch Task" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;type&quot;: &quot;Feature&quot;,&#xd;
	&quot;properties&quot;: {&#xd;
		&quot;priority&quot;: ${V_New_Priority_Value}&#xd;
	}&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${XYZ_URI_PREFIX}/spaces/${SPACE_ID}/features/${TASK_ID_P07_01}?access_token=${WR_API_KEY}&amp;removeTags=${V_Remove_Tag}&amp;addTags=${V_New_Tag}&amp;rlock=abort</stringProp>
          <stringProp name="HTTPSampler.method">PATCH</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Validate Res Body" enabled="true">
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">
// Fail the test case (by default), unless it is found to have &quot;passed&quot; later on
prev.setSuccessful(false);

// Remove unwanted fields from RESPONSE object, before actual v/s expected comparison
var actualResString = prev.getResponseDataAsString();
var actualResObj = JSON.parse(actualResString);
//delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].createdAt;	// createdAt MUST match, hence not removing it
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].muuid;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].puuid;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].space;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].updatedAt;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].uuid;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].version;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].txn;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].rtcts;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].rtuts;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].action;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].appId;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].author;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].deleted;

// Remove unwanted fields from EXPECTED object, before actual v/s expected comparison
var expectedResString = JSON.stringify(${V_Patched_Task_Str});
var expectedResObj = JSON.parse(expectedResString);
//delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].createdAt;	// createdAt MUST match, hence not removing it
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].muuid;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].puuid;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].space;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].updatedAt;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].uuid;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].version;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].txn;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].rtcts;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].rtuts;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].action;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].appId;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].author;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].deleted;


// Compare actual v/s expected
var modifiedActualResString = JSON.stringify(actualResObj);
var modifiedExpResString = JSON.stringify(expectedResObj);

if ( modifiedExpResString == modifiedActualResString ) {
	prev.setSuccessful(true);
}
else {
	prev.setSuccessful(false);
	prev.setResponseMessage(&quot;:: ERROR :: Response body doesn&apos;t match. \n\nExpected : [&quot;+ modifiedExpResString +&quot;]\n\nActual : [&quot;+ modifiedActualResString +&quot;]&quot;);
}


</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pos7.6 - GET Patched Task" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${XYZ_URI_PREFIX}/spaces/${SPACE_ID}/features/${TASK_ID_P07_01}?access_token=${WR_API_KEY}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Validate Res Body" enabled="true">
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">
// Fail the test case (by default), unless it is found to have &quot;passed&quot; later on
prev.setSuccessful(false);

// Remove unwanted fields from RESPONSE object, before actual v/s expected comparison
var actualResString = prev.getResponseDataAsString();
var actualResObj = JSON.parse(actualResString);
//delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].createdAt;	// createdAt MUST match, hence not removing it
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].muuid;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].puuid;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].space;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].updatedAt;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].uuid;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].version;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].txn;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].rtcts;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].rtuts;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].action;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].appId;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].author;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].deleted;

// Remove unwanted fields from EXPECTED object, before actual v/s expected comparison
var expectedResString = JSON.stringify(${V_Patched_Task_Str});
var expectedResObj = JSON.parse(expectedResString);
//delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].createdAt;	// createdAt MUST match, hence not removing it
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].muuid;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].puuid;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].space;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].updatedAt;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].uuid;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].version;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].txn;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].rtcts;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].rtuts;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].action;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].appId;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].author;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].deleted;

// Compare actual v/s expected
var modifiedActualResString = JSON.stringify(actualResObj);
var modifiedExpResString = JSON.stringify(expectedResObj);

if ( modifiedExpResString == modifiedActualResString ) {
	prev.setSuccessful(true);
}
else {
	prev.setSuccessful(false);
	prev.setResponseMessage(&quot;:: ERROR :: Response body doesn&apos;t match. \n\nExpected : [&quot;+ modifiedExpResString +&quot;]\n\nActual : [&quot;+ modifiedActualResString +&quot;]&quot;);
}


</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pos7.7 - Delete Task" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${XYZ_URI_PREFIX}/spaces/${SPACE_ID}/features/${TASK_ID_P07_01}?access_token=${WR_API_KEY}</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49590">204</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Body" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1468">.*</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">5</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Pos8 - Connector Operations (wikvaya)" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${LOOP_COUNT}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pos8.1 - GET Connector by Id" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${XYZ_URI_PREFIX}/connectors/${DEF_CONNECTOR_ID}?access_token=${CONN_API_KEY}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Validate Res Body" enabled="true">
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">
// Fail the test case (by default), unless it is found to have &quot;passed&quot; later on
prev.setSuccessful(false);

// Compare actual v/s expected
var actualResObj = JSON.parse(prev.getResponseDataAsString());
var expectedConnectorId = &quot;psql&quot;;
var actualConnectorId = actualResObj.id;

if ( actualConnectorId == expectedConnectorId ) {
	prev.setSuccessful(true);
}
else {
	prev.setSuccessful(false);
	prev.setResponseMessage(&quot;:: ERROR :: Response body doesn&apos;t match. \n\nExpected connector : [&quot;+ expectedConnectorId +&quot;]\n\nActual : [&quot;+ actualConnectorId +&quot;]&quot;);
}


</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pos8.2 - Create Connector" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;${DUMMY_CONNECTOR}&quot;,&#xd;
  &quot;owner&quot;: &quot;ANONYMOUS&quot;,&#xd;
  &quot;active&quot;: true,&#xd;
  &quot;params&quot;: {&#xd;
    &quot;ecps&quot;: &quot;3ZAzLlvfz8KV5NMAifpyUC5C/GtUdE+fm3XIdoS4AV+AYD1SvQS/b+A1tWhABe0O0hfDoFZGxuCqS85z6rf8GBYazv1Gu2FmKO9vhWzwGAc/53LTRVmS5Mv+/JSKJq6D8RqSe8Rt5GTFaLYmMuNj7JSEp9Mxib1C5efdVkvQIPcPdIXO9RwkPVsnQVZxMJ6qqgCxXyVsJEG8pmQ4p7V1ezosAWSVcSNED10hSpkoblqHsTGAnunaMgH/I8Vcqq6Pb1CUNK/CHvLmKw/d2D8py7j64U1LOuTGMHijdVui4zDrEXYiBp+W4w==&quot;,&#xd;
    &quot;connectorId&quot;: &quot;${DUMMY_CONNECTOR}&quot;&#xd;
  },&#xd;
  &quot;contactEmails&quot;: [&#xd;
    &quot;hiren.patel@here.com&quot;&#xd;
  ],&#xd;
  &quot;remoteFunctions&quot;: {&#xd;
    &quot;local&quot;: {&#xd;
      &quot;id&quot;: &quot;xyz-psql-local&quot;,&#xd;
      &quot;env&quot;: {&#xd;
        &quot;ECPS_PHRASE&quot;: &quot;utm!pa55phr4s3&quot;&#xd;
      },&#xd;
      &quot;type&quot;: &quot;Embedded&quot;,&#xd;
      &quot;className&quot;: &quot;com.here.xyz.psql.PSQLXyzConnector&quot;,&#xd;
      &quot;timeoutMs&quot;: 0&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${XYZ_URI_PREFIX}/connectors?access_token=${CONN_API_KEY}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49587">201</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Validate Res Body" enabled="false">
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">
// Fail the test case (by default), unless it is found to have &quot;passed&quot; later on
prev.setSuccessful(false);

// Compare actual v/s expected
var actualResObj = JSON.parse(prev.getResponseDataAsString());
var expectedConnectorId = &quot;psql&quot;;
var actualConnectorId = actualResObj[0].id;

if ( actualConnectorId == expectedConnectorId ) {
	prev.setSuccessful(true);
}
else {
	prev.setSuccessful(false);
	prev.setResponseMessage(&quot;:: ERROR :: Response body doesn&apos;t match. \n\nExpected connector : [&quot;+ expectedConnectorId +&quot;]\n\nActual : [&quot;+ actualConnectorId +&quot;]&quot;);
}


</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pos8.3 - Patch Connector" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;capabilities&quot;: {&#xd;
    &quot;propertySearch&quot;: true&#xd;
  }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${XYZ_URI_PREFIX}/connectors/${DUMMY_CONNECTOR}?access_token=${CONN_API_KEY}</stringProp>
          <stringProp name="HTTPSampler.method">PATCH</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Validate Res Body" enabled="false">
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">
// Fail the test case (by default), unless it is found to have &quot;passed&quot; later on
prev.setSuccessful(false);

// Compare actual v/s expected
var actualResObj = JSON.parse(prev.getResponseDataAsString());
var expectedConnectorId = &quot;psql&quot;;
var actualConnectorId = actualResObj[0].id;

if ( actualConnectorId == expectedConnectorId ) {
	prev.setSuccessful(true);
}
else {
	prev.setSuccessful(false);
	prev.setResponseMessage(&quot;:: ERROR :: Response body doesn&apos;t match. \n\nExpected connector : [&quot;+ expectedConnectorId +&quot;]\n\nActual : [&quot;+ actualConnectorId +&quot;]&quot;);
}


</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pos8.4 - Delete Connector" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${XYZ_URI_PREFIX}/connectors/${DUMMY_CONNECTOR}?access_token=${CONN_API_KEY}</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Validate Res Body" enabled="false">
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">
// Fail the test case (by default), unless it is found to have &quot;passed&quot; later on
prev.setSuccessful(false);

// Compare actual v/s expected
var actualResObj = JSON.parse(prev.getResponseDataAsString());
var expectedConnectorId = &quot;psql&quot;;
var actualConnectorId = actualResObj[0].id;

if ( actualConnectorId == expectedConnectorId ) {
	prev.setSuccessful(true);
}
else {
	prev.setSuccessful(false);
	prev.setResponseMessage(&quot;:: ERROR :: Response body doesn&apos;t match. \n\nExpected connector : [&quot;+ expectedConnectorId +&quot;]\n\nActual : [&quot;+ actualConnectorId +&quot;]&quot;);
}


</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Pos9 - Space Operations" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${LOOP_COUNT}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pos9.1 - Create Space" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;id&quot;: &quot;${DUMMY_SPACE_ID_3}&quot;,&#xd;
	&quot;title&quot;: &quot;UTM Dummy Space&quot;,&#xd;
	&quot;description&quot;: &quot;Dummy Space created for automated testing&quot;,&#xd;
	&quot;storage&quot;: {&#xd;
		&quot;id&quot;: &quot;${DEF_CONNECTOR_ID}&quot;&#xd;
	},&#xd;
	&quot;enableUUID&quot;: true&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${XYZ_URI_PREFIX}/spaces?access_token=${SPACE_API_KEY}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Body" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-857009810">&quot;type&quot;:&quot;ErrorResponse&quot;,&quot;error&quot;:&quot;Exception&quot;,&quot;errorMessage&quot;:&quot;Insufficient rights. Token access</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pos9.2 - Patch Space" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;storage&quot;: {&#xd;
		&quot;id&quot;: &quot;${DEF_CONNECTOR_ID}&quot;&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${XYZ_URI_PREFIX}/spaces/${DUMMY_SPACE_ID_3}?access_token=${SPACE_API_KEY}</stringProp>
          <stringProp name="HTTPSampler.method">PATCH</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Body" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-857009810">&quot;type&quot;:&quot;ErrorResponse&quot;,&quot;error&quot;:&quot;Exception&quot;,&quot;errorMessage&quot;:&quot;Insufficient rights. Token access</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pos9.3 - Get Space by Id" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${XYZ_URI_PREFIX}/spaces/${DUMMY_SPACE_ID_3}?access_token=${SPACE_API_KEY}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Body" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-857009810">&quot;type&quot;:&quot;ErrorResponse&quot;,&quot;error&quot;:&quot;Exception&quot;,&quot;errorMessage&quot;:&quot;Insufficient rights. Token access</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pos9.4 - Delete Space" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${XYZ_URI_PREFIX}/spaces/${DUMMY_SPACE_ID_3}?access_token=${SPACE_API_KEY}</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49590">204</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Body" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-857009810">&quot;type&quot;:&quot;ErrorResponse&quot;,&quot;error&quot;:&quot;Exception&quot;,&quot;errorMessage&quot;:&quot;Insufficient rights. Token access</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Neg1 - Missing Task" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stopthread</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${LOOP_COUNT}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Neg1.1 - GET Missing Task" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${XYZ_URI_PREFIX}/spaces/${SPACE_ID}/features/unknown-task-id?access_token=${WR_API_KEY}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51512">404</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Body" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-351582124">&quot;type&quot;:&quot;ErrorResponse&quot;,&quot;error&quot;:&quot;Exception&quot;,&quot;errorMessage&quot;:&quot;The requested resource does not exist.&quot;,&quot;streamId&quot;:&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Neg2 - Write Control Tests" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stopthread</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${LOOP_COUNT}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Neg2.1 - Prepare Create Request" enabled="true">
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">
var requestObj = {
  &quot;type&quot;: &quot;Feature&quot;,
  &quot;id&quot;: &quot;${TASK_ID_N02_01}&quot;,
  &quot;geometry&quot;: {
    &quot;type&quot;: &quot;Point&quot;,
    &quot;coordinates&quot;: [
      8.68872,
      50.0561,
      0
    ]
  },
  &quot;properties&quot;: {
    &quot;@ns:com:here:xyz&quot;: {
      &quot;tags&quot;: [&quot;@admin1_deu&quot;, &quot;@admin2_hesse&quot;, &quot;@admin3_neu-isenburg&quot;, &quot;@adminlevels_deu_hesse_neu-isenburg&quot;, &quot;audience_internal&quot;, &quot;category_community_feedback_road&quot;, &quot;category_road_geometry&quot;, &quot;isocc_deu&quot;, &quot;otm_maptask&quot;, &quot;priority_1&quot;, &quot;quadkey_1202033022101121&quot;, &quot;skill_level_journeyman&quot;, &quot;source_mapedit&quot;, &quot;status_open&quot;, &quot;taskproducer_mcpt&quot;, &quot;tasktype_geometry&quot;, &quot;tool_mapcreator_moderation&quot;, &quot;tool_mapcreator_moderation_category_community_feedback_road_isocc_deu_user_type_normal&quot;, &quot;tool_mapcreator_moderation_category_road_geometry_isocc_deu_user_type_normal&quot;, &quot;user_type_normal&quot;, &quot;${UTM_TAG_ID}&quot;]
    },
    &quot;references&quot;: [{
      &quot;ids&quot;: [&quot;ad24b3d2-9f23-4b61-b007-4dc5aeea1bc0&quot;],
      &quot;spaceId&quot;: &quot;QsZZzwyY&quot;,
      &quot;featureType&quot;: &quot;Road&quot;
    }],
    &quot;@ns:com:here:utm&quot;: {
      &quot;tags&quot;: [&quot;tool_mapcreator_moderation_category_community_feedback_road_isocc_deu_user_type_normal&quot;, &quot;tool_mapcreator_moderation_category_road_geometry_isocc_deu_user_type_normal&quot;]
    },
    &quot;isoCountryCode&quot;: &quot;DEU&quot;,
    &quot;description&quot;: [{
      &quot;lang&quot;: &quot;en&quot;,
      &quot;text&quot;: &quot;A  Road has been CREATED, Please check this task for reference!&quot;
    }],
    &quot;priority&quot;: 1,
    &quot;taskType&quot;: &quot;COLLECT&quot;,
    &quot;due&quot;: 0,
    &quot;options&quot;: [{
      &quot;key&quot;: &quot;EDIT&quot;,
      &quot;value&quot;: [{
        &quot;lang&quot;: &quot;en&quot;,
        &quot;text&quot;: &quot;Edit&quot;
      }]
    }, {
      &quot;key&quot;: &quot;ENDORSED&quot;,
      &quot;value&quot;: [{
        &quot;lang&quot;: &quot;en&quot;,
        &quot;text&quot;: &quot;Endorsed&quot;
      }]
    }, {
      &quot;key&quot;: &quot;ROLLBACK_MANUALLY&quot;,
      &quot;value&quot;: [{
        &quot;lang&quot;: &quot;en&quot;,
        &quot;text&quot;: &quot;Rollback - Code Manually&quot;
      }]
    }, {
      &quot;key&quot;: &quot;ROLLBACK_REJECT&quot;,
      &quot;value&quot;: [{
        &quot;lang&quot;: &quot;en&quot;,
        &quot;text&quot;: &quot;Rollback - Reject&quot;
      }]
    }],
    &quot;featureType&quot;: &quot;MapTask&quot;,
    &quot;audiences&quot;: [&quot;INTERNAL&quot;],
    &quot;potentialValue&quot;: 0,
    &quot;headline&quot;: [{
      &quot;lang&quot;: &quot;en&quot;,
      &quot;text&quot;: &quot;A road has been CREATED&quot;
    }],
    &quot;status&quot;: &quot;OPEN&quot;
  }
};


// Create request 01
var requestStr = JSON.stringify(requestObj);
vars.put(&quot;V_Create_Request_Str&quot;, requestStr);



</stringProp>
          <stringProp name="scriptLanguage">javascript</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Neg2.2 - Create Task" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;FeatureCollection&quot;,&#xd;
  &quot;features&quot;: [&#xd;
    ${V_Create_Request_Str}&#xd;
  ]&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${XYZ_URI_PREFIX}/spaces/${SPACE_ID}/features?access_token=${WR_API_KEY}&amp;e=error</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Validate Res Body" enabled="true">
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">
// Fail the test case (by default), unless it is found to have &quot;passed&quot; later on
prev.setSuccessful(false);

// Set expected response object
var expectedResObj = {
  &quot;type&quot;: &quot;FeatureCollection&quot;,
  &quot;features&quot;: [
    ${V_Create_Request_Str}
  ],
  &quot;inserted&quot;: [&quot;${TASK_ID_N02_01}&quot;]
};

// Remove unwanted fields from response, before actual v/s expected comparison
var actualResString = prev.getResponseDataAsString();
var actualResObj = JSON.parse(actualResString);
delete actualResObj.etag;
actualResObj.features.forEach(function(feature) {
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].createdAt;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].muuid;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].puuid;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].space;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].updatedAt;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].uuid;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].version;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].txn;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].rtcts;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].rtuts;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].action;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].appId;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].author;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].deleted;
});

// Compare actual v/s expected
var modifiedActualResString = JSON.stringify(actualResObj);
var expectedResString = JSON.stringify(expectedResObj);

if ( expectedResString == modifiedActualResString ) {
	prev.setSuccessful(true);
}
else {
	prev.setSuccessful(false);
	prev.setResponseMessage(&quot;:: ERROR :: Response body doesn&apos;t match. \n\nExpected : [&quot;+ expectedResString +&quot;]\n\nActual : [&quot;+ modifiedActualResString +&quot;]&quot;);
}


</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Neg2.3 - Create Task (failure)" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;FeatureCollection&quot;,&#xd;
  &quot;features&quot;: [&#xd;
    ${V_Create_Request_Str}&#xd;
  ]&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${XYZ_URI_PREFIX}/spaces/${SPACE_ID}/features?access_token=${WR_API_KEY}&amp;e=error</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51517">409</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Body" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1943164842">&quot;type&quot;:&quot;ErrorResponse&quot;,&quot;error&quot;:&quot;Exception&quot;,&quot;errorMessage&quot;:&quot;The record {${TASK_ID_N02_01}} exists.&quot;,&quot;streamId&quot;:</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Neg2.4 - GET Created Task" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${XYZ_URI_PREFIX}/spaces/${SPACE_ID}/features/${TASK_ID_N02_01}?access_token=${WR_API_KEY}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Validate Res Body" enabled="true">
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">
// Fail the test case (by default), unless it is found to have &quot;passed&quot; later on
prev.setSuccessful(false);

// Remove unwanted fields from response, before actual v/s expected comparison
var actualResString = prev.getResponseDataAsString();
vars.put(&quot;V_Created_Task_Str&quot;, actualResString);	// save it for next test case i.e. &quot;Update Task&quot;
var actualResObj = JSON.parse(actualResString);
delete actualResObj.geometry.bbox;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].createdAt;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].muuid;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].puuid;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].space;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].updatedAt;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].uuid;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].version;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].txn;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].rtcts;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].rtuts;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].action;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].appId;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].author;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].deleted;

// Compare actual v/s expected
var modifiedActualResString = JSON.stringify(actualResObj);
var expectedResString = JSON.stringify(${V_Create_Request_Str});

if ( expectedResString == modifiedActualResString ) {
	prev.setSuccessful(true);
}
else {
	prev.setSuccessful(false);
	prev.setResponseMessage(&quot;:: ERROR :: Response body doesn&apos;t match. \n\nExpected : [&quot;+ expectedResString +&quot;]\n\nActual : [&quot;+ modifiedActualResString +&quot;]&quot;);
}


</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Neg2.5 - Prepare Update Request" enabled="true">
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">
var createdTaskStr = vars.get(&quot;V_Created_Task_Str&quot;);
var updateTaskObj = JSON.parse(createdTaskStr);
updateTaskObj.properties[&quot;@ns:com:here:xyz&quot;].tags.push(&quot;${UTM_DUMMY_UPDATE_TAG}&quot;);


vars.put(&quot;V_Update_Request_Str&quot;, JSON.stringify(updateTaskObj));
</stringProp>
          <stringProp name="scriptLanguage">javascript</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Neg2.6 - Update Task" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${V_Update_Request_Str}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${XYZ_URI_PREFIX}/spaces/${SPACE_ID}/features/${TASK_ID_N02_01}?access_token=${WR_API_KEY}</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Validate Res Body" enabled="true">
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">
// Fail the test case (by default), unless it is found to have &quot;passed&quot; later on
prev.setSuccessful(false);

// Remove unwanted fields from RESPONSE object, before actual v/s expected comparison
var actualResString = prev.getResponseDataAsString();
var actualResObj = JSON.parse(actualResString);
//delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].createdAt;	// createdAt MUST match, hence not removing it
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].muuid;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].puuid;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].space;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].updatedAt;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].uuid;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].version;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].txn;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].rtcts;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].rtuts;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].action;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].appId;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].author;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].deleted;

// Remove unwanted fields from EXPECTED object, before actual v/s expected comparison
var expectedResString = JSON.stringify(${V_Update_Request_Str});
var expectedResObj = JSON.parse(expectedResString);
//delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].createdAt;	// createdAt MUST match, hence not removing it
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].muuid;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].puuid;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].space;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].updatedAt;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].uuid;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].version;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].txn;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].rtcts;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].rtuts;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].action;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].appId;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].author;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].deleted;

// Compare actual v/s expected
var modifiedActualResString = JSON.stringify(actualResObj);
var modifiedExpResString = JSON.stringify(expectedResObj);

if ( modifiedExpResString == modifiedActualResString ) {
	prev.setSuccessful(true);
}
else {
	prev.setSuccessful(false);
	prev.setResponseMessage(&quot;:: ERROR :: Response body doesn&apos;t match. \n\nExpected : [&quot;+ modifiedExpResString +&quot;]\n\nActual : [&quot;+ modifiedActualResString +&quot;]&quot;);
}


</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Neg2.7 - Update Task (failure)" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${V_Update_Request_Str}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${XYZ_URI_PREFIX}/spaces/${SPACE_ID}/features/${TASK_ID_N02_01}?access_token=${WR_API_KEY}</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51517">409</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Body" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="607760032">&quot;type&quot;:&quot;ErrorResponse&quot;,&quot;error&quot;:&quot;Exception&quot;,&quot;errorMessage&quot;:&quot;The feature with id ${TASK_ID_N02_01} cannot be replaced. The provided UUID doesn&apos;t match the UUID of the head state</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Neg2.8 - GET Updated Task" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${XYZ_URI_PREFIX}/spaces/${SPACE_ID}/features/${TASK_ID_N02_01}?access_token=${WR_API_KEY}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Validate Res Body" enabled="true">
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">
// Fail the test case (by default), unless it is found to have &quot;passed&quot; later on
prev.setSuccessful(false);

// Remove unwanted fields from RESPONSE object, before actual v/s expected comparison
var actualResString = prev.getResponseDataAsString();
var actualResObj = JSON.parse(actualResString);
delete actualResObj.geometry.bbox;
//delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].createdAt;	// createdAt MUST match, hence not removing it
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].muuid;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].puuid;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].space;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].updatedAt;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].uuid;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].version;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].txn;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].rtcts;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].rtuts;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].action;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].appId;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].author;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].deleted;

// Remove unwanted fields from EXPECTED object, before actual v/s expected comparison
var expectedResString = JSON.stringify(${V_Update_Request_Str});
var expectedResObj = JSON.parse(expectedResString);
delete expectedResObj.geometry.bbox;
//delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].createdAt;	// createdAt MUST match, hence not removing it
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].muuid;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].puuid;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].space;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].updatedAt;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].uuid;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].version;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].txn;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].rtcts;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].rtuts;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].action;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].appId;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].author;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].deleted;

// Compare actual v/s expected
var modifiedActualResString = JSON.stringify(actualResObj);
var expectedResString = JSON.stringify(expectedResObj);

if ( expectedResString == modifiedActualResString ) {
	prev.setSuccessful(true);
}
else {
	prev.setSuccessful(false);
	prev.setResponseMessage(&quot;:: ERROR :: Response body doesn&apos;t match. \n\nExpected : [&quot;+ expectedResString +&quot;]\n\nActual : [&quot;+ modifiedActualResString +&quot;]&quot;);
}


</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Neg2.9 - Delete Task" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${XYZ_URI_PREFIX}/spaces/${SPACE_ID}/features/${TASK_ID_N02_01}?access_token=${WR_API_KEY}</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49590">204</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Body" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1468">.*</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">5</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Neg2.10 - GET Deleted Task" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${XYZ_URI_PREFIX}/spaces/${SPACE_ID}/features/${TASK_ID_N02_01}?access_token=${WR_API_KEY}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51512">404</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Body" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-351582124">&quot;type&quot;:&quot;ErrorResponse&quot;,&quot;error&quot;:&quot;Exception&quot;,&quot;errorMessage&quot;:&quot;The requested resource does not exist.&quot;,&quot;streamId&quot;:&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Neg3 - Invalid API Key (wikvaya)" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">stopthread</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${LOOP_COUNT}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Neg3.1 - GET without API Key (failure)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${XYZ_URI_PREFIX}/spaces/${SPACE_ID}/features/unknown-task-id</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51509">401</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Body" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-147781174">{&quot;type&quot;:&quot;error&quot;,&quot;statusCode&quot;:401,&quot;reasonPhrase&quot;:&quot;Unauthorized&quot;,&quot;message&quot;:&quot;Missing auth credentials.&quot;,&quot;streamId&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Neg3.2 - Create without API key (failure)" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;FeatureCollection&quot;,&#xd;
  &quot;features&quot;: [{&#xd;
    &quot;type&quot;: &quot;Feature&quot;,&#xd;
    &quot;id&quot;: &quot;${TASK_ID_N03_01}&quot;,&#xd;
    &quot;properties&quot;: {&#xd;
      &quot;description&quot;: [{&#xd;
        &quot;lang&quot;: &quot;en&quot;,&#xd;
        &quot;text&quot;: &quot;A  Road has been CREATED, Please check this task for reference!&quot;&#xd;
      }],&#xd;
      &quot;priority&quot;: 1,&#xd;
      &quot;taskType&quot;: &quot;COLLECT&quot;,&#xd;
      &quot;featureType&quot;: &quot;MapTask&quot;,&#xd;
      &quot;headline&quot;: [{&#xd;
        &quot;lang&quot;: &quot;en&quot;,&#xd;
        &quot;text&quot;: &quot;A road has been CREATED&quot;&#xd;
      }],&#xd;
      &quot;status&quot;: &quot;OPEN&quot;&#xd;
    },&#xd;
    &quot;geometry&quot;: {&#xd;
      &quot;type&quot;: &quot;Point&quot;,&#xd;
      &quot;coordinates&quot;: [&#xd;
        8.68872,&#xd;
        50.0561,&#xd;
        0&#xd;
      ]&#xd;
    }&#xd;
  }]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${XYZ_URI_PREFIX}/spaces/${SPACE_ID}/features</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51509">401</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Body" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-147781174">{&quot;type&quot;:&quot;error&quot;,&quot;statusCode&quot;:401,&quot;reasonPhrase&quot;:&quot;Unauthorized&quot;,&quot;message&quot;:&quot;Missing auth credentials.&quot;,&quot;streamId&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Neg3.3 - GET with Invalid API key (failure)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${XYZ_URI_PREFIX}/spaces/${SPACE_ID}/features/unknown-task-id?access_token=${WR_API_KEY}_INVALID</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51509">401</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Body" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="452603698">&quot;errorMessage&quot;: &quot;Unauthorized&quot;, &quot;type&quot;: &quot;ErrorResponse&quot;, &quot;error&quot;: &quot;UNAUTHORIZED&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Neg3.4 - Create with Invalid API key (failure)" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;FeatureCollection&quot;,&#xd;
  &quot;features&quot;: [{&#xd;
    &quot;type&quot;: &quot;Feature&quot;,&#xd;
    &quot;id&quot;: &quot;${TASK_ID_N03_01}&quot;,&#xd;
    &quot;properties&quot;: {&#xd;
      &quot;description&quot;: [{&#xd;
        &quot;lang&quot;: &quot;en&quot;,&#xd;
        &quot;text&quot;: &quot;A  Road has been CREATED, Please check this task for reference!&quot;&#xd;
      }],&#xd;
      &quot;priority&quot;: 1,&#xd;
      &quot;taskType&quot;: &quot;COLLECT&quot;,&#xd;
      &quot;featureType&quot;: &quot;MapTask&quot;,&#xd;
      &quot;headline&quot;: [{&#xd;
        &quot;lang&quot;: &quot;en&quot;,&#xd;
        &quot;text&quot;: &quot;A road has been CREATED&quot;&#xd;
      }],&#xd;
      &quot;status&quot;: &quot;OPEN&quot;&#xd;
    },&#xd;
    &quot;geometry&quot;: {&#xd;
      &quot;type&quot;: &quot;Point&quot;,&#xd;
      &quot;coordinates&quot;: [&#xd;
        8.68872,&#xd;
        50.0561,&#xd;
        0&#xd;
      ]&#xd;
    }&#xd;
  }]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${XYZ_URI_PREFIX}/spaces/${SPACE_ID}/features?access_token=${WR_API_KEY}_INVALID</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51509">401</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Body" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="452603698">&quot;errorMessage&quot;: &quot;Unauthorized&quot;, &quot;type&quot;: &quot;ErrorResponse&quot;, &quot;error&quot;: &quot;UNAUTHORIZED&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Neg4 - Bulk Atomicity" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stopthread</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${LOOP_COUNT}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Neg4.1 - Prepare Create Request 1" enabled="true">
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">
var requestObj = {
  &quot;type&quot;: &quot;Feature&quot;,
  &quot;id&quot;: &quot;${TASK_ID_N04_01}&quot;,
  &quot;geometry&quot;: {
    &quot;type&quot;: &quot;Point&quot;,
    &quot;coordinates&quot;: [
      8.68872,
      50.0561,
      0
    ]
  },
  &quot;properties&quot;: {
    &quot;@ns:com:here:xyz&quot;: {
      &quot;tags&quot;: [&quot;@admin1_deu&quot;, &quot;@admin2_hesse&quot;, &quot;@admin3_neu-isenburg&quot;, &quot;@adminlevels_deu_hesse_neu-isenburg&quot;, &quot;audience_internal&quot;, &quot;category_community_feedback_road&quot;, &quot;category_road_geometry&quot;, &quot;isocc_deu&quot;, &quot;otm_maptask&quot;, &quot;priority_1&quot;, &quot;quadkey_1202033022101121&quot;, &quot;skill_level_journeyman&quot;, &quot;source_mapedit&quot;, &quot;status_open&quot;, &quot;taskproducer_mcpt&quot;, &quot;tasktype_geometry&quot;, &quot;tool_mapcreator_moderation&quot;, &quot;tool_mapcreator_moderation_category_community_feedback_road_isocc_deu_user_type_normal&quot;, &quot;tool_mapcreator_moderation_category_road_geometry_isocc_deu_user_type_normal&quot;, &quot;user_type_normal&quot;, &quot;${UTM_TAG_ID}&quot;]
    },
    &quot;references&quot;: [{
      &quot;ids&quot;: [&quot;ad24b3d2-9f23-4b61-b007-4dc5aeea1bc0&quot;],
      &quot;spaceId&quot;: &quot;QsZZzwyY&quot;,
      &quot;featureType&quot;: &quot;Road&quot;
    }],
    &quot;@ns:com:here:utm&quot;: {
      &quot;tags&quot;: [&quot;tool_mapcreator_moderation_category_community_feedback_road_isocc_deu_user_type_normal&quot;, &quot;tool_mapcreator_moderation_category_road_geometry_isocc_deu_user_type_normal&quot;]
    },
    &quot;isoCountryCode&quot;: &quot;DEU&quot;,
    &quot;description&quot;: [{
      &quot;lang&quot;: &quot;en&quot;,
      &quot;text&quot;: &quot;A  Road has been CREATED, Please check this task for reference!&quot;
    }],
    &quot;priority&quot;: 1,
    &quot;taskType&quot;: &quot;COLLECT&quot;,
    &quot;due&quot;: 0,
    &quot;options&quot;: [{
      &quot;key&quot;: &quot;EDIT&quot;,
      &quot;value&quot;: [{
        &quot;lang&quot;: &quot;en&quot;,
        &quot;text&quot;: &quot;Edit&quot;
      }]
    }, {
      &quot;key&quot;: &quot;ENDORSED&quot;,
      &quot;value&quot;: [{
        &quot;lang&quot;: &quot;en&quot;,
        &quot;text&quot;: &quot;Endorsed&quot;
      }]
    }, {
      &quot;key&quot;: &quot;ROLLBACK_MANUALLY&quot;,
      &quot;value&quot;: [{
        &quot;lang&quot;: &quot;en&quot;,
        &quot;text&quot;: &quot;Rollback - Code Manually&quot;
      }]
    }, {
      &quot;key&quot;: &quot;ROLLBACK_REJECT&quot;,
      &quot;value&quot;: [{
        &quot;lang&quot;: &quot;en&quot;,
        &quot;text&quot;: &quot;Rollback - Reject&quot;
      }]
    }],
    &quot;featureType&quot;: &quot;MapTask&quot;,
    &quot;audiences&quot;: [&quot;INTERNAL&quot;],
    &quot;potentialValue&quot;: 0,
    &quot;headline&quot;: [{
      &quot;lang&quot;: &quot;en&quot;,
      &quot;text&quot;: &quot;A road has been CREATED&quot;
    }],
    &quot;status&quot;: &quot;OPEN&quot;
  }
};


// Create request 01
var requestStr = JSON.stringify(requestObj);
vars.put(&quot;V_Create_Request_Str_01&quot;, requestStr);



</stringProp>
          <stringProp name="scriptLanguage">javascript</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Neg4.2 - Bulk Insert" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;FeatureCollection&quot;,&#xd;
  &quot;features&quot;: [&#xd;
    ${V_Create_Request_Str_01},&#xd;
    ${V_Create_Request_Str_01}&#xd;
  ]&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${XYZ_URI_PREFIX}/spaces/${SPACE_ID}/features?access_token=${WR_API_KEY}&amp;transactional=true</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51508">400</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Body" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="683809347">&quot;type&quot;:&quot;ErrorResponse&quot;,&quot;error&quot;:&quot;IllegalArgument&quot;,&quot;errorMessage&quot;:&quot;Objects with the same ID ${TASK_ID_N04_01} is included in the request.&quot;,&quot;streamId&quot;:</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Neg4.3 - GET Txn Failed Task 1" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${XYZ_URI_PREFIX}/spaces/${SPACE_ID}/features/${TASK_ID_N04_01}?access_token=${WR_API_KEY}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51512">404</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Body" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-351582124">&quot;type&quot;:&quot;ErrorResponse&quot;,&quot;error&quot;:&quot;Exception&quot;,&quot;errorMessage&quot;:&quot;The requested resource does not exist.&quot;,&quot;streamId&quot;:&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Neg4.4 - Create Task" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;FeatureCollection&quot;,&#xd;
  &quot;features&quot;: [&#xd;
    ${V_Create_Request_Str_01}&#xd;
  ]&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${XYZ_URI_PREFIX}/spaces/${SPACE_ID}/features?access_token=${WR_API_KEY}&amp;e=error</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Validate Res Body" enabled="true">
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">
// Fail the test case (by default), unless it is found to have &quot;passed&quot; later on
prev.setSuccessful(false);

// Set expected response object
var expectedResObj = {
  &quot;type&quot;: &quot;FeatureCollection&quot;,
  &quot;features&quot;: [
    ${V_Create_Request_Str_01}
  ],
  &quot;inserted&quot;: [&quot;${TASK_ID_N04_01}&quot;]
};

// Remove unwanted fields from response, before actual v/s expected comparison
var actualResString = prev.getResponseDataAsString();
var actualResObj = JSON.parse(actualResString);
delete actualResObj.etag;
actualResObj.features.forEach(function(feature) {
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].createdAt;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].muuid;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].puuid;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].space;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].updatedAt;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].uuid;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].version;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].txn;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].rtcts;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].rtuts;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].action;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].appId;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].author;
	delete feature.properties[&quot;@ns:com:here:xyz&quot;].deleted;
});

// Compare actual v/s expected
var modifiedActualResString = JSON.stringify(actualResObj);
var expectedResString = JSON.stringify(expectedResObj);

if ( expectedResString == modifiedActualResString ) {
	prev.setSuccessful(true);
}
else {
	prev.setSuccessful(false);
	prev.setResponseMessage(&quot;:: ERROR :: Response body doesn&apos;t match. \n\nExpected : [&quot;+ expectedResString +&quot;]\n\nActual : [&quot;+ modifiedActualResString +&quot;]&quot;);
}


</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Neg4.5 - GET Created Task" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${XYZ_URI_PREFIX}/spaces/${SPACE_ID}/features/${TASK_ID_N04_01}?access_token=${WR_API_KEY}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Validate Res Body" enabled="true">
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">
// Fail the test case (by default), unless it is found to have &quot;passed&quot; later on
prev.setSuccessful(false);

// Remove unwanted fields from response, before actual v/s expected comparison
var actualResString = prev.getResponseDataAsString();
vars.put(&quot;V_Created_Task_Str_01&quot;, actualResString);	// save it for next test case i.e. &quot;Update Task&quot;
var actualResObj = JSON.parse(actualResString);
delete actualResObj.geometry.bbox;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].createdAt;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].muuid;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].puuid;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].space;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].updatedAt;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].uuid;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].version;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].txn;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].rtcts;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].rtuts;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].action;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].appId;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].author;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].deleted;

// Compare actual v/s expected
var modifiedActualResString = JSON.stringify(actualResObj);
var expectedResString = JSON.stringify(${V_Create_Request_Str_01});

if ( expectedResString == modifiedActualResString ) {
	prev.setSuccessful(true);
}
else {
	prev.setSuccessful(false);
	prev.setResponseMessage(&quot;:: ERROR :: Response body doesn&apos;t match. \n\nExpected : [&quot;+ expectedResString +&quot;]\n\nActual : [&quot;+ modifiedActualResString +&quot;]&quot;);
}


</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Neg4.6 - Prepare Update Request 1" enabled="true">
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">
var createdTaskStr = vars.get(&quot;V_Created_Task_Str_01&quot;);
var updateTaskObj = JSON.parse(createdTaskStr);
updateTaskObj.properties[&quot;@ns:com:here:xyz&quot;].tags.push(&quot;${UTM_DUMMY_UPDATE_TAG}&quot;);


vars.put(&quot;V_Update_Request_Str&quot;, JSON.stringify(updateTaskObj));
</stringProp>
          <stringProp name="scriptLanguage">javascript</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Neg4.7 - Prepare Create Request 2" enabled="true">
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">
var requestObj = {
  &quot;type&quot;: &quot;Feature&quot;,
  &quot;id&quot;: &quot;${TASK_ID_N04_02}&quot;,
  &quot;geometry&quot;: {
    &quot;type&quot;: &quot;Point&quot;,
    &quot;coordinates&quot;: [
      8.68872,
      50.0561,
      0
    ]
  },
  &quot;properties&quot;: {
    &quot;@ns:com:here:xyz&quot;: {
      &quot;tags&quot;: [&quot;@admin1_deu&quot;, &quot;@admin2_hesse&quot;, &quot;@admin3_neu-isenburg&quot;, &quot;@adminlevels_deu_hesse_neu-isenburg&quot;, &quot;audience_internal&quot;, &quot;category_community_feedback_road&quot;, &quot;category_road_geometry&quot;, &quot;isocc_deu&quot;, &quot;otm_maptask&quot;, &quot;priority_1&quot;, &quot;quadkey_1202033022101121&quot;, &quot;skill_level_journeyman&quot;, &quot;source_mapedit&quot;, &quot;status_open&quot;, &quot;taskproducer_mcpt&quot;, &quot;tasktype_geometry&quot;, &quot;tool_mapcreator_moderation&quot;, &quot;tool_mapcreator_moderation_category_community_feedback_road_isocc_deu_user_type_normal&quot;, &quot;tool_mapcreator_moderation_category_road_geometry_isocc_deu_user_type_normal&quot;, &quot;user_type_normal&quot;, &quot;${UTM_TAG_ID}&quot;]
    },
    &quot;references&quot;: [{
      &quot;ids&quot;: [&quot;ad24b3d2-9f23-4b61-b007-4dc5aeea1bc0&quot;],
      &quot;spaceId&quot;: &quot;QsZZzwyY&quot;,
      &quot;featureType&quot;: &quot;Road&quot;
    }],
    &quot;@ns:com:here:utm&quot;: {
      &quot;tags&quot;: [&quot;tool_mapcreator_moderation_category_community_feedback_road_isocc_deu_user_type_normal&quot;, &quot;tool_mapcreator_moderation_category_road_geometry_isocc_deu_user_type_normal&quot;]
    },
    &quot;isoCountryCode&quot;: &quot;DEU&quot;,
    &quot;description&quot;: [{
      &quot;lang&quot;: &quot;en&quot;,
      &quot;text&quot;: &quot;A  Road has been CREATED, Please check this task for reference!&quot;
    }],
    &quot;priority&quot;: 1,
    &quot;taskType&quot;: &quot;COLLECT&quot;,
    &quot;due&quot;: 0,
    &quot;options&quot;: [{
      &quot;key&quot;: &quot;EDIT&quot;,
      &quot;value&quot;: [{
        &quot;lang&quot;: &quot;en&quot;,
        &quot;text&quot;: &quot;Edit&quot;
      }]
    }, {
      &quot;key&quot;: &quot;ENDORSED&quot;,
      &quot;value&quot;: [{
        &quot;lang&quot;: &quot;en&quot;,
        &quot;text&quot;: &quot;Endorsed&quot;
      }]
    }, {
      &quot;key&quot;: &quot;ROLLBACK_MANUALLY&quot;,
      &quot;value&quot;: [{
        &quot;lang&quot;: &quot;en&quot;,
        &quot;text&quot;: &quot;Rollback - Code Manually&quot;
      }]
    }, {
      &quot;key&quot;: &quot;ROLLBACK_REJECT&quot;,
      &quot;value&quot;: [{
        &quot;lang&quot;: &quot;en&quot;,
        &quot;text&quot;: &quot;Rollback - Reject&quot;
      }]
    }],
    &quot;featureType&quot;: &quot;MapTask&quot;,
    &quot;audiences&quot;: [&quot;INTERNAL&quot;],
    &quot;potentialValue&quot;: 0,
    &quot;headline&quot;: [{
      &quot;lang&quot;: &quot;en&quot;,
      &quot;text&quot;: &quot;A road has been CREATED&quot;
    }],
    &quot;status&quot;: &quot;OPEN&quot;
  }
};


// Create request 01
var requestStr = JSON.stringify(requestObj);
vars.put(&quot;V_Create_Request_Str_02&quot;, requestStr);



</stringProp>
          <stringProp name="scriptLanguage">javascript</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Neg4.8 - Update Task 1" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${V_Update_Request_Str}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${XYZ_URI_PREFIX}/spaces/${SPACE_ID}/features/${TASK_ID_N04_01}?access_token=${WR_API_KEY}</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Validate Res Body" enabled="true">
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">
// Fail the test case (by default), unless it is found to have &quot;passed&quot; later on
prev.setSuccessful(false);

// Remove unwanted fields from RESPONSE object, before actual v/s expected comparison
var actualResString = prev.getResponseDataAsString();
var actualResObj = JSON.parse(actualResString);
//delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].createdAt;	// createdAt MUST match, hence not removing it
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].muuid;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].puuid;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].space;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].updatedAt;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].uuid;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].version;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].txn;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].rtcts;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].rtuts;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].action;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].appId;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].author;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].deleted;

// Remove unwanted fields from EXPECTED object, before actual v/s expected comparison
var expectedResString = JSON.stringify(${V_Update_Request_Str});
var expectedResObj = JSON.parse(expectedResString);
//delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].createdAt;	// createdAt MUST match, hence not removing it
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].muuid;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].puuid;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].space;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].updatedAt;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].uuid;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].version;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].txn;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].rtcts;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].rtuts;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].action;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].appId;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].author;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].deleted;

// Compare actual v/s expected
var modifiedActualResString = JSON.stringify(actualResObj);
var modifiedExpResString = JSON.stringify(expectedResObj);

if ( modifiedExpResString == modifiedActualResString ) {
	prev.setSuccessful(true);
}
else {
	prev.setSuccessful(false);
	prev.setResponseMessage(&quot;:: ERROR :: Response body doesn&apos;t match. \n\nExpected : [&quot;+ modifiedExpResString +&quot;]\n\nActual : [&quot;+ modifiedActualResString +&quot;]&quot;);
}


</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Neg4.9 - Bulk Update (Txn failure)" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;FeatureCollection&quot;,&#xd;
  &quot;features&quot;: [&#xd;
    ${V_Create_Request_Str_02},&#xd;
    ${V_Update_Request_Str}&#xd;
  ]&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${XYZ_URI_PREFIX}/spaces/${SPACE_ID}/features?access_token=${WR_API_KEY}&amp;transactional=true</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51517">409</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Body" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1271370914">&quot;type&quot;:&quot;ErrorResponse&quot;,&quot;error&quot;:&quot;Exception&quot;,&quot;errorMessage&quot;:&quot;The feature with id ${TASK_ID_N04_01} cannot be replaced. The provided UUID doesn&apos;t match the UUID of the head state</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Neg4.10 - GET Txn Failed Task 1" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${XYZ_URI_PREFIX}/spaces/${SPACE_ID}/features/${TASK_ID_N04_01}?access_token=${WR_API_KEY}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Validate Res Body" enabled="true">
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">
// Fail the test case (by default), unless it is found to have &quot;passed&quot; later on
prev.setSuccessful(false);

// Remove unwanted fields from RESPONSE object, before actual v/s expected comparison
var actualResString = prev.getResponseDataAsString();
var actualResObj = JSON.parse(actualResString);
//delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].createdAt;	// createdAt MUST match, hence not removing it
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].muuid;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].puuid;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].space;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].updatedAt;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].uuid;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].version;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].txn;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].rtcts;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].rtuts;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].action;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].appId;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].author;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].deleted;

// Remove unwanted fields from EXPECTED object, before actual v/s expected comparison
var expectedResString = JSON.stringify(${V_Update_Request_Str});
var expectedResObj = JSON.parse(expectedResString);
//delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].createdAt;	// createdAt MUST match, hence not removing it
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].muuid;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].puuid;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].space;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].updatedAt;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].uuid;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].version;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].txn;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].rtcts;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].rtuts;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].action;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].appId;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].author;
delete expectedResObj.properties[&quot;@ns:com:here:xyz&quot;].deleted;

// Compare actual v/s expected
var modifiedActualResString = JSON.stringify(actualResObj);
var modifiedExpResString = JSON.stringify(expectedResObj);

if ( modifiedExpResString == modifiedActualResString ) {
	prev.setSuccessful(true);
}
else {
	prev.setSuccessful(false);
	prev.setResponseMessage(&quot;:: ERROR :: Response body doesn&apos;t match. \n\nExpected : [&quot;+ modifiedExpResString +&quot;]\n\nActual : [&quot;+ modifiedActualResString +&quot;]&quot;);
}


</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Neg4.11 - GET Txn Failed Task 2" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${XYZ_URI_PREFIX}/spaces/${SPACE_ID}/features/${TASK_ID_N04_02}?access_token=${WR_API_KEY}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51512">404</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Body" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-351582124">&quot;type&quot;:&quot;ErrorResponse&quot;,&quot;error&quot;:&quot;Exception&quot;,&quot;errorMessage&quot;:&quot;The requested resource does not exist.&quot;,&quot;streamId&quot;:&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Neg4.12 - Delete Task" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${XYZ_URI_PREFIX}/spaces/${SPACE_ID}/features/${TASK_ID_N04_01}?access_token=${WR_API_KEY}</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49590">204</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Body" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1468">.*</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">5</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Neg5 - ID Control Tests" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stoptestnow</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${LOOP_COUNT}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Neg5.1 - Prepare Create Request" enabled="true">
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">
var requestStr = {
  &quot;type&quot;: &quot;Feature&quot;,
  &quot;id&quot;: &quot;${TASK_ID_N05_01}&quot;,
  &quot;geometry&quot;: {
    &quot;type&quot;: &quot;Point&quot;,
    &quot;coordinates&quot;: [
      8.68872,
      50.0561,
      0
    ]
  },
  &quot;properties&quot;: {
    &quot;@ns:com:here:xyz&quot;: {
      &quot;tags&quot;: [&quot;@admin1_deu&quot;, &quot;@admin2_hesse&quot;, &quot;@admin3_neu-isenburg&quot;, &quot;@adminlevels_deu_hesse_neu-isenburg&quot;, &quot;audience_internal&quot;, &quot;category_community_feedback_road&quot;, &quot;category_road_geometry&quot;, &quot;isocc_deu&quot;, &quot;otm_maptask&quot;, &quot;priority_1&quot;, &quot;quadkey_1202033022101121&quot;, &quot;skill_level_journeyman&quot;, &quot;source_mapedit&quot;, &quot;status_open&quot;, &quot;taskproducer_mcpt&quot;, &quot;tasktype_geometry&quot;, &quot;tool_mapcreator_moderation&quot;, &quot;tool_mapcreator_moderation_category_community_feedback_road_isocc_deu_user_type_normal&quot;, &quot;tool_mapcreator_moderation_category_road_geometry_isocc_deu_user_type_normal&quot;, &quot;user_type_normal&quot;, &quot;${UTM_TAG_ID}&quot;,&quot;1234567890123456789012345678901234567890123456789012345678901234567890123456789012345_100_1234567890123456789012345678901234567890123456789012345678901234567890123456789012345_200_1234567890123456789012345678901234567890123456789012345678901234567890123456789012345_300_&quot;]
    },
    &quot;references&quot;: [{
      &quot;ids&quot;: [&quot;ad24b3d2-9f23-4b61-b007-4dc5aeea1bc0&quot;],
      &quot;spaceId&quot;: &quot;QsZZzwyY&quot;,
      &quot;featureType&quot;: &quot;Road&quot;
    }],
    &quot;@ns:com:here:utm&quot;: {
      &quot;tags&quot;: [&quot;tool_mapcreator_moderation_category_community_feedback_road_isocc_deu_user_type_normal&quot;, &quot;tool_mapcreator_moderation_category_road_geometry_isocc_deu_user_type_normal&quot;]
    },
    &quot;isoCountryCode&quot;: &quot;DEU&quot;,
    &quot;description&quot;: [{
      &quot;lang&quot;: &quot;en&quot;,
      &quot;text&quot;: &quot;A  Road has been CREATED, Please check this task for reference!&quot;
    }],
    &quot;priority&quot;: 1,
    &quot;taskType&quot;: &quot;COLLECT&quot;,
    &quot;due&quot;: 0,
    &quot;options&quot;: [{
      &quot;key&quot;: &quot;EDIT&quot;,
      &quot;value&quot;: [{
        &quot;lang&quot;: &quot;en&quot;,
        &quot;text&quot;: &quot;Edit&quot;
      }]
    }, {
      &quot;key&quot;: &quot;ENDORSED&quot;,
      &quot;value&quot;: [{
        &quot;lang&quot;: &quot;en&quot;,
        &quot;text&quot;: &quot;Endorsed&quot;
      }]
    }, {
      &quot;key&quot;: &quot;ROLLBACK_MANUALLY&quot;,
      &quot;value&quot;: [{
        &quot;lang&quot;: &quot;en&quot;,
        &quot;text&quot;: &quot;Rollback - Code Manually&quot;
      }]
    }, {
      &quot;key&quot;: &quot;ROLLBACK_REJECT&quot;,
      &quot;value&quot;: [{
        &quot;lang&quot;: &quot;en&quot;,
        &quot;text&quot;: &quot;Rollback - Reject&quot;
      }]
    }],
    &quot;featureType&quot;: &quot;MapTask&quot;,
    &quot;audiences&quot;: [&quot;INTERNAL&quot;],
    &quot;potentialValue&quot;: 0,
    &quot;headline&quot;: [{
      &quot;lang&quot;: &quot;en&quot;,
      &quot;text&quot;: &quot;A road has been CREATED&quot;
    }],
    &quot;status&quot;: &quot;OPEN&quot;
  }
};


vars.put(&quot;V_Create_Request_Str&quot;, JSON.stringify(requestStr));
</stringProp>
          <stringProp name="scriptLanguage">javascript</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Neg5.2 - Update NonExisting Task (failure)" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${V_Create_Request_Str}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${XYZ_URI_PREFIX}/spaces/${SPACE_ID}/features?access_token=${WR_API_KEY}&amp;ne=error</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51517">409</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Body" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2039767306">{&quot;type&quot;:&quot;ErrorResponse&quot;,&quot;error&quot;:&quot;Exception&quot;,&quot;errorMessage&quot;:&quot;The record does not exist.&quot;,&quot;streamId&quot;:&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Neg5.3 - Create Task" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${V_Create_Request_Str}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${XYZ_URI_PREFIX}/spaces/${SPACE_ID}/features?access_token=${WR_API_KEY}&amp;ne=create&amp;e=error</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Validate Res Body" enabled="true">
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">
// Fail the test case (by default), unless it is found to have &quot;passed&quot; later on
prev.setSuccessful(false);

// Remove unwanted fields from RESPONSE object, before actual v/s expected comparison
var actualResString = prev.getResponseDataAsString();
var actualFeatureCollection = JSON.parse(actualResString);
var actualResObj = actualFeatureCollection.features[0];
delete actualResObj.geometry.bbox;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].createdAt;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].muuid;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].puuid;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].space;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].updatedAt;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].uuid;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].version;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].txn;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].rtcts;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].rtuts;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].action;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].appId;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].author;
delete actualResObj.properties[&quot;@ns:com:here:xyz&quot;].deleted;

// Compare actual v/s expected
var modifiedActualResString = JSON.stringify(actualResObj);
var expectedResString = JSON.stringify(${V_Create_Request_Str});

if (actualFeatureCollection.features.length != 1) {
	prev.setSuccessful(false);
	prev.setResponseMessage(&quot;:: ERROR :: Expected exactly one feature in the response. However, count doesn&apos;t match.&quot;);
}
else if ( expectedResString == modifiedActualResString ) {
	prev.setSuccessful(true);
}
else {
	prev.setSuccessful(false);
	prev.setResponseMessage(&quot;:: ERROR :: Response body doesn&apos;t match. \n\nExpected : [&quot;+ expectedResString +&quot;]\n\nActual : [&quot;+ modifiedActualResString +&quot;]&quot;);
}


</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Neg5.4 - Create Task with same ID (failure)" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${V_Create_Request_Str}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${XYZ_URI_PREFIX}/spaces/${SPACE_ID}/features?access_token=${WR_API_KEY}&amp;ne=create&amp;e=error</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51517">409</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Body" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1731997190">{&quot;type&quot;:&quot;ErrorResponse&quot;,&quot;error&quot;:&quot;Exception&quot;,&quot;errorMessage&quot;:&quot;The record {${TASK_ID_N05_01}} exists.&quot;,&quot;streamId&quot;:&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Neg5.5 - Delete Task" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${XYZ_URI_PREFIX}/spaces/${SPACE_ID}/features/${TASK_ID_N05_01}?access_token=${WR_API_KEY}</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49590">204</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Body" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1468">.*</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">5</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Space Connector Operations (manual)" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Connector" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;psql-local&quot;,&#xd;
  &quot;owner&quot;: &quot;ANONYMOUS&quot;,&#xd;
  &quot;active&quot;: true,&#xd;
  &quot;params&quot;: {&#xd;
    &quot;ecps&quot;: &quot;AzDrbETtkM3BanpPPMr1qYi156NbWJfb5D6u0DMh+ZuOuubgQTl9vxmKE1gmu4dD/fG7pIsu2rh5MOfZg9Slx4r5TMskOMWCWCeo42v1dmAPze8kEBbyQ88v5i6tgaz3dvRTJwlFIgT+1t0Ppe8nvPN9QFJkcQx0JY8B4RJ+zRsRHy/PeUP0gz310MjvVPKnzb9BnrxUXgH9+ppkedtTINF45eo=&quot;,&#xd;
    &quot;connectorId&quot;: &quot;psql-task-mgmt&quot;,&#xd;
    &quot;dbMaxPoolSize&quot;: 10&#xd;
  },&#xd;
  &quot;contactEmails&quot;: [&#xd;
    &quot;hiren.patel@here.com&quot;&#xd;
  ],&#xd;
  &quot;remoteFunctions&quot;: {&#xd;
    &quot;local&quot;: {&#xd;
      &quot;id&quot;: &quot;xyz-psql-local&quot;,&#xd;
      &quot;env&quot;: {&#xd;
        &quot;ECPS_PHRASE&quot;: &quot;local&quot;&#xd;
      },&#xd;
      &quot;type&quot;: &quot;Embedded&quot;,&#xd;
      &quot;className&quot;: &quot;com.here.xyz.psql.PSQLXyzConnector&quot;,&#xd;
      &quot;timeoutMs&quot;: 0&#xd;
    }&#xd;
  },&#xd;
  &quot;capabilities&quot;: {&#xd;
    &quot;propertySearch&quot;: true&#xd;
  },&#xd;
  &quot;connectionSettings&quot;: {&#xd;
    &quot;maxConnections&quot;: 512,&#xd;
    &quot;minConnections&quot;: 0&#xd;
  }  &#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${XYZ_URI_PREFIX}/connectors?access_token=${CONN_API_KEY}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49587">201</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Validate Res Body" enabled="false">
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">
// Fail the test case (by default), unless it is found to have &quot;passed&quot; later on
prev.setSuccessful(false);

// Compare actual v/s expected
var actualResObj = JSON.parse(prev.getResponseDataAsString());
var expectedConnectorId = &quot;psql&quot;;
var actualConnectorId = actualResObj[0].id;

if ( actualConnectorId == expectedConnectorId ) {
	prev.setSuccessful(true);
}
else {
	prev.setSuccessful(false);
	prev.setResponseMessage(&quot;:: ERROR :: Response body doesn&apos;t match. \n\nExpected connector : [&quot;+ expectedConnectorId +&quot;]\n\nActual : [&quot;+ actualConnectorId +&quot;]&quot;);
}


</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Space" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;id&quot;: &quot;utm-dev:maptask&quot;,&#xd;
	&quot;title&quot;: &quot;UTM Dev - MapTask space&quot;,&#xd;
	&quot;description&quot;: &quot;MapTask Space for UTM Dev environment&quot;,&#xd;
	&quot;storage&quot;: {&#xd;
		&quot;id&quot;: &quot;psql-utm-poc&quot;&#xd;
	},&#xd;
	&quot;enableUUID&quot;: true,&#xd;
	&quot;packages&quot;: [&#xd;
	    &quot;CM_SOURCING_DEV&quot;,&#xd;
	    &quot;CM_MAPCREATOR_DEV&quot;,&#xd;
	    &quot;CM_MAPCREATOR_DELTA_DEV&quot;,&#xd;
	    &quot;CM_SOURCING_E2E&quot;,&#xd;
	    &quot;CM_MAPCREATOR_E2E&quot;,&#xd;
	    &quot;CM_MAPCREATOR_DELTA_E2E&quot;&#xd;
	]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${XYZ_URI_PREFIX}/spaces</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Body" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-857009810">&quot;type&quot;:&quot;ErrorResponse&quot;,&quot;error&quot;:&quot;Exception&quot;,&quot;errorMessage&quot;:&quot;Insufficient rights. Token access</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Space" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${XYZ_URI_PREFIX}/spaces/utm-dev:dummy_space_3?access_token=APQtnzlw1OdsOmfW_sbDoIM</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49590">204</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate Res Body" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-857009810">&quot;type&quot;:&quot;ErrorResponse&quot;,&quot;error&quot;:&quot;Exception&quot;,&quot;errorMessage&quot;:&quot;Insufficient rights. Token access</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <PostThreadGroup guiclass="PostThreadGroupGui" testclass="PostThreadGroup" testname="tearDown" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </PostThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="tearDown - Clean JMeter specific Tasks" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${XYZ_URI_PREFIX}/spaces/${SPACE_ID}/features?access_token=${WR_API_KEY}&amp;id=${__eval(${ALL_TASK_IDS})}</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <sampleCount>true</sampleCount>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <sampleCount>true</sampleCount>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
